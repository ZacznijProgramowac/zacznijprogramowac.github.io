"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[9057],{2837:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-3307512e",path:"/funkcje/funkcje-zwrotne-callbacks/",title:"Funkcje zwrotne - callbacks",lang:"pl-PL",frontmatter:{permalink:"/funkcje/funkcje-zwrotne-callbacks/"},excerpt:"",headers:[{level:2,title:"Inne przykłady",slug:"inne-przykłady",children:[]},{level:2,title:"Przykład",slug:"przykład",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"funkcje/04-funkcje-zwrotne-callbacks.md",git:{}}},7874:(a,n,s)=>{s.r(n),s.d(n,{default:()=>o});var e=s(6252);const c=(0,e.uE)('<h1 id="funkcje-zwrotne-callbacks" tabindex="-1"><a class="header-anchor" href="#funkcje-zwrotne-callbacks" aria-hidden="true">#</a> Funkcje zwrotne - callbacks</h1><p>Do tej pory w przykładach przekazywaliśmy do funkcji typy proste. Oczywiście, funkcja w JavaScript przyjmie wszystko, mogą być to obiekty, listy, a także inne funkcje. Funkcje w JavaScript są obiektami, dlatego możemy je także przekazywać jako parametry.</p><p>Funkcja przesyłana do innej funkcji nazywana jest callback function i może być wywołana wewnątrz tej funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from callback function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Funkcja callback jest wykonywana zazwyczaj po zakończeniu działania funkcji, do której została przesłana. Stąd też nazwa <code>call back</code>. Jej zadaniem jest dokończenie wykonywanego zadania.</p><p>W przykładzie widzicie funkcję <code>setTimeout</code>, która przyjmuje dwa parametry. Pierwszym parametrem jest funkcja, drugim czas, po jakim zostanie wykonana ta funkcja.</p><p>Mamy tu idealny przykład funkcji <code>callback</code>, gdy zakończy się działanie funkcji <code>setTimeout</code>, funkcja <code>callback</code> zostanie wywołana.</p><p>Funkcja <code>setTimeout</code> jest także funkcją asynchroniczną. To właśnie podczas pracy z asynchronicznością, będziecie używać najwięcej funkcji typu <code>callback</code>. W takich przypadkach zadaniem funkcji <code>callback</code> będzie wykonanie kodu po zakończeniu zadania asynchronicznego i dlatego tutaj znalazły tak duże zastosowanie. Do asynchroniczności powrócimy jednak w innym dziale.</p><p>W pierwszym przykładzie przekazaliśmy funkcję w postaci anonimowej. Możemy jednak przekazywać funkcje w różnej postaci:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from callback arrow function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku zdefiniowaliśmy funkcję jako arrow function. Bardzo często funkcje callback używane są właśnie w ten sposób jako arrow function.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from expression arrow function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Możemy również zdefiniować arrow function jako wyrażenie funkcyjne i przekazać taką zmienną do innej funkcji. Zwróćcie uwagę, że przekazana zmienna nie jest wywołana, nie ma na końcu nawiasów okrągłych. Przekazujemy tylko samą postać funkcji, bez wywołania.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">callback2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from expression function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>callback2<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Oczywiście możemy także tworzyć wyrażenia w postaci tradycyjnej i przekazać samą nazwę zmiennej.</p><p>Czasami ma to znaczenie czy przekazujemy zwykłą anonimową funkcję, czy arrow function. Chodzi tutaj głównie o kontekst <code>this</code> . W tym momencie nie będziemy tego omawiać, dla obiektowości i <code>this</code> będzie poświęcony oddzielny dział.</p><h2 id="inne-przykłady" tabindex="-1"><a class="header-anchor" href="#inne-przykłady" aria-hidden="true">#</a> Inne przykłady</h2><p>Programując w JavaScript, funkcje callback będą dla was codziennością. Zobaczmy kilka dodatkowych przykładów ich użycia:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> e <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Przykład pierwszy to lista, na której wywołana jest metoda <code>map</code>. Metoda ta przyjmuje jako parametr funkcję callback. Przekazuję więc funkcję, która jako parametr otrzymuje element z listy i mnoży go przez 2. Niemalże każda metoda wywoływana na listach obsługuje funkcje <code>callback</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clicked!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Kolejnym przykładem może być przycisk, na który nakładamy listener z funkcją callback. Gdy przycisk zostanie kliknięty, zostanie wywołana funkcja przekazana jako drugi parametr. W ten sposób reagujemy na wszelkie eventy, jakie są wytwarzane przez kliknięcie przycisk, przekazując funkcje callback.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Some error: &#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://restcountries.eu/rest/v2/alpha/co&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Kolejny przykład to wywołanie funkcji <code>fetch</code> do wykonania zapytania HTTP. Tutaj mamy stworzone dwie funkcje, które przekażemy jako funkcje <code>callback</code>.</p><p>Zauważcie, że funkcje callback mogą także przyjmować parametry. Pierwsza funkcja ma zadeklarowany parametr <code>data</code>. Ta funkcja będzie więc wywoływana z parametrem.</p><p>Druga funkcja ma zadeklarowany parametr <code>error</code> i ewentualny otrzymany <code>error</code> wypisuje do konsoli.</p><p>Oczywiście nazwy parametrów są dowolne i to my ustalamy jak będą się one nazywać w funkcjach callback.</p><p>Gdy przekazujemy funkcje do metody <code>then</code> oraz <code>catch</code> przekazujemy je jako nazwy. Nie wywołujemy funkcji ani nie przekazujemy tam żadnych parametrów.</p><p>Definiowane przez nas funkcje callback muszą być także zadeklarowane zgodnie z tym, jak będą wywoływane przez funkcje, do których je przekazujemy. Musimy zatem sprawdzać dokumentację i wiedzieć, że do przekazanych funkcji callback będą przekazywane dane. Wtedy oczywiście musimy zadeklarować odpowiednią funkcję, która przyjmie określoną ilość parametrów. W innym wypadku nasza aplikacja może nie działać prawidłowo.</p><p>Dlatego musimy korzystać z dokumentacji i dokładnie wiedzieć jak pracować z kodem, który wykorzystuje funkcje callback. W zdecydowanej większości przypadków pracując z JavaScript, my będziemy tylko tworzyć funkcje callback i przesyłać je do gotowego kodu, który je wykorzysta. Będzie to albo jakaś biblioteka, albo natywne rozwiązania JavaScript. Dlatego wcześniej musimy wiedzieć, jakie callback funkcje przygotować.</p><p>Z funkcjami callback będziemy mieli do czynienia jeszcze wiele razy w trakcie kursu i zdążymy się z nimi oswoić.</p><h2 id="przykład" tabindex="-1"><a class="header-anchor" href="#przykład" aria-hidden="true">#</a> Przykład</h2><p>Na koniec pokażę Wam jeszcze przykład użycia funkcji callback we własnym kodzie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">calculator</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Mamy funkcję <code>calculator</code>, która przyjmuje dwa parametry w postaci liczby oraz funkcję callback. Zadaniem funkcji <code>calculator</code> jest wykonanie funkcji callback odebranie wyniku i wyświetlenie go. Ta funkcja odpowiedzialna jest więc za egzekucję przekazanej jej funkcji i prezentację wyniku.</p><p>Logika poszczególnych działań matematycznych będzie reprezentowana w oddzielnych pojedynczych funkcjach:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Zdefiniowałem dwie dodatkowe funkcje, które zajmują się tylko jednym zadaniem. Wykonaniem odpowiedniego działania matematycznego.</p><p>Wywołanie kalkulatora jest bardzo proste:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">calculator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">calculator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do funkcji <code>calculator</code> przekazujemy dwie liczby oraz odpowiednią funkcję w zależności od tego, jakie zadanie chcemy wykonać. Mamy więc tutaj fajne rozdzielenie na funkcję <code>calculator</code>, która zajmuje się zrealizowaniem logiki i wyświetleniem danych, oraz na pojedyncze funkcje odpowiedzialne za jedno konkretne działanie.</p><p>Taki kod jest łatwy w modyfikowaniu, rozszerzaniu i łatwy w testowaniu.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>funkcja callback to funkcja przekazana do innej funkcji</li><li>funkcja callback często wywoływana jest, gdy inna funkcja zakończy działanie</li><li>funkcje callback prawie zawsze używane są w zadaniach asynchronicznych</li><li>funkcje callback używane są też przy metodach Array, eventach API DOM</li><li>funkcje callback również przyjmują parametry</li><li>sprawdźmy dokładnie dokumentację i przygotujmy odpowiednią funkcję callback</li></ul>',44),p={},o=(0,s(3744).Z)(p,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);