"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[4325],{8818:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-9dfb9c9e",path:"/tablice/map-flatMap/",title:"Metoda map i flatMap",lang:"pl-PL",frontmatter:{permalink:"/tablice/map-flatMap"},excerpt:"",headers:[{level:2,title:"Metoda map",slug:"metoda-map",children:[]},{level:2,title:"Metoda flatMap",slug:"metoda-flatmap",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/05-map-flatMap.md",git:{}}},1202:(a,n,s)=>{s.r(n),s.d(n,{default:()=>o});var e=s(6252);const p=(0,e.uE)('<h1 id="metoda-map-i-flatmap" tabindex="-1"><a class="header-anchor" href="#metoda-map-i-flatmap" aria-hidden="true">#</a> Metoda map i flatMap</h1><p>Jedną z najpopularniejszych metod używanych na tablicach jest metoda <code>map</code>. Sprawdzimy też dodatkowo metodę <code>flatMap</code> i <code>flat</code>, są one stosunkowo nowe w JavaScript.</p><h2 id="metoda-map" tabindex="-1"><a class="header-anchor" href="#metoda-map" aria-hidden="true">#</a> Metoda map</h2><p>Metoda <code>map</code> jest używana do modyfikowania zawartości tablicy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> copy1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [100, 200, 300]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 10, 20, 30 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Do metody <code>map</code> przekazujemy funkcję <code>callback</code>. Funkcja ta otrzymuje za każdym razem element tablicy, który możemy w jakiś sposób przetworzyć. Gdy przetwarzanie zakończy się, metoda <code>map</code> zwraca nową listę z przetworzonymi elementami. Tablica, na której wywołaliśmy metodę <code>map</code> pozostaje bez zmian.</p><p>Dzięki <code>map</code> możemy na przykład przekształcić elementy w liście w zupełnie coś innego:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copy2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 100, 200, 300 ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { a: 100 }, { a: 200 }, { a: 300 } ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku metoda map przekształca każdą wartość w obiekt. Widzimy, że oryginalna tablica zawierała wartości prymitywne. Natomiast nowa tablica, zawiera już obiekty z przypisanymi wartościami.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copy3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">+</span> index\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [ 100, 201, 302 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Należy też pamiętać, że metoda <code>map</code> musi zwracać wartości. Jeżeli więc rozbudujemy funkcję <code>callback</code> o dodatkowe klamry, pamiętajmy o tym, że musimy użyć instrukcji <code>return</code> inaczej nasz kod nie będzie prawidłowy.</p><p>Metoda <code>map</code> zapewnia też dostęp do <code>indexu</code> każdej przetwarzanej wartości. Indeks elementu jest dostępny niemalże w każdych metodach obiektu <code>Array</code>.</p><p>Jeżeli chcemy przekształcać elementy tablicy używajmy metody <code>map</code>. Używając metody <code>map</code> nie modyfikujemy oryginalnej listy, ale otrzymujemy nową listę, czego nie da się tak łatwo zrobić przy metodzie <code>forEach</code>.</p><p>Jeżeli chcemy zmieniać elementy tablicy, użyjemy metody <code>map</code>, jeżeli nie zmieniamy elementów tablicy używamy metody <code>forEach</code>. Metoda <code>map</code> ona niezwykle popularna i często będziecie ją spotykać w kodzie JavaScript.</p><h2 id="metoda-flatmap" tabindex="-1"><a class="header-anchor" href="#metoda-flatmap" aria-hidden="true">#</a> Metoda flatMap</h2><p>Metoda <code>flatMap</code> jest świeżą metodą w JavaScript. W tym momencie nie jest jeszcze wspierana przez wszystkie środowiska JavaScript. Natomiast niektóre przeglądarki mają ją zaimplementowaną natywnie. Jeżeli będziesz chciał jej używać, sprawdź dokładnie, czy twoje środowisko JavaScript wspiera metodę <code>flatMap</code>.</p><p>W odróżnieniu od <code>map</code> metoda <code>flatMap</code> może zwrócić wiele argumentów, zamiast jednego przetworzonego:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> copy4 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym przykładzie przetwarzamy tablicę. Funkcja przekazana do <code>flatMap</code> otrzymuje wartość, ale zwraca już dwie wartości. Zwrócone są w postaci tablicy, pierwszy element to oryginalna wartość, drugi to wartość podniesiona o <code>1</code>. Tym sposobem rozszerzyliśmy tablicę i mamy teraz w niej więcej elementów. Takich wartości oczywiście możemy zwrócić o wiele więcej.</p><p>Nie da się takiej operacji zrobić w przypadku zwykłego <code>map</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copy5 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Gdy spróbujemy użyć takiej samej funkcji <code>callback</code> otrzymamy tablicę z tablicami. W przypadku metody <code>flatMap</code> wszystko jest spłaszczane do pojedynczej tablicy.</p><p>Tak naprawdę <code>flatMap</code> jest połączeniem metody <code>map</code> oraz <code>flat</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copy6 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przykładzie wywołujemy metodę <code>map</code>, która zwraca tablicę z tablicami, a na końcu wywołujemy metodę <code>flat</code>, która spłaszcza wszystko do pojedynczej tablicy. Otrzymujemy ten same efekt jak w przypadku <code>flatMap</code>.</p><p>Dodatkowo do metody <code>flat</code> możemy przekazać wartość:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Przekazana wartość informuje jak głębokie jest zagnieżdżenie struktur. Dzięki temu możemy spłaszczyć bardzo zagnieżdżone struktury danych.</p><p>Gdy będziemy pracować z takimi strukturami jak tablice wielowymiarowe, to metoda <code>flat</code> oraz <code>flatMap</code> może nam się przydać. Do tej pory takich natywnych rozwiązań w JavaScript nie było i trzeba było korzystać z dodatkowych bibliotek.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>metody <code>map</code> oraz <code>flatMap</code> zawsze zwracają nową tablicę z przetworzonymi elementami</li><li>jeżeli chcemy przetwarzać elementy tablicy użyjemy metody <code>map</code></li><li>jeżeli chcemy zwracać większą ilość elementów do tablicy, możemy użyć <code>flatMap</code></li><li>jeżeli chcemy spłaszczać wielowymiarowe tablice możemy użyć metody <code>flat</code></li></ul>',31),t={},o=(0,s(3744).Z)(t,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);