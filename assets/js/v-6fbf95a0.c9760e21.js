"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[2882],{130:(a,n,s)=>{s.r(n),s.d(n,{data:()=>o});const o={key:"v-6fbf95a0",path:"/petle/for-in-for-of/",title:"Pętle for...of oraz for...in",lang:"pl-PL",frontmatter:{permalink:"/petle/for-in-for-of"},excerpt:"",headers:[{level:2,title:"Pętla for...of  oraz  for...in z tablicami",slug:"petla-for-of-oraz-for-in-z-tablicami",children:[]},{level:2,title:"Pętla for...of  oraz  for...in z string",slug:"petla-for-of-oraz-for-in-z-string",children:[]},{level:2,title:"Pętla for...of  oraz  for...in z object",slug:"petla-for-of-oraz-for-in-z-object",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"petle/02-for-in-for-of.md",git:{}}},4594:(a,n,s)=>{s.r(n),s.d(n,{default:()=>t});const o=(0,s(6252).uE)('<h1 id="petle-for-of-oraz-for-in" tabindex="-1"><a class="header-anchor" href="#petle-for-of-oraz-for-in" aria-hidden="true">#</a> Pętle <code>for...of</code> oraz <code>for...in</code></h1><p>Przed nami dwie pętle które omówimy i porównamy w działaniu. Pierwsza z nich to pętla <code>for...of</code> , a druga pętla <code>for...in</code>.</p><p>Pętla <code>for...of</code> używana jest do iterowania po obiektach iterowalnych jak <code>string</code>, tablice, struktury danych jak <code>Map</code> czy <code>Set</code>.</p><p>Pętla <code>for...in</code> jest używana głównie do iterowania po właściwościach obiektów i najlepiej użyć jej właśnie tylko do tego.</p><h2 id="petla-for-of-oraz-for-in-z-tablicami" tabindex="-1"><a class="header-anchor" href="#petla-for-of-oraz-for-in-z-tablicami" aria-hidden="true">#</a> Pętla <code>for...of</code> oraz <code>for...in</code> z tablicami</h2><p>Pętla <code>for...of</code> jest idealna do pobrania danych z obiektów iterowalnych:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39; &#39;b&#39; &#39;c&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym przypadku iterujemy po tablicy. Widzimy, że zapis jest bardzo prosty. W okrągłych nawiasach deklarujemy zmienną <code>value</code> i wskazujemy obiekt do iteracji. Kolejne wartości znajdują się w zmiennej <code>value</code>.</p><p>Warto zwrócić uwagę, że zmienna przechowująca wartość może być zadeklarowana za pomocą <code>const</code>. Ponieważ przy każdym obrocie pętli, powstaje zupełnie nowa zmienna. Oczywiście, jeżeli będziemy chcieli tą wartość modyfikować warto wtedy użyć deklaracji za pomocą <code>let</code>.</p><p>Zobaczmy jak wygląda pętla <code>for...in</code> użyta na tablicy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;0&#39; &#39;1&#39; &#39;2&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jak już wspomniałem, pętla <code>for...in</code> używana jest do pobierania właściwości obiektu. W tym przypadku dostajemy indeksy poszczególnych elementów tablicy. Jak wiemy tablice to też obiekty, więc tak naprawdę indeksy to po prostu właściwości obiektów.</p><p>Warto zwrócić uwagę, że są to indeksy w postaci stringa. Zazwyczaj natomiast indeksy pobierane są w postaci liczby, tutaj jest inaczej. W dodatku nie ma żadnej gwarancji, że pętla <code>for...in</code> zwróci indeksy w kolejności. Dlatego wydaje się, że z tej pętli jest mały użytek jeśli chodzi o tablice.</p><h2 id="petla-for-of-oraz-for-in-z-string" tabindex="-1"><a class="header-anchor" href="#petla-for-of-oraz-for-in-z-string" aria-hidden="true">#</a> Pętla <code>for...of</code> oraz <code>for...in</code> z <code>string</code></h2><p>Pętla <code>for...of</code> jest także bardzo fajna gdy iterujemy po wartościach string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hey&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;H&#39; &#39;e&#39; &#39;y&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Jak wiemy <code>string</code> jest iterowalny i podobny do tablicy. Używając <code>for...of</code> możemy sobie pobrać kolejne znaki ze stringa.</p><p>Natomiast pętla <code>for...in</code> nie jest zalecana do wartości <code>string</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">in</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jeżeli jednak spróbujemy użyć pętli <code>for...in</code> to również otrzymamy indeksy. Stringi są podobne do tablic i także możemy po nich iterować pętlą <code>for...in</code>, która głównie służy do obiektów.</p><h2 id="petla-for-of-oraz-for-in-z-object" tabindex="-1"><a class="header-anchor" href="#petla-for-of-oraz-for-in-z-object" aria-hidden="true">#</a> Pętla <code>for...of</code> oraz <code>for...in</code> z <code>object</code></h2><p>Jeżeli stworzymy sobie obiekt, nie możemy po nim iterować tak po prostu używając pętli <code>for...of</code> i pobrać jego wartości. Do tego powstała właśnie pętla <code>for...in</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39; &#39;b&#39; &#39;c&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Przy takie iteracji pobieramy tylko i wyłącznie właściwości poszczególnych obiektów, inaczej mówiąc klucze tych obiektów.</p><p>Zmieniając trochę zapis pętli:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Możemy już pobrać wartości z obiektu. Gdy w każdej iteracji mamy dostęp do kolejnego klucza obiektu, to możemy przez klucz odwołać się do poszczególnych wartości obiektu. W każdym razie jeśli chodzi o iterowanie po obiektach, przedstawię więcej informacji w dziale o obiektach.</p><p>Na koniec jeszcze wspomnę, że tak samo jak w pętli <code>for</code> w pętlach <code>for...of</code> oraz <code>for...in</code> możemy używać instrukcji <code>break</code> i <code>continue</code>.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>pętla <code>for...of</code> idealnie nadaje się do iterowania po stringach, tablicach, strukturach jak <code>Set</code> i <code>Map</code>, nie nadaje się za to do iterowania po obiektach</li><li>pętla <code>for...in</code> idealnie nadaje się do iterowania po obiektach, dzięki niej pobieramy kolejne właściwości obiektu</li><li>w tych pętlach też można użyć <code>break</code> oraz <code>continue</code></li></ul>',30),e={},t=(0,s(3744).Z)(e,[["render",function(a,n){return o}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,o]of n)a[s]=o;return a}}}]);