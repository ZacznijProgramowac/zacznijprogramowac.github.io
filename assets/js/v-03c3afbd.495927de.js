"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[9747],{8672:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-03c3afbd",path:"/operatory-logiczne/and-or-examples/",title:"Praktyczne przykłady AND i OR",lang:"pl-PL",frontmatter:{permalink:"/operatory-logiczne/and-or-examples"},excerpt:"",headers:[{level:2,title:"Przykład AND",slug:"przykład-and",children:[]},{level:2,title:"Przykład OR",slug:"przykład-or",children:[]}],filePathRelative:"operatory-logiczne/03-and-or-examples.md",git:{}}},5620:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});var e=s(6252);const p=(0,e.uE)('<h1 id="praktyczne-przykłady-and-i-or" tabindex="-1"><a class="header-anchor" href="#praktyczne-przykłady-and-i-or" aria-hidden="true">#</a> Praktyczne przykłady AND i OR</h1><p>Przygotowałem dodatkowe przykłady do tego, jak można wykorzystać możliwość AND oraz OR w sytuacji, gdy operatory te zwracają konkretne wartości.</p><h2 id="przykład-and" tabindex="-1"><a class="header-anchor" href="#przykład-and" aria-hidden="true">#</a> Przykład AND</h2><p>Na początek zobaczmy przykład z operatorem AND.</p><p>W naszym przykładzie posiada my prosty obiekt, reprezentujący użytkownika:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  isLogged<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Posiadając taki obiekt, chcemy sprawdzić, czy w ogóle obiekt nie jest <code>null</code> i sprawdzić, czy <code>user</code> faktyczne jest zalogowany, standardowo kod może wyglądać tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isUserLoggedNormal</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>isLogged<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Stworzyliśmy zwykłą funkcję z instrukcją <code>if</code>. Sprawdzamy, czy obiekt <code>user</code> nie jest <code>null</code> i czy pole <code>isLogged</code> ma wartość <code>true</code>. Jeżeli tak to zwracamy <code>true</code> w innym wypadku <code>false</code>. Nasza funkcja zawsze jawnie zwraca typ <code>boolean</code>.</p><p>Możemy ten zapis jednak wykonać nieco krócej, z operatorem AND:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isUserLogged</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>isLogged<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isUserLogged</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>W tym przypadku, jeżeli <code>user</code> istnieje, to zwracana jest wartość <code>true</code> z pola <code>isLogged</code>. Jeżeli natomiast <code>user</code> nie istnieje, to zwracana jest wartość ze zmiennej <code>user</code>.</p><p>Jeżeli się zastanawiacie, dlaczego robię konwersję do typu <code>boolean</code> to zobaczmy ten przykład:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isUserLogged</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jeżeli <code>user</code> byłby <code>null</code>, otrzymałbym wartość <code>null</code> przy operatorze <code>AND</code>. Ponieważ nazwa mojej funkcji wskazuje że będzie zwracała typ <code>boolean</code> dokonuję więc konwersji na ten typ.</p><p>Takim prostym sposobem wykorzystując operator <code>AND</code> mogę sprawdzić, czy <code>user</code> istnieje i czy jest zalogowany.</p><h2 id="przykład-or" tabindex="-1"><a class="header-anchor" href="#przykład-or" aria-hidden="true">#</a> Przykład OR</h2><p>W sytuacji, gdy chcemy zwrócić jakaś domyślną wartość, gdy pierwsza wartość nie istnieje, możemy użyć operatora OR.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">greetings</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> greetings <span class="token operator">||</span> <span class="token string">&#39;Have a nice day!&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Have a nice day!&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;Hello there&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Hello there&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W tym przypadku, jeżeli do funkcji nie zostanie przesłana wartość zostanie zwrócona domyślna wartość <code>Have a nice day!</code>. Jeżeli natomiast zmienna <code>greetings</code> nie będzie wartością pustą, zwrócona zostanie wartość z tej zmiennej. Jest to fajne i proste zabezpieczenie przed użyciem pustej wartości.</p><p>Tradycyjna implementacja mogłaby wyglądać tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHelloNormal</span><span class="token punctuation">(</span><span class="token parameter">greetings</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>greetings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> greetings<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;Have a nice day!&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Jest to nieco dłuższy i bardziej rozwlekły kod. Oczywiście można go zapisać jeszcze krócej za pomocą ternary operatora, którego jeszcze omówimy w innym dziale:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> greetings <span class="token operator">?</span> greetings <span class="token operator">:</span> <span class="token string">&#39;Have a nice day!&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Zdecydowanie jednak rozwiązanie z operatorem <code>OR</code> jest bardziej zwięzłe.</p><p>Omówiliśmy zaledwie dwa przykłady użycia tych operatorów przy porównywaniu wartości. Taki kod często możecie spotkać w aplikacjach napisanych w JavaScript i na pewno spotkacie się z wieloma innymi przykładami.</p>',26),o={},t=(0,s(3744).Z)(o,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);