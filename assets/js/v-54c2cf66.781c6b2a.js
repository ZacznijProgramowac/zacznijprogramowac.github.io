"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[236],{3502:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-54c2cf66",path:"/obiekty/podstawy-obiektow/",title:"Obiekty w JavaScript - podstawy",lang:"pl-PL",frontmatter:{permalink:"/obiekty/podstawy-obiektow"},excerpt:"",headers:[{level:2,title:"Tworzenie obiektów",slug:"tworzenie-obiektow",children:[]},{level:2,title:"Odczyt danych",slug:"odczyt-danych",children:[]},{level:2,title:"Zapis danych",slug:"zapis-danych",children:[]},{level:2,title:"Modyfikacja obiektu",slug:"modyfikacja-obiektu",children:[]},{level:2,title:"Skrót do tworzenia obiektów",slug:"skrot-do-tworzenia-obiektow",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/01-podstawy-obiektow.md",git:{}}},3741:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="obiekty-w-javascript-podstawy" tabindex="-1"><a class="header-anchor" href="#obiekty-w-javascript-podstawy" aria-hidden="true">#</a> Obiekty w JavaScript - podstawy</h1><p>Z prostymi obiektami w tym kursie już spotykaliśmy się wielokrotnie. Są to jedne z najpopularniejszych struktur w tym języku podobnie jak tablice. W tym dziale, rozłożymy obiekty na czynniki pierwsze i dowiemy się jak dokładnie działają.</p><h2 id="tworzenie-obiektow" tabindex="-1"><a class="header-anchor" href="#tworzenie-obiektow" aria-hidden="true">#</a> Tworzenie obiektów</h2><p>Tak samo jak tablice, obiekty są typami referencyjnymi. Praca z nimi jest nieco inna niż z typem prymitywnym. Tworzymy je jako postać literałowa:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Tworzymy zmienną i przypisujemy do niej dwie klamerki. W ten sposób tworzymy pusty obiekt. Jest to pusty, ale wciąż poprawny obiekt w JavaScript.</p><p>Zazwyczaj jednak obiekt trzyma w sobie jakieś <em>properties</em> (właściwości) lub częściej spotykane w polskiej nomenklaturze pola obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;full name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;John James Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Każde pole w obiekcie to klucz czyli <code>key</code> oraz jakaś wartość czyli <code>value</code>. Dlatego często spotkacie się z nazwą <code>key:value</code>, która po prostu określa pole w obiekcie. Nazwa ta często pojawia się w dokumentacji.</p><p>Zwrócę jeszcze uwagę na przypisanie wartości, które następuje po dwukropku a nie po znaku równości. Kolejne pola obiektu oddzielane są od siebie przecinkiem.</p><p>Kluczem może być dowolna nazwa, starajmy się jednak nie używać nazw zastrzeżonych dla JavaScript. Zazwyczaj stosuje się notację camleCase lub jednowyrazowe nazwy. Jest jednak możliwość stworzenia nazwy składającej się z więcej niż dwóch wyrazów. Wtedy zapisujemy ją jako string i ujmujemy w dodatkowe znaki cudzysłowia.</p><p>Do pola w obiekcie możemy przypisać każdą wartość. Nie musi być to typ prymitywny, może to być obiekt, funkcja czy tablica.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token punctuation">{</span> z<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Widzimy tutaj obiekt o wiele bardziej skomplikowany z dodatkowymi zagnieżdżonymi strukturami. Jeżeli mamy wpływ na tworzenie obiektów, dobrze jest zapanować nad ich skomplikowaniem i głębokością. Z takimi obiektami pracuje się gorzej i zawsze jest większa możliwość popełnienia błędu.</p><p>Ciekawostką jest także to, że możemy tworzyć pola, których nazwy są bardziej dynamiczne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;random&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;0.9301655569559864&#39;: &#39;random&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Jest to już skrajny przypadek, ale ten obiekt jako klucz posiada randomową liczbę. Tym razem klucz jest definiowany w nawiasach kwadratowych. Między nimi może znaleźć się dowolne wyrażenie JavaScript. Ja akurat wywołuję konkretną metodę <code>Math.random()</code>.</p><p>Wbrew pozorom taka możliwość przydaje się gdy chcemy tworzyć obiekty w dynamiczny sposób na przykład jakimś generatorem, a kluczem mają być kolejne liczby lub na przykład aktualna data. Z takimi obiektami pracuje się nieco inaczej i później poznamy różne metody, które w tym pomagają.</p><h2 id="odczyt-danych" tabindex="-1"><a class="header-anchor" href="#odczyt-danych" aria-hidden="true">#</a> Odczyt danych</h2><p>Dane z obiektów możemy odczytać przynajmniej na dwa sposoby.</p><p>Pierwszy z nich to notacja z kropką:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;John&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Odnosimy się do obiektu i po kropce do odpowiedniego pola w obiekcie. W ten sposób pobieramy wartość.</p><p>Drugi zapis to notacja w nawiasach kwadratowych nazywana <em>bracket notation</em>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;John&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;full name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;John&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku odwołujemy się do obiektu, ale nie odwołujemy się już przez kropkę. Podobnie jak przy tablicy używamy nawiasy kwadratowe i podajemy w nich nazwę pola. Nazwa musi być podana jako wartość string.</p><p>Zauważ, że jest to też jedyna możliwość aby dostać się do pól zadeklarowanych jako <code>string</code>. Nie było by to możliwe z użyciem kropki.</p><p>Zapis <em>bracket notation</em> przydaje się także gdy nazwa pola przetrzymywana jest w zmiennej, a zdarzy się tak niejednokrotnie w naszym kodzie JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">&#39;full name&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>fullName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Zazwyczaj pisząc aplikację używamy notacji z kropką. Jednak w niektórych sytuacjach <code>brakcet notation</code> jest bardzo pomocne.</p><p>Jeśli chcemy odwoływać się do pół zagnieżdżonych wstawiamy kolejne kropki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>b<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3 ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>lub kolejne nawiasy kwadratowe. Widzimy, że notacja z kropką ma tutaj przewagę w czytelności i zwięzłości kodu.</p><p>Może się przydarzyć sytuacja w której, nie uda nam się odczytać pola bo takie nie istnieje:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>enemy<span class="token punctuation">)</span> <span class="token comment">// undefine</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>enemy<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jeżeli odwołamy się do pola, które nie istnieje w obiekcie, otrzymamy wartość <code>undefined</code>. JavaScript nie zgłasza błędu. Czasem jednak próbujemy dalej grzebać w obiekcie i wywołanie kolejnego pola na <code>undefined</code> wywoła błąd.</p><p>Takie obiekty z niepewną strukturą i brakującymi polami mogą się zdarzyć. Dlatego stosujemy wtedy serię instrukcji <code>if</code> lub <em>optional chaining,</em> który poznaliśmy w poprzednich częściach kursu.</p><h2 id="zapis-danych" tabindex="-1"><a class="header-anchor" href="#zapis-danych" aria-hidden="true">#</a> Zapis danych</h2><p>Przypisanie nowej wartości do obiektu jest bardzo proste:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user<span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">&#39;Rambo 3&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Odwołujemy się przez znak przypisania, a nie przez dwukropek jak przy tworzeniu obiektu. W ten sposób przypisujemy nową wartość do pola obiektu.</p><p>Możemy oczywiście przypisać każdą wartość na przykład <code>undefined</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user<span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Gdy przypiszemy wartość <code>undefined</code> i odwołamy się do tego pola, otrzymamy oczywiście wartość <code>undefined</code>. Również taką wartość otrzymamy gdy odwołamy się do pola, które nie istnieje.</p><p>Dlatego należy być ostrożnym gdy operujemy na polach obiektu i otrzymujemy <code>undefined</code>. Może być to albo wartość tego pola, albo takie pole po prostu nie istnieje. Potem poznamy dodatkowe metody, które pozwalają stwierdzić czy konkretne pola istnieją w obiekcie.</p><h2 id="modyfikacja-obiektu" tabindex="-1"><a class="header-anchor" href="#modyfikacja-obiektu" aria-hidden="true">#</a> Modyfikacja obiektu</h2><p>W JavaScript możemy nie tylko modyfikować pola obiektu, ale także sam obiekt, dodając do niego nowe właściwości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>user<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">&#39;Jungle&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jest to bardzo proste. Odwołujemy się do obiektu i po kropce wstawiamy nazwę, którą chcemy dodać do obiektu.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  {\n    name: &#39;John&#39;,\n    surname: undefined,\n    &#39;full name&#39;: &#39;John James Rambo&#39;,\n    address: &#39;Jungle&#39;\n  }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Od tego momentu obiekt będzie posiadał nowe pole. W JavaScript często możecie się spotkać z takimi modyfikacjami w locie. W jednym miejscu obiekt nie będzie miał jakiegoś pola, a w drugim miejscu już będzie miał dodane nowe właściwości. Możemy w ten sposób dodawać nie tylko wartości prymitywne, ale funkcje, tablice i inne obiekty.</p><p>Praca z takimi obiektami może być kłopotliwa. Dlatego starajmy się przewidzieć, jakie pola będzie posiadał obiekt i zadeklarować obiekt ze wszystkimi niezbędnymi polami. Do aktualnie nie używanych pól można przypisać wartość <code>null</code>.</p><p>Nie tylko możemy modyfikować obiekty dodając do nich nowe pola. Możemy też całkowicie usuwać pola z obiektów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">delete</span> user<span class="token punctuation">.</span>address<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Używamy instrukcji <code>delete</code>, która całkowicie usuwa pole z obiektu. Nie jest ono ustawione na <code>null</code> czy <code>undefined</code> tylko całkowicie usuwane.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n    surname<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;full name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;John James Rambo&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Operator ten jest jednak bardzo wolny. Jeżeli chcemy zmienić obiekt, być może warto przepisać obiekt tylko z tymi polami, które chcemy w dalszej części aplikacji obsługiwać, są na to różne sposoby, które potem poznamy.</p><p>W mojej opinii czasami lepiej stworzyć nowy obiekt na bazie istniejącego niż manipulować nim tak mocno przez dodawanie nowych pól czy usuwanie ich. Kod wtedy może być bardziej zrozumiały, a także nasz edytor kodu analizujący kod łatwiej wychwyci możliwość popełnienia błędu.</p><h2 id="skrot-do-tworzenia-obiektow" tabindex="-1"><a class="header-anchor" href="#skrot-do-tworzenia-obiektow" aria-hidden="true">#</a> Skrót do tworzenia obiektów</h2><p>W specyfikacji ES6 pojawiła się jeszcze ciekawa opcja tworzenie obiektu w nieco krótszy sposób. Dotyczy to głównie obiektów zwracanych z jakiś funkcji lub obiektów tworzonych z danych:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> surname <span class="token operator">=</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">,</span>\n  surname<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>W tym przykładzie mamy dwie zmienne, z których chcemy stworzyć obiekt. Możemy skorzystać ze skrótu i stworzyć obiekt wstawiając zmienne między dwie klamry. Nazwy tych zmiennych będą nazwami kluczy, a wartości zmiennych staną się wartościami obiektu.</p><p>Jest to oczywiście odpowiednik tego zapisu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> name<span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> surname<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W taki sposób tworzyło się obiekty z gotowych danych, zanim pojawiła się nowa opcja w ES6.</p><p>Ten krótki zapis często wykorzystywany jest w funkcjach JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> surname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> surname <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John&#39;, surname: &#39;Rambo&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Tutaj mamy funkcję, która z otrzymanych parametrów tworzy obiekt i zwraca go. Oczywiści jest to uproszczony przykład. Często jednak będziecie się spotykać w JavaScript właśnie z taką formą tworzenia obiektów.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>obiekty tworzymy jako postać literałowa</li><li>pole obiektu reprezentowane jest przez klucz - wartość</li><li>kluczem może być niemalże dowolną wartość, przy wartości string używamy cudzysłowia, przy wartościach dynamicznych nawiasów kwadratowych</li><li>wartością może być wartość prymitywna, funkcja, obiekt czy tablica, dosłownie każda struktura</li><li>do pól odwołujemy się przez kropkę lub nawiasy kwadratowe</li><li>możemy w czasie działania aplikacji dodawać nowe pola lub je usuwać za pomocą <code>delete</code></li><li>z gotowych danych można tworzyć obiekty w krótszej formie</li></ul>',70),o={},p=(0,s(3744).Z)(o,[["render",function(a,n){return e}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);