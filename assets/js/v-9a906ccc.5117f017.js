"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[6198],{6903:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-9a906ccc",path:"/obiekty/operator-spread/",title:"Spread i rest operator z obiektami w JavaScript",lang:"pl-PL",frontmatter:{permalink:"/obiekty/operator-spread"},excerpt:"",headers:[{level:2,title:"Łączenie obiektów",slug:"łaczenie-obiektow",children:[]},{level:2,title:"Operator spread na innych wartościach",slug:"operator-spread-na-innych-wartosciach",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/06-operator-spread.md",git:{}}},8856:(a,n,s)=>{s.r(n),s.d(n,{default:()=>t});var e=s(6252);const p=(0,e.uE)('<h1 id="spread-i-rest-operator-z-obiektami-w-javascript" tabindex="-1"><a class="header-anchor" href="#spread-i-rest-operator-z-obiektami-w-javascript" aria-hidden="true">#</a> Spread i rest operator z obiektami w JavaScript</h1><p>Operator spread omawiałem już przy pracy z tablicami. Możemy go także używać do pracy z obiektami. Zerknijmy na kilka przykładów operatora spread i obiektów w JavaScript.</p><h2 id="łaczenie-obiektow" tabindex="-1"><a class="header-anchor" href="#łaczenie-obiektow" aria-hidden="true">#</a> Łączenie obiektów</h2><p>Na początek bardzo prosty przykład łączenia obiektów za pomocą operatora <code>spread</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>obj1<span class="token punctuation">,</span>\n  <span class="token operator">...</span>obj2<span class="token punctuation">,</span>\n  spec<span class="token operator">:</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   { name: &#39;John&#39;, surname: &#39;Rambo&#39;, spec: &#39;soldier&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Tak naprawdę przepisaliśmy tutaj właściwości z dwóch obiektów do zupełnie nowego obiektu i jeszcze dopisaliśmy nową właściwość. Możemy też dodać nowe metody, jeśli mamy taką potrzebę.</p><p>Obiekt, który powstał, jest kopią tych obiektów i nie ma tutaj żadnego związania referencyjnego. Jeżeli dokonamy teraz zmian w obiekcie trzecim, zmiany te nie będą widoczne w pozostałych obiektach.</p><p>O kopiowaniu obiektów będzie oddzielny dział. Od razu jednak powiem, że kopia wykonana za pomocą <code>spread</code> operatora to * shallow copy*. Oznacza to, że jeżeli w jakimś obiekcie znajdą się inne obiekty referencyjne jak tablice czy obiekty to operator <code>spread</code> przepisze tylko referencje do tych obiektów. W takim przypadku zmiana pól referencyjnych będzie widoczna w każdym obiekcie. Kopia <code>spread</code> operatora działa tylko na pola prymitywne.</p><p>Warto jeszcze sprawdzić co się stanie, gdy obiekty mają te same pola:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Batman&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj6 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj4<span class="token punctuation">,</span> <span class="token operator">...</span>obj5 <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;Batman&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Obiekty w JavaScript nie mogą mieć dwóch tych samych nazw pól. Jednak może się zdarzyć, że będziemy łączyć ze sobą podobne obiekty lub nawet takie same. W tym przypadku mamy dwa obiekty z tym samym polem <code>name</code>. W nowym obiekcie zachowa się więc pole z ostatniego obiektu.</p><p>Jest to dość przydatne rozwiązanie, gdy chcemy zwrócić taki sam obiekt z tylko jednym zmienionym polem:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj7 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  spec<span class="token operator">:</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n  status<span class="token operator">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">changeStatus</span><span class="token punctuation">(</span><span class="token parameter">soldier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>soldier<span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">&#39;non active&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">changeStatus</span><span class="token punctuation">(</span>obj7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>W tym przypadku mamy zdefiniowany obiekt, w którym znajduje się kilka pól. Mamy też funkcję, której zadaniem jest zmiana jednego pola w obiekcie o nazwie <code>status</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n    surname\n<span class="token operator">:</span>\n  <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n    spec\n<span class="token operator">:</span>\n  <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n    status\n<span class="token operator">:</span>\n  <span class="token string">&#39;non active&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Funkcja zwraca nowy obiekt przez <code>spread</code> operatora i dopisuje pole <code>status</code> z nową wartością. W ten sposób nadpiszemy poprzednie pole w obiekcie. Z takim użyciem <code>spread</code> operatora spotkacie się bardzo często. Zwracamy obiekt o tych samych wartościach, lekko go modyfikując.</p><h2 id="operator-spread-na-innych-wartosciach" tabindex="-1"><a class="header-anchor" href="#operator-spread-na-innych-wartosciach" aria-hidden="true">#</a> Operator spread na innych wartościach</h2><p>Operator spread możemy także użyć do innych wartości niż obiekty. Przydatność takiego działania nie jest zbyt duża, ale zobaczmy kilka przykładów:</p><p>Rozbicie wartości string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;0&#39;: &#39;f&#39;, &#39;1&#39;: &#39;o&#39;, &#39;2&#39;: &#39;o&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Otrzymujemy obiekt, gdzie kluczami są kolejne indeksy, a wartościami pojedyncze znaki.</p><p>Rozbicie tablicy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;0&#39;: 100, &#39;1&#39;: 200, &#39;2&#39;: 300 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Przy tablicach sytuacja jest bardzo podobna. Pomimo tego, że tablice też są obiektami to nadal istnieją jako podtyp <code>Array</code>. Dlatego czasami w kodzie spotkacie się z taką konwersją tablic na typowe obiekty.</p><p>Co się jednak stanie, jeżeli użyjemy wartości <code>null</code> lub <code>undefined</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W takim przypadku otrzymamy puste obiekty. Z taką sytuacją już częściej możemy się spotkać w naszym kodzie. Z wartości <code>null</code> i <code>undefined</code> powstaje pusty obiekt, ale posiada on jako prototyp główny Object z JavaScript. Nie jest to więc w pełni pusty obiekt, jaki może powstać przy przekazaniu do <code>Object.create()</code> wartości <code>null</code>.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li><p>operator <code>spread</code> rozbija obiekt na pojedyncze właściwości</p></li><li><p>operator <code>spread</code> może nam posłużyć do łączenia obiektów lub tworzenia kopii</p></li><li><p>operator <code>spread</code> tworzy <em>shallow copy</em> obiektów</p></li></ul>',29),o={},t=(0,s(3744).Z)(o,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);