"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8621],{8337:(n,a,s)=>{s.r(a),s.d(a,{data:()=>o});const o={key:"v-0e998466",path:"/klasy/typeof-vs-instanceof/",title:"Operator typeof vs instanceof w JavaScript",lang:"pl-PL",frontmatter:{permalink:"/klasy/typeof-vs-instanceof"},excerpt:"",headers:[{level:2,title:"Operator typeof",slug:"operator-typeof",children:[]},{level:2,title:"Operatora instanceof",slug:"operatora-instanceof",children:[]},{level:2,title:"Kiedy jaki operator używać?",slug:"kiedy-jaki-operator-uzywac",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"klasy/05-typeof-vs-instanceof.md",git:{}}},2815:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});var o=s(6252);const e=(0,o.uE)('<h1 id="operator-typeof-vs-instanceof-w-javascript" tabindex="-1"><a class="header-anchor" href="#operator-typeof-vs-instanceof-w-javascript" aria-hidden="true">#</a> Operator typeof vs instanceof w JavaScript</h1><p>Na początku tego kursu pracowaliśmy głównie z podstawowymi typami w JavaScript. Do ich sprawdzania używałem operatora <code>typeof</code>. W JavaScript istnieje jeszcze jeden operator <code>instanceof</code>, który użyłem kilka razy przy omawianiu prototypów. Zobaczmy, jaka jest różnica i który operator warto używać.</p><h2 id="operator-typeof" tabindex="-1"><a class="header-anchor" href="#operator-typeof" aria-hidden="true">#</a> Operator typeof</h2><p>Za pomocą operatora <code>typeof</code> możemy wyświetlić typ sprawdzanej wartości lub też wykorzystać go do porównania czy dana wartość jest określonego typu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;string&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Gdy użyjemy <code>typeof</code> do sprawdzenia jakiego typu jest wartość, zostanie zwrócony typ w postaci stringa.</p><p>Dlatego, gdy wykorzystujemy ten operator do porównania, musimy typy zapisywać jako string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42n</span> <span class="token operator">===</span> <span class="token string">&#39;bigint&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;Sym&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>W ten sposób za pomocą <code>typeof</code> i zwykłego operatora porównania możemy sprawdzić, czy dana wartość ma konkretny typ. Nazwa każdego typu zapisana jest w formie tekstu.</p><p>Operator <code>typeof </code> potrafi zwrócić tylko te typy, które są w budowane w JavaScript. Zwraca więc wszystkie typy prymitywne, dodatkowo potrafi rozróżnić typ <code>object</code> i <code>function</code>.</p><p>Nie potrafi jednak dokładnie określić typu na podstawie klasy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;boo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Mamy tutaj przykład klas wbudowanych jak <code>Date</code>, <code>Error</code> czy <code>Array</code>. Dla tych typów zawsze będzie zwracał typ <code>object</code>. Nawet jeżeli stworzymy własną klasę, <code>typeof</code> nie będzie umiał rozpoznać typu <code>Foo</code>, również będzie zwracał typ <code>object</code> . Oczywiście jest to także prawda, ponieważ każdy obiekt w JavaScript również ma typ <code>Object</code> co jest związane z dziedziczeniem prototypowym.</p><p>Małe podsumowanie tego operatora. Operator <code>typeof</code> na podstawie wartości podstawionej z prawej strony, zwraca typ tej wartości w formie string. Jest to albo jeden z typów prostych, podtyp <code>function</code> albo typ <code>object</code>. Operuje tylko na typach zdefiniowanych w JavaScript. Nie potrafi różnić konkretnych klas jak <code>Date</code>, <code>Error</code>, <code>Array</code> czy nasze własne klasy. Dla niego wszystkie te konstrukcje będą typu <code>object</code>.</p><h2 id="operatora-instanceof" tabindex="-1"><a class="header-anchor" href="#operatora-instanceof" aria-hidden="true">#</a> Operatora instanceof</h2><p>Operator <code>instanceof</code> z technicznej strony sprawdza łańcuch prototypów, aby dokładnie rozpoznać, w jaki sposób powstał dany obiekt, a więc używamy go tylko do testowania obiektów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Boo</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boo</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Na tym przykładzie widzimy, że za jego pomocą możemy dokładnie określić, na jakiej bazie klasy powstał obiekt (a dokładniej z jakiego konstruktora funkcji). Stworzony obiekt <code>Date</code> jest rozpoznawalny jako klasa <code>Date</code>, tak samo jest z obiektem <code>Array</code> oraz naszym obiektem zbudowanym z klasy <code>Boo</code>.</p><p>Ten operator zwraca zawsze wartość <code>boolean</code>, musimy więc podstawić obiekt do testowania, a także typ, z którym chcemy porównać dany obiekt. Operator nie wyświetli nam typu jak to robi operator <code>typeof</code>.</p><p>Wspominałem, że operator potrafi przetestować cały łańcuch prototypów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Boo</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boo</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>W tym przypadku widzimy, że obiekty powstałe z <code>Date</code> oraz <code>Array</code> to także typy <code>Object</code>. Ponieważ na końcu ich łańcucha jest dołączony <code>Object.prototype</code>.</p><p>Podobnie jest z naszą klasą <code>Bar</code>, która rozszerza klasę <code>Boo</code>. Obiekt klasy <code>Bar</code> zbudowany jest więc z trzech prototypów, dlatego dla każdej z klas, które są przekazane do porównania zwróci <code>true</code>.</p><p>Wspomnę jeszcze raz, że <code>instanceof</code> nie działa na typach prymitywnych:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Nie możemy prymitywnej wartości &#39;abc&#39; porównać do typu prymitywnego <code>&#39;string&#39;</code> , który zwraca choćby operator <code>typeof</code>. Po prawej stronie operatora <code>instanceof</code> musi stać jakiś konstruktor funkcji czy nasza klasa.</p><p>Dlatego, jeżeli stworzymy obiekt za pomocą <code>new String()</code> to możemy go porównać do konstruktora <code>String</code>. Należy jednak pamiętać, że prymitywny <code>string</code>, a obiekt stworzony za pomocą <code>new String()</code> to dwa różne byty, z którymi nie pracuje się tak samo.</p><h2 id="kiedy-jaki-operator-uzywac" tabindex="-1"><a class="header-anchor" href="#kiedy-jaki-operator-uzywac" aria-hidden="true">#</a> Kiedy jaki operator używać?</h2><p>Nie ma jednoznacznej odpowiedzi, który operator najlepiej użyć. Jeżeli musimy przetestować typy prymitywne to używamy operatora <code>typeof</code>.</p><p>Jeżeli pracujemy na własnych obiektach zdecydowanie przydatniejszy jest operator <code>instanceof</code>, który dokładnie potrafi określić, jaki konstruktor został użyty do stworzenia obiektu.</p><p>Mówi się też, że <code>typeof</code> jest szybszy niż <code>instanceof</code>. Głównym powodem wolniejszego działania jest to, że <code>instanceof</code> przeszukuje cały łańcuch prototypów. Dla bardzo skomplikowanych obiektów może to być dość pracochłonne zadanie, dla mniej skomplikowanych, nie powinniśmy się przejmować.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>operator <code>typeof</code> zwraca typ w postaci <code>string</code></li><li>operator <code>instanceof</code> służy do porównania czy coś jest danego typu i zwraca wartość <code>true</code> lub <code>false</code></li><li>operator <code>typeof</code> może zwrócić tylko jeden z kilku typów wbudowanych JavaScript</li><li>operator <code>instanceof</code> pracuje tylko na typach obiektowych, nie sprawdzi typu dla wartości prymitywnej</li><li>operatora <code>typeof</code> dla typów obiektowych zwraca tylko <code>function</code> lub <code>object</code>, nie określi dokładnie typu stworzonego z klasy <code>Date</code>, zawsze będzie to <code>object</code></li><li>operator <code>instanceof</code> może pomóc w dokładnym określeniu typu również dla obiektów tworzonych z naszych klas</li></ul>',33),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,o.up)("Comments");return(0,o.wg)(),(0,o.iD)(o.HY,null,[e,(0,o.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,o]of a)n[s]=o;return n}}}]);