"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[4258],{174:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-15ab77a8",path:"/obiekty/porownanie-referencji/",title:"Referencja i porównanie obiektów JavaScript",lang:"pl-PL",frontmatter:{permalink:"/obiekty/porownanie-referencji"},excerpt:"",headers:[{level:2,title:"Porównanie obiektów",slug:"porownanie-obiektow",children:[]},{level:2,title:"Metoda Object.is",slug:"metoda-object-is",children:[]},{level:2,title:"Porównanie zawartości obiektów",slug:"porownanie-zawartosci-obiektow",children:[]},{level:2,title:"Gotowa biblioteka",slug:"gotowa-biblioteka",children:[]},{level:2,title:"Co warto zapamiętać:",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/08-porownanie-referencji.md",git:{}}},1192:(n,a,s)=>{s.r(a),s.d(a,{default:()=>w});var e=s(6252);const o=(0,e.uE)('<h1 id="referencja-i-porownanie-obiektow-javascript" tabindex="-1"><a class="header-anchor" href="#referencja-i-porownanie-obiektow-javascript" aria-hidden="true">#</a> Referencja i porównanie obiektów JavaScript</h1><p>Obiekty w JavaScript są przetrzymywane i kopiowane przez referencję. Gdy przypiszemy obiekt do zmiennej to zmienna ta przetrzymuje referencję do obiektu. Z tego powodu musimy inaczej podejść do porównania obiektów niż przy wartościach prymitywnych.</p><h2 id="porownanie-obiektow" tabindex="-1"><a class="header-anchor" href="#porownanie-obiektow" aria-hidden="true">#</a> Porównanie obiektów</h2><p>Na początek zobaczmy jakie otrzymamy wyniki przy standardowym operatorze porównania. Mamy dwa takie same obiekty i chcemy je porównać:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Nie ważne jakiego porównania użyjemy zawsze otrzymamy wynik <code>false</code>. Porównanie za pomocą operatora porównania porównuje to co trzyma zmienna, a jest nią referencja do obiektu. Dwa stworzone obiekty mają różną referencję, nawet jeżeli mają te same wartości.</p><p>To porównanie może nam jedynie posłużyć do sprawdzenia czy zmienne przetrzymują tą samą referencję:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copy1 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy1 <span class="token operator">===</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy1 <span class="token operator">==</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym przypadku definiuję nową zmienną i przypisuje jej stworzony wcześniej obiekt. Tak naprawdę przypisuję tą samą referencję. Gdy teraz porównam te dwie zmienne otrzymam wartość <code>true</code> ponieważ obie odnoszą się do tego samego obiektu. Gdy chcemy porównać wartości obiektów, musimy być świadomi, że nie da się dokonać tego za pomocą operatora porównania.</p><h2 id="metoda-object-is" tabindex="-1"><a class="header-anchor" href="#metoda-object-is" aria-hidden="true">#</a> Metoda Object.is</h2><p>W JavaScript istnieje jeszcze specjalna metoda <code>Object.is</code>. Jest to metoda do której przekazuje się dwa parametry. Jej zadaniem jest sprawdzenie czy przekazane parametry mają te same wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Działa ona trochę inaczej niż operator potrójnego porównania. Na przykład widzi różnicę między <code>0</code> i <code>-0</code>. Również sławną wartość <code>NaN</code> potrafi określić jako równą sobie, a wiemy, że każda wartość <code>NaN</code> w JavaScript jest unikalna.</p><p>Jednak <code>Objec.is</code> nie porównuje nam wartości obiektów tylko nadal referencje. Podobnie jak operator porównania metoda ta przy porównaniu obiektów będzie bazowała na referencji.</p><p>Chociaż wydaje się to bezużyteczne to porównanie referencji przydaje się. Jednak znacznie częściej chcemy wiedzieć czy obiekty są naprawdę sobie równe i czy mają te same wartości. W takich wypadkach musimy dokładnie sprawdzać ich zawartość.</p><h2 id="porownanie-zawartosci-obiektow" tabindex="-1"><a class="header-anchor" href="#porownanie-zawartosci-obiektow" aria-hidden="true">#</a> Porównanie zawartości obiektów</h2><p>W JavaScript nie istnieje rozwiązanie na porównanie wartości obiektów. Albo musimy napisać własną implementację, albo skorzystać z gotowego rozwiązania. Jeżeli mamy szczególne wymagania co do porównania obiektów, można napisać własne rozwiązanie. Istnieją też takie rozwiązania, które można konfigurować i decydować co w obiektach ma być porównane.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj1<span class="token punctuation">.</span>name <span class="token operator">===</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEqual</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Gdy mamy bardzo proste obiekty, możemy zdecydować się na napisanie prostej funkcji, która porówna wartości obiektów. Takie banalne rozwiązanie sprawdzi się przy bardzo prostych obiektach, ale i tutaj może nas spotkać wiele niespodzianek.</p><p>Co jeśli wartości string zapisane są różną wielkością liter. Co jeśli w obiekcie pojawiło się inne dodatkowe pole. Co jeśli w obiekcie nie ma pola o takiej nazwie, a w drugim to pole ma wartość <code>undefined</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEqual</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W takim wypadku również otrzymamy wartość <code>true</code>. Również dwie wartości <code>NaN</code> przy takim porównaniu zwrócą nam <code>false</code>. Jeszcze gorzej gdy nasze obiekty zaczną przetrzymywać inne obiekty. Wtedy musimy rozpisać kolejne funkcje do porównania ich wartości. Przypadków brzegowych jest tutaj cała masa.</p><p>Możecie też spróbować rozwiązań z użyciem <code>JSON.stringify</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Trzeba jednak pamiętać, że w tym rozwiązaniu następuje serializacja obiektów do formatu <code>JSON</code>, który również ma swoje ograniczenia, na przykład nie obsługuje wartości <code>undefined</code> lub pojawi się problem z kolejnością pól w obiekcie. To rozwiązania tak naprawdę porównuje wartość <code>string</code> w której zapisany jest cały obiekt i oba stringi muszą być identyczne, mieć takie same znaki na takiej samej pozycji.</p><h2 id="gotowa-biblioteka" tabindex="-1"><a class="header-anchor" href="#gotowa-biblioteka" aria-hidden="true">#</a> Gotowa biblioteka</h2><p>Porównanie obiektów nigdy nie było sprawą trywialną i dobrze trzeba się nad tym zastanowić, jak to zrobić. Będziemy stawali tutaj przed różnymi problemami jak <em>Shallow equality</em> czy <em>Deep equality</em>.</p>',27),p=(0,e.Uk)("Jeżeli to możliwe, dobrze jest skorzystać z gotowego rozwiązania czyli ze sprawdzonej biblioteki jak "),t={href:"https://lodash.com/docs/4.17.15#isEqual",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("Lodash"),c=(0,e.Uk)(" czy "),r={href:"http://underscorejs.org/#isEqual",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Underscore"),u=(0,e.Uk)("."),k=(0,e._)("p",null,"Można się także sugerować rozwiązaniami z Internetu, ponieważ z tym problemem mierzył się niemalże każdy programista i na ten temat powstało mnóstwo ciekawych artykułów. Jeżeli do porównania mamy bardziej skomplikowany obiekt, nie obejdzie się też bez dobrych unit testów, które sprawdzą każdy przypadek.",-1),m=(0,e._)("h2",{id:"co-warto-zapamietac",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#co-warto-zapamietac","aria-hidden":"true"},"#"),(0,e.Uk)(" Co warto zapamiętać:")],-1),b=(0,e._)("ul",null,[(0,e._)("li",null,"obiekty w zmiennych przetrzymywane są przeze referencje"),(0,e._)("li",null,"operator porównania sprawdza czy referencje są takie same, nie sprawdza czy wartości w obiektach są takie same"),(0,e._)("li",null,"napisanie własnego rozwiązania do porównania obiektów nie jest takie proste"),(0,e._)("li",null,"warto skorzystać z gotowych rozwiązań do sprawdzenia czy obiektu mają te same wartości np z biblioteki Lodash czy Underscore.")],-1),d={},w=(0,s(3744).Z)(d,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e._)("p",null,[p,(0,e._)("a",t,[i,(0,e.Wm)(s)]),c,(0,e._)("a",r,[l,(0,e.Wm)(s)]),u]),k,m,b],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);