"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8415],{1684:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-530ea8fe",path:"/tablice/porownanie-tablic/",title:"Konwersja tablic",lang:"pl-PL",frontmatter:{permalink:"/tablice/porownanie-tablic"},excerpt:"",headers:[{level:2,title:"Konwersja tablica na string",slug:"konwersja-tablica-na-string",children:[]},{level:2,title:"Konwersja string na tablicę",slug:"konwersja-string-na-tablice",children:[]},{level:2,title:"Konwersja tablica na number",slug:"konwersja-tablica-na-number",children:[]},{level:2,title:"Odejmowanie i dodawanie tablic",slug:"odejmowanie-i-dodawanie-tablic",children:[]},{level:2,title:"Konwersja number do tablicy",slug:"konwersja-number-do-tablicy",children:[]},{level:2,title:"Tablica do boolean",slug:"tablica-do-boolean",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/10-konwersja-tablic.md",git:{}}},6011:(n,a,s)=>{s.r(a),s.d(a,{default:()=>b});var e=s(6252);const o=(0,e.uE)('<h1 id="konwersja-tablic" tabindex="-1"><a class="header-anchor" href="#konwersja-tablic" aria-hidden="true">#</a> Konwersja tablic</h1><p>Najczęstszą konwersją tablic na typ prymitywny będzie konwersja na string. Lub też na odwrót będziemy próbowali z wartości <code>string</code> zrobić tablicę. Czasami też będziemy chcieli przekonwertować liczbę do tablicy. Przyjrzymy się też niejawnej konwersji i dziwnym przypadkom.</p><h2 id="konwersja-tablica-na-string" tabindex="-1"><a class="header-anchor" href="#konwersja-tablica-na-string" aria-hidden="true">#</a> Konwersja tablica na string</h2><p>Konwersja tablicy na string jest banalnie prosta:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,2,3,4&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;foo,boo,bar&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Wszystko sprowadza się do wywołania metody <code>toString()</code>. Otrzymujemy wartości oddzielone przecinkami w formie jednego stringa. Pamiętajmy, że ta sama metoda <code>toString()</code> wywoływana jest przy wszystkich niejawnych konwersjach, o czym przekonamy się później. Jeżeli bardzo nam zależy na innym zachowaniu metody <code>toString()</code>, możemy nadpisać <code>prototype.toString()</code>. Nie jest to jednak dobre rozwiązanie i nie zachęcam.</p><p>Inną metodą jest metoda <code>join()</code>. Poznaliśmy ją we wcześniejszych lekcjach:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; / &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo / boo / bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tej metodzie to my decydujemy, jaki będzie separator między elementami. Możemy też przekazać pustą wartość <code>string</code> i skleić ze sobą wszystkie elementy. Zdecydowanie częściej będzie korzystać właśnie z tej metody do wyświetlania elementów tablicy jako <code>string</code>.</p><h2 id="konwersja-string-na-tablice" tabindex="-1"><a class="header-anchor" href="#konwersja-string-na-tablice" aria-hidden="true">#</a> Konwersja string na tablicę</h2><p>Niektóre sposoby konwersji wartości string na tablice omawialiśmy i powinny być wam znane. Sposób zależy też od tego, co chcemy osiągnąć. Czy chcemy rozbić jedno słowo na litery czy może podzielić zdanie według jakiegoś separatora, na przykład spacji.</p><p>Pierwszy przykład to rozbicie słowa na litery:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>str1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jest to bardzo prosty i czytelny zapis z operatorem <code>spread</code>. Musimy pamiętać o użyciu nawiasów kwadratowych, aby rozproszyć wartość string do tablicy.</p><p>Kolejny sposób to użycie metody <code>split()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Do metody <code>split()</code> przekazujemy separator, według którego chcemy rozbić wartość string. Jeżeli rozbijamy słowo na pojedyncze litery, to używamy pustego znaku jako separator.</p><p>Metoda <code>split()</code> świetnie sprawdzi się przy rozbijaniu zdań na pojedyncze wyrazy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;brown fox jumps over the lazy dog&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Tutaj do metody <code>split()</code> jako separator podajemy spację. W ten sposób każdy wyraz jest oddzielnym elementem tablicy.</p><p>Metoda <code>split()</code> ma jeszcze dodatkowy parametr:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;brown&#39;, &#39;fox&#39;, &#39;jumps&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Przekazując parametr, możemy określić, ile elementów trafi do tworzonej tablicy. Ten dodatkowy parametr może się przydać w wielu sytuacjach, gdy interesują nas tylko konkretne wartości.</p><p>To najpopularniejsze sposoby na konwersję wartości <code>string</code> na tablicę. Powinny Wam wystarczyć w każdej sytuacji.</p><h2 id="konwersja-tablica-na-number" tabindex="-1"><a class="header-anchor" href="#konwersja-tablica-na-number" aria-hidden="true">#</a> Konwersja tablica na number</h2><p>Sytuacja gdzie z całej tablicy będziecie musieli zrobić typ <code>number</code> raczej w Waszym kodzie się nie wydarzy. Jest tu jednak pewna ciekawostka, na którą warto zwrócić uwagę:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku mamy tablicę z jednym elementem <code>number</code>. Gdy tablicę przekażemy do konwersji na typ <code>number</code> otrzymujemy wartość 42.</p><p>Co się jednak stanie, gdy w tablicy będziemy mieli więcej elementów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Gdy w tablicy znajdzie się więcej elementów i spróbujemy taką tablicę przekazać do funkcji <code>Number()</code> w celu konwersji, otrzymamy wartość <code>NaN</code>.</p><p>Wspominałem w dziale konwersji, że tylko wartości prymitywne mogą być konwertowane na inny typ. Dlatego, zanim JavaScript zacznie konwersję tablicy, musi uzyskać z niej typ prymitywny i robi to za pomocą metody <code>toString()</code> sprowadzając wszystko do typu <code>string</code>.</p><p>Gdy mamy jeden element w tablicy, wywołanie <code>toString()</code> zwraca nam <code>&#39;42&#39;</code> jako <code>string</code> i konwersja takiej wartości z funkcją <code>Number()</code> jest możliwa.</p><p>W drugim przypadku:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,2,3&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Zwracana wartość przez metodę <code>toString()</code> nie wygląda jak poprawna liczba, która może być konwertowana do typu <code>number</code> .</p><p>Stąd mogą pojawiać się wątpliwości, jak to działa, a czasami nawet to pytanie może pojawić się na rozmowie technicznej. Natomiast sama konwersja całej tablicy na typ <code>number</code> raczej nie ma większego sensu.</p><p>Jeżeli przetrzymujemy w tablicy liczbę tak, że każdy element to pojedyncza cyfra, zawsze możemy użyć omawianej przed chwilą metody <code>join()</code> i połączyć elementy w jeden wielki numer.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Całość musi jeszcze konwertować za pomocą funkcji <code>Number()</code>, ponieważ metoda <code>join()</code> zwraca typ <code>string</code>.</p><h2 id="odejmowanie-i-dodawanie-tablic" tabindex="-1"><a class="header-anchor" href="#odejmowanie-i-dodawanie-tablic" aria-hidden="true">#</a> Odejmowanie i dodawanie tablic</h2><p>Ciekawe przypadki mogą się również pojawić przy działaniach matematycznych na tablicach:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 40</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W tym przypadku próbujemy odejmować dwie tablice. Dzieje się to, co zawsze, tablice jako obiekty przekształcane są na typ prymitywny za pomocą metody <code>toString()</code>. Mamy więc dwie wartości <code>string</code>. Operator odejmowania wymusza potem konwersję na typ <code>number</code> , która kończy się z sukcesem i prawidłowo może zostać przeprowadzone działanie odejmowania.</p><p>Oczywiście, jeśli tablica będzie miała więcej elementów, takie działanie się nie uda.</p><p>Inaczej wygląda sytuacja przy dodawaniu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;422&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1,2,342&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku następuje konkatenacja stringów. Z każdej tablicy otrzymamy wartości string przez wywołanie metody <code>toString()</code> po czym obie wartości będą ze sobą połączone, jak to się dzieje w przypadku zwykłych stringów.</p><p>W JavaScript nie jest więc tak, że możemy na tablicach wykonywać działania matematyczne. Jeżeli mamy taką potrzebę to sami musimy zadbać o odpowiedni algorytm lub poszukać odpowiedniej biblioteki.</p><h2 id="konwersja-number-do-tablicy" tabindex="-1"><a class="header-anchor" href="#konwersja-number-do-tablicy" aria-hidden="true">#</a> Konwersja number do tablicy</h2><p>Ten przypadek jest dość rzadki, ale czasami możemy mieć potrzebę konwersji liczby na tablicę, czyli trzymania każdej cyfry jako oddzielny element:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> numArr <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jeden ze sposobów to zamiana liczby na <code>string</code> i użycie metody <code>split()</code> czy nawet operatora <code>spread</code> . Jeżeli z typu <code>number</code> zrobimy typ <code>string</code> to sprawa wydaje się już prosta. Jest tylko jeden problem, liczby w tej tablicy są typu <code>string</code> nie <code>number</code>.</p><p>Dodatkowo więc musimy wykonać konwersję na przykład przez metodę <code>map</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numArr2 <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numArr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Używając metody <code>map</code> i przekazując funkcję <code>Number</code> jako <code>callback</code> możemy elementy <code>string</code> przerobić na typ <code>number</code>. Zauważcie, że nie musiałem rozpisać całej funkcji <code>calback</code> w taki sposób:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>numArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Funkcja <code>Number</code> przyjmuje jeden parametr, mogę więc przekazać od razu funkcję, bez wywołania i JavaScript dokładnie będzie wiedział jak jej użyć.</p><p>Inny krótszy i czytelniejszy sposób to użycie <code>Array.from</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numArr3 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numArr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do <code>Array.from</code> przekazujemy liczbę jako typ <code>string</code>, który jest iterowalny i dzięki temu za pomocą <code>Array.from</code> możemy zrobić z niego tablicę. Drugi parametr to funkcja <code>Number</code>, która otrzyma każdy element ze stworzonej tablicy i przetworzy go na typ <code>number</code>. W ten sposób też otrzymamy tablicę z liczbami.</p><h2 id="tablica-do-boolean" tabindex="-1"><a class="header-anchor" href="#tablica-do-boolean" aria-hidden="true">#</a> Tablica do boolean</h2><p>Zazwyczaj nie będziemy konwertować jawnie tablicy do wartości <code>boolean</code>, trudno mi znaleźć taki przypadek kiedy to może się przydać. Zazwyczaj będzie to konwersja niejawna przy wszelkich instrukcjach <code>if</code> i innych operatorach pracujących na wartościach <code>boolean</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',65),t=(0,e.Uk)("Jak wiemy w tabelce wartości fałszywych "),p={href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("link"),i=(0,e.Uk)(" nie ma tablicy. Dlatego każda tablica nieważne czy pusta, czy wypełniona wartościami "),l=(0,e._)("code",null,"false",-1),u=(0,e.Uk)(" zawsze zwróci "),r=(0,e._)("code",null,"true",-1),d=(0,e.Uk)("."),k=(0,e.uE)('<p>Jest to bardzo ważne, pusta tablica zawsze zwraca <code>true</code> dlatego, jeżeli chcemy sprawdzić, czy tablica ma jakieś elementy, nie możemy opierać się na takiej instrukcji <code>if</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> emptyArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>emptyArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;it works&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//it works</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Ta instrukcja zawsze się wykona, ponieważ każda tablica konwertowana jest do <code>true</code> nawet ta pusta.</p><p>Jeżeli zależy nam na sprawdzeniu, czy tablica posiada jakieś wartości musimy wykorzystać właściwość <code>length</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>emptyArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;it never works&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Gdy tablica jest pusta <code>length</code> zwraca wartość 0, która konwertowana jest do <code>false</code>. Jest to jedyny i najlepszy sposób na sprawdzenie, czy tablica posiada elementy i czy możemy ją w jakikolwiek sposób procesować.</p><p>Ponieważ typ <code>boolean</code> posiada tylko dwie wartości jak <code>true</code> lub <code>false</code> nie mamy potrzeby stosowania wyszukanych metod do konwersji typu <code>boolean</code> na tablicę.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ true, false, true ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Po prostu umieszczamy te wartości w tablicy.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>tablice na string konwertujemy za pomocą metod <code>toString()</code> lub <code>join()</code></li><li>string na tablicę konwertujemy za pomocą operatora <code>spread</code> lub metody <code>split()</code></li><li>możemy rozbić liczbę na tablicę najlepiej użyć do tego metody <code>Array.from</code></li><li>tablica zawsze konwertuje się na wartość <code>true</code></li></ul>',11),m={},b=(0,s(3744).Z)(m,[["render",function(n,a){const s=(0,e.up)("OutboundLink"),m=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e._)("p",null,[t,(0,e._)("a",p,[c,(0,e.Wm)(s)]),i,l,u,r,d]),k,(0,e.Wm)(m)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);