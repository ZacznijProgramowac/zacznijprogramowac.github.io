"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[301],{4188:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-89c132d4",path:"/funkcje/return-w-funkcji/",title:"Zwracane wartości",lang:"pl-PL",frontmatter:{permalink:"/funkcje/return-w-funkcji/"},excerpt:"",headers:[{level:2,title:"Funkcja zawsze coś zwraca",slug:"funkcja-zawsze-cos-zwraca",children:[]},{level:2,title:"Używanie return",slug:"uzywanie-return",children:[]},{level:2,title:"Return i arrow functions",slug:"return-i-arrow-functions",children:[]},{level:2,title:"Funkcja zwracająca funkcję",slug:"funkcja-zwracajaca-funkcje",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"funkcje/02-return-w-funkcji.md",git:{}}},8065:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(6252);const p=(0,e.uE)('<h1 id="zwracane-wartosci" tabindex="-1"><a class="header-anchor" href="#zwracane-wartosci" aria-hidden="true">#</a> Zwracane wartości</h1><h2 id="funkcja-zawsze-cos-zwraca" tabindex="-1"><a class="header-anchor" href="#funkcja-zawsze-cos-zwraca" aria-hidden="true">#</a> Funkcja zawsze coś zwraca</h2><p>W JavaScript funkcje zawsze coś zwracają. Albo jest to wartość zwrócona jawnie przez słowo return, albo jest to wartość domyślna <code>undefined</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello wrolds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Na tym przykładzie mamy funkcję bez słowa kluczowego <code>return</code>. Jej zadaniem jest wypisanie wartości do konsoli. Nie zwracamy z tej funkcji żadnej wartości.</p><p>Spróbujmy jednak pobrać wartość zwracaną z tej funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Funkcja bez jawnie zadeklarowanej instrukcji <code>return</code> zwraca wartość <code>undefined</code>. Przy tworzeniu kodu musimy być zatem ostrożni, ponieważ kompilator JavaScript nie będzie zgłaszał błędu, nawet gdy chcemy pobrać wartość z funkcji, która nic nie zwraca i otrzymamy po prostu <code>undefined</code>.</p><h2 id="uzywanie-return" tabindex="-1"><a class="header-anchor" href="#uzywanie-return" aria-hidden="true">#</a> Używanie return</h2><p>Czasami pomimo zastosowania słowa kluczowego return, nasza funkcja dalej może nie zwracać prawidłowych wyników.</p><p>Warto spojrzeć na taki przykład:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token comment">//</span>\n  <span class="token punctuation">(</span><span class="token string">&#39;The quick brown fox jumps over the lazy dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Zwracając długie wyrażenia, możemy się pokusić o złamanie linii po słowie return, tak aby kod czytało się lepiej. W powyższym przykładzie funkcja zwraca <code>undefined</code>, zamiast oczekiwanej wartości.</p><p>Dzieje się tak, ponieważ po słowie return, w czasie kompilacji kodu JavaScript, pojawi się średnik.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token comment">//</span>\n  <span class="token punctuation">(</span><span class="token string">&#39;The quick brown fox jumps over the lazy dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Funkcja zatem wykona return i zignoruje wszystkie linie po tym słowie kluczowym. Jeżeli coś chcemy zwrócić z funkcji za pomocą return, wartość ta musi znaleźć się tuż za słowem return.</p><p>Jeżeli po słowie kluczowym chcemy podzielić kod na kilka linii, możemy zastosować taki zapis:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token string">&#39;The quick brown fox jumps over the lazy dog&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit&#39;</span> <span class="token operator">+</span>\n    Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Po <code>return</code> otwieramy nawiasy okrągłe. W nawiasach możemy podzielić wyrażenie nawet na kilka linii. Zapis ze słowem return i nawiasami okrągłymi możecie na przykład bardzo często spotkać we frameworku React do renderowania komponentów.</p><h2 id="return-i-arrow-functions" tabindex="-1"><a class="header-anchor" href="#return-i-arrow-functions" aria-hidden="true">#</a> Return i arrow functions</h2><p>W przypadku zwracania wartości z arrow function również musimy zwrócić uwagę na kilka przypadków.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrow1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Przy tym zapisie mogłoby się wydawać, że funkcja zwraca obiekt z jedną właściwością, ponieważ po strzałce w arrow function następuje zwracanie wartości. Niestety w tym przypadku otrzymujemy wartość <code>undefined</code>.</p><p>Nawiasy klamrowe w tym przypadku zawsze zaczynają tworzyć ciało funkcji. Jeżeli chcemy w takiej funkcji zwracać obiekt, powinniśmy ten zapis zrobić tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Dopiero w ciele funkcji tworzymy zapis return i zwracamy obiekt w postaci literalnej.</p><p>Zapis ten można jeszcze skrócić za pomocą okrągłych nawiasów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Stosując nawiasy okrągłe, możemy od razu zwrócić blok kodu w postaci obiektu. Warto zwrócić na to uwagę, ten przypadek jest dość częstym błędem początkujących programistów JavaScript.</p><h2 id="funkcja-zwracajaca-funkcje" tabindex="-1"><a class="header-anchor" href="#funkcja-zwracajaca-funkcje" aria-hidden="true">#</a> Funkcja zwracająca funkcję</h2><p>W JavaScript funkcja nie musi zwracać prymitywnej wartości czy obiektów, może także zwracać inne funkcje:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Mamy funkcję <code>add</code>, która przyjmuje parametr i zwraca inną funkcję. Wywołanie funkcji <code>add</code> przypisujemy do zmiennej <code>fun</code>. W tym momencie zmienna <code>fun</code> ma przypisaną funkcję zwróconą z funkcji <code>add</code>. Możemy zatem wywołać zmienną <code>fun</code> i przekazać kolejny parametr. Ostatecznie otrzymujemy wynik w zmiennej <code>result</code>.</p><p>Ten zapis można zrobić jeszcze krócej:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Najpierw wywołana jest funkcja <code>add</code> i od razu wywoływana jest funkcja zwracana. Pewnie niezbyt często spotkacie się z takim kodem. Czasami jednak możecie być poproszeni o stworzenie takiej funkcji przy rozmowie o pracę.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>jeżeli nie użyjemy return funkcja będzie zwracała <code>undefined</code></li><li>jeżeli chcemy zwracać długie wyrażenie po słowie <code>return</code> użyjmy nawiasów okrągłych</li><li>jeżeli chcemy zwracać obiekty z arrow function używamy <code>return</code> lub nawiasy okrągłe</li><li>możliwe jest zwracanie funkcji z innej funkcji</li></ul>',38),t={},c=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);