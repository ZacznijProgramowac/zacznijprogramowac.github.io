"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[2345],{9260:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-51edd166",path:"/this/metoda-bind/",title:"Funkcje i metoda bind",lang:"pl-PL",frontmatter:{permalink:"/this/metoda-bind"},excerpt:"",headers:[{level:2,title:"Metoda bind",slug:"metoda-bind",children:[]},{level:2,title:"Przypadek setTimeout",slug:"przypadek-settimeout",children:[]},{level:2,title:"Pożyczanie metod",slug:"pozyczanie-metod",children:[]},{level:2,title:"Bindowanie z parametrami",slug:"bindowanie-z-parametrami",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"this/05-metoda-bind.md",git:{}}},3242:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});var e=s(6252);const o=(0,e.uE)('<h1 id="funkcje-i-metoda-bind" tabindex="-1"><a class="header-anchor" href="#funkcje-i-metoda-bind" aria-hidden="true">#</a> Funkcje i metoda bind</h1><p>W JavaScript mamy kilka dostępnych narzędzi do operowania kontekstem <code>this</code>. Mamy takie metody jak <code>bind</code>, <code>call</code> oraz <code>apply</code>. Często nie będziecie stosować ich w swoim kodzie, ale jak to w programowaniu bywa, warto wiedzieć, co do czego służy. Na początek sprawdźmy możliwości metody bind.</p><h2 id="metoda-bind" tabindex="-1"><a class="header-anchor" href="#metoda-bind" aria-hidden="true">#</a> Metoda bind</h2><p>Metoda <code>bind()</code> pochodzi z <code>Function.prototype</code> oznacza to, że może zostać wywołana na każdej funkcji czy metodzie. Dzięki tej metodzie możemy do funkcji przypisać interesujący nas kontekst <code>this</code>:</p><p>Rozważmy już znany nam przypadek:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>\n  model<span class="token operator">:</span> <span class="token string">&#39;Opel&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">printModel</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Your car is: &#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> print <span class="token operator">=</span> car<span class="token punctuation">.</span>printModel<span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Mam stworzony obiekt <code>car</code>, który ma pole <code>model</code> oraz metodę <code>printModel</code>. W tej metodzie odwołuję się przez <code>this</code> do pola <code>model</code> i wypisuję do konsoli.</p><p>Tworzę również zwykłą zmienną <code>print</code> i do niej przypisuję referencję metody z obiektu <code>car</code>. Gdy wywołam teraz przypisaną metodę do <code>print</code> to otrzymuję wartość <code>undefined</code>.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>Your car is:  undefined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Metoda ta została wywołana na kontekście obiektu <code>window</code>, a gdybym był w trybie ścisłym, pojawiłby się błąd, ponieważ kontekst <code>this</code> byłby <code>undefined</code>. Jeżeli chcemy użyć metody <code>printModel</code> powinna być użyta w kontekście obiektu <code>car</code>.</p><p>W tym właśnie miejscu możemy wykorzystać metodę <code>bind()</code> pochodzącą z <code>Function.prototype</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> print2 <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">printModel</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Znowu tworzę nową zmienną, do której chcę przypisać referencję do metody <code>printModel</code>. Na końcu jednak wywołuję jeszcze metodę <code>bind</code> i przekazuję do niej obiekt.</p><p>Z technicznego punktu widzenia, metoda <code>bind</code> tworzy zupełnie nową funkcję, która jest wrapperem na naszą oryginalną funkcję i potrafi ją wywołać ze wskazanym kontekstem.</p><p>Dzięki takiej operacji wywołanie <code>print2</code> spowoduje wywołanie metody <code>printModel</code> z odpowiednim kontekstem <code>this</code>. Przy takiej konstrukcji kodu mówimy, że bindujemy metodę do wskazanego obiektu, jeżeli nie chcemy zagłębiać się w techniczne działanie metody <code>bind</code>.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>Your car is:  Opel\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Ważne jest to, że udaje nam się wywołać pożyczoną funkcję z obiektu w zupełnie innym kontekście i działa prawidłowo. Dzięki metodzie <code>bind</code> możemy łatwo kontrolować kontekst <code>this</code>.</p><h2 id="przypadek-settimeout" tabindex="-1"><a class="header-anchor" href="#przypadek-settimeout" aria-hidden="true">#</a> Przypadek setTimeout</h2><p>Metoda <code>bind()</code> pozwala nam wskazać konkretny kontekst <code>this</code> dla wywoływanej funkcji, możemy to wykorzystać przy wywołaniu takiej funkcji jak <code>setTimeout</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>print<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Ponownie tworzę obiekt z metodą <code>print</code>, której zadaniem jest wypisanie do konsoli pola <code>surname</code>. Chciałbym to jednak zrobić z opóźnieniem i do tego mogę wykorzystać funkcję <code>setTimeout</code>, do której jako pierwszy parametr przekazuje się funkcję <code>callback</code>, a jako drugi parametr opóźnienie.</p><p>Przekazuję więc do funkcji <code>setTimeout</code> referencję do metody <code>print</code> w obiekcie <code>person</code>:</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>Your surname:  undefined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Ponieważ przekazuję tylko referencję, to otrzymuję <code>undefined</code> przy próbie odczytania pola <code>surname</code>. Funkcja <code>setTimeout</code> posiada <code>this</code> z globalnego obiektu, w tym przypadku <code>window</code>. Metoda <code>setTimeout</code> istnieje po prostu w obiekcie <code>window</code>. Przy takim wywołaniu metoda <code>print</code> przekazana do funkcji <code>setTimeout</code> wywoływana jest na obiekcie <code>window</code>.</p><p>Zapis ten możemy rozpisać jeszcze tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> print3 <span class="token operator">=</span> person<span class="token punctuation">.</span>print<span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>print3<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Przekazaliśmy tylko referencję do wywołania, dlatego metoda zostanie wywołana na kontekście, jaki aktualnie jest w funkcji <code>setTimeout</code>, a na pewno nie ma tam kontekstu naszego obiektu. Musimy więc dołączyć za pomocą <code>bind</code> kontekst naszego obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rambo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Dopiero takie wywołanie zapewnia prawidłowy kontekst dla metody <code>print</code>. Za pomocą metody <code>bind</code> dołączamy kontekst naszego obiektu i teraz wywołanie metody działa.</p><h2 id="pozyczanie-metod" tabindex="-1"><a class="header-anchor" href="#pozyczanie-metod" aria-hidden="true">#</a> Pożyczanie metod</h2><p>Metodę <code>bind</code> możemy także użyć do tak zwanego pożyczania metod:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Reksio&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">speed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; run &#39;</span> <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">&#39; km&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Mamy dwa obiekty, każdy z nich ma pole <code>name</code>, ale tylko jeden obiekt ma metodę <code>run</code>, która wypisuje dokładnie imię i szybkość biegu. Metoda ta znajduje się w obiekcie <code>cat</code>, ale możemy ją pożyczyć i wywołać z obiektem <code>dog</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> dogRun <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">dogRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Reksio run 34 km</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Tworzymy nową zmienną, do której przypisujemy metodę <code>run</code> z obiektu <code>cat</code>. Jednak metoda <code>run</code> jest zbindowana do obiektu <code>dog</code>, co oznacza, że zostanie wywołana w kontekście <code>dog</code>. Przekazaliśmy dodatkowo do metody <code>bind</code> jeszcze jeden parametr. Metoda <code>bind</code> może przyjąć dowolną ilość parametrów, które zostaną użyte w chwili wywołania.</p><p>Gdy wywołuję zmienną <code>dogRun()</code> nie muszę już przekazywać parametru, jaki oczekuje metoda <code>run</code> został on przekazany w czasie bindowania. Ta technika nazywa się pożyczaniem metody, pozwala na użycie metod zadeklarowanych na przykład w innych obiektach.</p><h2 id="bindowanie-z-parametrami" tabindex="-1"><a class="header-anchor" href="#bindowanie-z-parametrami" aria-hidden="true">#</a> Bindowanie z parametrami</h2><p>Jak już widzieliśmy, możemy bindować metody, przekazując dodatkowo parametry, które posłużą do wywołania tej metody:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sum1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Przykładem jest zwykła funkcja <code>sum</code>, która otrzymuje dwa parametry i dodaje je do siebie. Funkcję przypisaliśmy do nowej zmiennej za pomocą metody <code>bind</code>. Zauważcie, że nie podaję w tym momencie żadnego kontekstu, tylko wartość <code>null</code>. Nasza funkcja aktualnie nie pracuje na żadnym <code>this</code> więc mogę podać wartość <code>null</code> jako pierwszy parametr.</p><p>Kolejne parametry to wartości, które zostaną przekazane do funkcji. Gdy wywołam zmienną <code>sum1()</code> nie muszę już przekazywać parametrów, zostaną użyte te wartości, które podałem do metody <code>bind()</code>. Jeżeli spróbuję podać parametry, to i tak zostaną one zignorowane.</p><p>Inną ciekawą opcją, jest możliwość podania tylko niektórych parametrów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sum2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 17</span>\n<span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n<span class="token function">sum2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym przykładzie wykorzystuję <code>bind</code> dla funkcji <code>sum</code>. Funkcja <code>sum</code> przyjmuje dwa parametry, ale ja przekazuję tylko jeden. Teraz gdy wywołuję zmienną <code>sum2</code> mogę przekazać tylko jeden parametr, ponieważ ten przekazany przez metodę <code>bind</code> stał się parametrem domyślnym.</p><p>Wykorzystanie metody <code>bind</code> do stworzenia sobie funkcji wywołanej częściowo może być ciekawym sposobem, gdy chcemy uniknąć wywoływania funkcji ciągle z tymi samymi parametrami.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>metoda <code>bind</code> pozwala wskazać dokładnie, z jakim kontekstem ma być wywołana funkcja</li><li>metoda <code>bind</code> pozwala na pożyczanie metod z innych obiektów</li><li>do metody <code>bind</code> można przekazać także parametry do wywołania danej funkcji</li><li>z pomocą metody <code>bind</code> możemy stworzyć częściowe wywołanie funkcji</li></ul>',47),p={},t=(0,s(3744).Z)(p,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);