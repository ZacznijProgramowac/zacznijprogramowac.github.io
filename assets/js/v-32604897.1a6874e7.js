"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[959],{8852:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-32604897",path:"/zmienne-i-typy/typ-number/",title:"Typ number w JavaScript",lang:"pl-PL",frontmatter:{permalink:"/zmienne-i-typy/typ-number"},excerpt:"",headers:[{level:2,title:"Zapis wartości liczbowych",slug:"zapis-wartosci-liczbowych",children:[]},{level:2,title:"Format zapisu",slug:"format-zapisu",children:[]},{level:2,title:"Dokładność liczb dziesiętnych",slug:"dokładnosc-liczb-dziesietnych",children:[]},{level:2,title:"Metody toFixed(), isInteger()",slug:"metody-tofixed-isinteger",children:[{level:3,title:"Metoda toFixed()",slug:"metoda-tofixed",children:[]},{level:3,title:"Metoda isInteger()",slug:"metoda-isinteger",children:[]},{level:3,title:"Uwaga na wywołanie metod",slug:"uwaga-na-wywołanie-metod",children:[]}]},{level:2,title:"Największe najmniejsze",slug:"najwieksze-najmniejsze",children:[]},{level:2,title:"Obiekt Number",slug:"obiekt-number",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"zmienne-i-typy/05-typ-number.md",git:{}}},3634:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});var e=s(6252);const o=(0,e.uE)('<h1 id="typ-number-w-javascript" tabindex="-1"><a class="header-anchor" href="#typ-number-w-javascript" aria-hidden="true">#</a> Typ number w JavaScript</h1><h1 id="wartosci-i-typ-number" tabindex="-1"><a class="header-anchor" href="#wartosci-i-typ-number" aria-hidden="true">#</a> Wartości i typ number</h1><p>Liczby w JavaScript reprezentowane są przez jeden typ <code>number</code>. Dodatkowo typ ten posiada takie wartości jak <code>Infinity</code> , <code>-Infinity</code> oraz <code>NaN</code>. Czasami praca z tymi wartościami może być kłopotliwa. W tym odcinku zaczniemy omawiać typ <code>number</code> i to jak z nim pracować.</p><h2 id="zapis-wartosci-liczbowych" tabindex="-1"><a class="header-anchor" href="#zapis-wartosci-liczbowych" aria-hidden="true">#</a> Zapis wartości liczbowych</h2><p>W JavaScript do reprezentacji liczb posiadamy tylko jeden typ i jest to znany nam już typ <code>number</code>. Nie jest to istotne czy liczba jest całkowita, dziesiętna czy może binarna. Wszystko jest typem <code>number</code>.</p><p>Zobaczmy przykłady liczb, które są reprezentowane przez ten typ:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// integer</span>\n<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// negative integer</span>\n<span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token number">42.5</span><span class="token punctuation">;</span> <span class="token comment">// float</span>\n<span class="token keyword">const</span> num4 <span class="token operator">=</span> <span class="token number">0x2A</span><span class="token punctuation">;</span> <span class="token comment">// hexadecimal</span>\n<span class="token keyword">const</span> num5 <span class="token operator">=</span> <span class="token number">0o52</span><span class="token punctuation">;</span> <span class="token comment">// octal</span>\n<span class="token keyword">const</span> num6 <span class="token operator">=</span> <span class="token number">0b00101010</span><span class="token punctuation">;</span> <span class="token comment">// binary</span>\n<span class="token keyword">const</span> num7 <span class="token operator">=</span> <span class="token number">1e42</span><span class="token punctuation">;</span> <span class="token comment">// exponential</span>\n<span class="token keyword">const</span> num8 <span class="token operator">=</span> <span class="token number">1_000_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// separator _</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>W wielu językach programowania zaprezentowane liczby posiadałyby swój typ. Tymczasem w JavaScript każda liczba, bez względu, w jakim formacie jest zapisana jest typem <code>number</code>. Mamy tutaj więc liczby całkowite, liczby ujemne, dziesiętne, liczby szesnastkowe, ósemkowe i w końcu binarne.</p><p>Mamy też zapis wykładniczy, który może się przydać do zapisania dużych liczb. Dodatkowo zapis ten możecie czasami zobaczyć w konsoli, ponieważ JavaScript bardzo duże liczby zwraca właśnie w takiej formie.</p><p>Na końcu pokazuję także, że możliwe jest użycie separatora do zapisu bardzo dużych albo może długich liczb. Przyda się do poprawienia czytelności.</p><h2 id="format-zapisu" tabindex="-1"><a class="header-anchor" href="#format-zapisu" aria-hidden="true">#</a> Format zapisu</h2><p>Format zapisu liczby w JavaScript pozwala nam na bardzo dużą swobodę, mogę zapisać liczbę całkowitą <em>42</em> na wiele sposobów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">42.0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">42.</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 42, 42, 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Każdy z tych zapisów to wartość całkowita liczby 42.</p><p>Podobnie wygląda zapis liczb dziesiętnych:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token number">0.42</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token number">.42</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token number">0.4200000000000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> c1<span class="token punctuation">)</span> <span class="token comment">// 0.42, 0.42, 0.42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Ewentualne niepotrzebne zera są obcinane, zarówno z liczby całkowitej, jak i dziesiętnej. Warto unikać zapisu tylko z kropką na końcu liczby lub też wstawiać samą kropkę bez zera dla liczby dziesiętnej.</p><p>Poprawny zapis prezentuje zmienna <code>a</code> dla liczby całkowitej i zmienna <code>a1</code> dla liczby dziesiętnej.</p><p>Ponieważ w JavaScript możemy zapisać liczbę z kropką na końcu, zobaczymy potem, że ma to pewne komplikacje, gdy będziemy korzystać z liczb jako literały, a nie jako zmienne.</p><h2 id="dokładnosc-liczb-dziesietnych" tabindex="-1"><a class="header-anchor" href="#dokładnosc-liczb-dziesietnych" aria-hidden="true">#</a> Dokładność liczb dziesiętnych</h2><p>Poruszmy jeszcze temat dokładności liczb dziesiętnych. W Internecie na pewno spotkacie się z tym przykładem lub zostaniecie o to zapytani na rozmowie o pracę:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Jeżeli matematyka nie kłamie to dodanie <code>0.1</code> do <code>0.2</code> powinno zwrócić wartość <code>0.3</code>. Jednak w tym przypadku porównanie do <code>0.3</code> daje nam wartość <code>fasle</code>. I nie jest to związane z żadną niejawną konwersją w JavaScript lub innymi błędami tego języka.</p><p>Wypiszmy ten wynik do konsoli:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment">// 0.30000000000000004</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Okazuje się, że jest to wartość zbliżona do <code>0.3</code> ale nią nie jest. To znany od dawna problem zapisu liczb dziesiętnych w formacie binarnym. Na pocieszenie mogę tylko dodać, że nie tylko JavaScript ma ten problem, ale także inne języki. Zaciekawionych odsyłam na stronę: http://0.30000000000000004.com/ gdzie znajdziecie wszelkie informacje na temat tego problemu.</p><p>Przy z pracy z takimi liczbami musimy być ostrożni i sami sobie radzić z tym problemem. Najbezpieczniej jest zawsze pracować na liczbach całkowitych. W Internecie znajdziecie wiele pomysłów jak radzić sobie z tym problemem.</p><p>Pokażę Wam teraz dwa popularne sposoby przy pracy z takimi liczbami:</p><p>Możemy użyć metody <code>toFixed()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Metoda ta dokonuje zaokrąglenia do określonego miejsca po przecinku. Za chwilę opowiem o niej więcej.</p><p>Możemy też sprowadzać liczby dziesiętne do liczb całkowitych i potem z powrotem do liczb dziesiętnych, dzięki temu nie tracimy dokładności:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 0.3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Najpierw mnożę liczby przez <code>10</code>, potem dokonuję sumy i na końcu wynik dzielę przez <code>10</code>. Otrzymuję prawidłową wartość.</p><p>Jeszcze lepszym sposobem może być użycie gotowej biblioteki jak Math.js lub currency.js, która ułatwia pracę z walutami. Wybór sposobu rozwiązania tego problemu pozostawiam wam, ponieważ w tej sytuacji wszystko zależy od kontekstu użycia.</p><h2 id="metody-tofixed-isinteger" tabindex="-1"><a class="header-anchor" href="#metody-tofixed-isinteger" aria-hidden="true">#</a> Metody <code>toFixed()</code>, <code>isInteger()</code></h2><h3 id="metoda-tofixed" tabindex="-1"><a class="header-anchor" href="#metoda-tofixed" aria-hidden="true">#</a> Metoda <code>toFixed()</code></h3><p>Na typie <code>number</code> możemy wywoływać metody, które wbudowane są w obiekt <code>Number</code>. Jest to trochę dziwne, że na typie prymitywnym jakim jest <code>number</code> możemy wywołać metody pochodzące z typu obiektowego <code>Number</code>. O tym jednak powstanie oddzielny odcinek, dlaczego to tak działa.</p><p>Widzieliśmy metodę <code>toFixed()</code> której zadaniem jest zaokrąglenie liczby dziesiętnej. W nawiasach podajemy ile miejsc po przecinku, nas interesuje:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> someNumber <span class="token operator">=</span> <span class="token number">42.123</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someNumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someNumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42.1&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someNumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42.12&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someNumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42.123&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someNumber<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42.1230&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Jeżeli nie podamy żadnej wartości, otrzymamy liczbę całkowitą. Gdy podamy za dużą dokładność, miejsca zostaną uzupełnione zerami.</p><p>Szczególną uwagę należy zwrócić na to, że metoda <code>toFiexd()</code> zwraca nam typ <code>string</code> nie <code>number</code>. Nie próbujmy więc wykonywać na wyniku działań matematycznych. Wynik należy jeszcze przekonwertować na typ <code>number</code>.</p><h3 id="metoda-isinteger" tabindex="-1"><a class="header-anchor" href="#metoda-isinteger" aria-hidden="true">#</a> Metoda <code>isInteger()</code></h3><p>Inną przydatną metodą może być metoda statyczna <code>Number.isInteger()</code>. Może nam posłużyć do sprawdzenia, czy liczba jest całkowita. Przekażmy kilka wartości do tej metody:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">42.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">&#39;42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Do jej poprawnego działania musimy przekazać wartość o typie <code>number</code>. Widzimy, że poprawną wartość otrzymamy tylko w przypadku liczby całkowitej <code>42</code>. Nie zachodzą tutaj więc żadne konwersje.</p><h3 id="uwaga-na-wywołanie-metod" tabindex="-1"><a class="header-anchor" href="#uwaga-na-wywołanie-metod" aria-hidden="true">#</a> Uwaga na wywołanie metod</h3><p>Chciałbym jeszcze zwrócić uwagę na wywołanie metod, gdy do czynienia mamy z literałem, a nie ze zmienną. Raczej nikt takich zapisów nie stosuje, ale trzeba uważać, jeśli chcemy od razu na wartości liczbowej wywołać metodę, taki zapis jest niepoprawny:</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>100.toFixed() //error\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>dopiera te wersje są poprawne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">100.</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jak pamiętamy zapis liczby w postaci <code>100.</code> jest poprawny, dlatego jest potrzebna jeszcze jedna kropka do wywołania metody <code>toFixed()</code> lub ujęcie liczby w nawiasy. Jest to mały szczegół, który warto odnotować, gdy spotkacie się z takim dziwnym zapisem w kodzie, ale nie powinno się to zdarzyć.</p><h2 id="najwieksze-najmniejsze" tabindex="-1"><a class="header-anchor" href="#najwieksze-najmniejsze" aria-hidden="true">#</a> Największe najmniejsze</h2><p>Obiekt <code>Number</code> posiada także pewne stałe wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.7976931348623157e+308</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5e-324</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>Number.MAX_VALUE</code> oraz <code>NUMBER.MIN_VALUE</code> reprezentują największą i najmniejszą możliwą wartość reprezentowaną przez JavaScript. Niestety przy pracy z tak dużymi i małymi wartościami możemy tracić na dokładności. Nie są to wartości bezpieczne do operacji.</p><p>Dlatego mamy jeszcze określone dwie wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740991</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -9007199254740991</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>Number.MAX_SAFE_INTEGER</code> i <code>Number.MIN_SAFE_INTEGER</code> to dwie wartości całkowite, które są bezpieczne w używaniu. Wszystkie operacje wychodzące poza te dwie liczby będą traciły dokładność, przykładem jest to działanie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Widzimy, że porównanie dwóch liczb daje wartość <code>true</code> a przecież jedna z nich została zwiększona o 2.</p><p>Jeżeli musimy pracować na większych wartościach niż reprezentuje <code>Number.MAX_SAFE_INTEGER</code> wtedy używamy wspomnianego już typu <code>bigint</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> big1 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> big2 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2n</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>big1 <span class="token operator">===</span> big2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>big1<span class="token punctuation">,</span> big2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992n 9007199254740993n</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym przypadku inicjalizujemy dwie zmienne używając <code>MAX_SAFE_INTEGER</code>. Do jednej z nich dodajemy wartość 1 do drugiej wartość 2. Wynikiem porównania jest tym razem <code>false</code>.</p><p>Zauważ, że <code>MAX_SAFE_INTEGER</code> musiałem przekonwertować za pomocą funkcji <code>BigInt()</code> do typu <code>bigint</code>, a dodając wartość 1 i 2 do poszczególnych zmiennych umieściłem <code>n</code> na końcu każdej wartości.</p><p>Pamiętajmy, że wartości typu <code>bigint</code> są reprezentowane przez znak <code>n</code> na końcu każdej liczby. Mało tego nie można dokonywać matematycznych działań między typem <code>number</code> a typem <code>bigint</code>, potrzebna jest konwersja.</p><h2 id="obiekt-number" tabindex="-1"><a class="header-anchor" href="#obiekt-number" aria-hidden="true">#</a> Obiekt Number</h2><p>Jak zauważyliście, typ <code>number</code> także posiada obiekt <code>Number</code> i możemy za jego pomocą stworzyć obiekt <code>Number</code>, który będzie przechowywał wartość liczbową. Podobnie jak przy typie <code>Boolean</code> nie warto tego robić.</p><p>Obiektu <code>Number</code> najlepiej używać jako funkcji <code>Number()</code> do konwertowania innych typów jak <code>string</code> czy <code>bigint</code>. Oraz do korzystania ze stałych i funkcji, które ma dostępne w sobie.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Number {42}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>typ <code>number</code> reprezentuje różne liczby: całkowite, dziesiętne, szesnastkowe, ósemkowe czy binarne</li><li>zapis liczb w JavaScript jest bardzo dowolny, starajmy się utrzymać czytelność zapisu liczb. Dla przykładu zapisujemy <code>0.5</code> zamiast <code>.5</code>.</li><li>JavaScript jak wiele innych języków ma problem z dokładnością liczb dziesiętnych</li><li>metoda <code>toFixed</code> może nam pomóc w pracy z dokładnością liczb dziesiętnych</li><li>przy naprawdę dużych liczbach, używamy typu <code>bigint</code></li></ul>',72),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);