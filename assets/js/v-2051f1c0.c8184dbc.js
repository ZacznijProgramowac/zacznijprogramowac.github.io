"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8172],{3302:(n,s,a)=>{a.r(s),a.d(s,{data:()=>o});const o={key:"v-2051f1c0",path:"/konwersje-i-porownania/konwersja-string/",title:"Konwersja string",lang:"pl-PL",frontmatter:{permalink:"/konwersje-i-porownania/konwersja-string"},excerpt:"",headers:[{level:2,title:"String()",slug:"string",children:[]},{level:2,title:"Konwersja ze znakiem +",slug:"konwersja-ze-znakiem",children:[]},{level:2,title:"String na number",slug:"string-na-number",children:[]},{level:2,title:"String na boolean",slug:"string-na-boolean",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"konwersje-i-porownania/04-konwersja-string.md",git:{}}},8510:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var o=a(6252);const e=(0,o.uE)('<h1 id="konwersja-string" tabindex="-1"><a class="header-anchor" href="#konwersja-string" aria-hidden="true">#</a> Konwersja string</h1><p>Konwersja do typu string będzie zdarzała się niezwykle często. Do konwersji na typ <code>string</code> możemy użyć funkcji <code>String()</code> lub też metody <code>toString()</code>, którą można wywołać na każdej zmiennej i obiekcie. Metoda <code>toString()</code> bardzo często wywoływana jest przy wszelkich konwersjach niejawnych na przykład przy poleceniu <code>console.log()</code>.</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> <code>String()</code></h2><p>Do funkcji <code>String()</code> możemy przekazać każdą wartość:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;NaN&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Infinity&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Zawsze otrzymamy jakaś wartość w postaci łańcuchowej.</p><p>Funkcja <code>String()</code> jest o tyle bezpieczna, że możemy tam wciąż przekazać <code>null</code> i <code>undefined</code>. Czego nie da się zrobić wywołując bezpośrednio funkcję <code>toString()</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42&#39;</span>\n<span class="token comment">// console.log(null.toString()); // error</span>\n<span class="token comment">// console.log(undefined.toString()); // error</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W przypadku <code>null</code> i <code>undefined</code> otrzymamy błąd. Dlatego zawsze bezpieczniej jest wywołać funkcję <code>String()</code>.</p><h2 id="konwersja-ze-znakiem" tabindex="-1"><a class="header-anchor" href="#konwersja-ze-znakiem" aria-hidden="true">#</a> Konwersja ze znakiem <code>+</code></h2><p>Bardzo popularnym sposobem konwersji na typ <code>string</code> jest użycie znaku <code>+</code> i dodanie pustego stringa do innej wartości. Jest to bardzo często spotykany sposób konwersji do typu <code>string</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;42&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Gdy po jednej ze stron znaku <code>+</code> stoi wartość typu <code>string</code> nie zostanie wykonane działanie matematyczne, ale konkatenacja stringów. Oczywiście przed konkatenacją następuje konwersja wartości do typu <code>string</code>, a potem połączenie wartości z pustym stringiem. W ten sposób możemy przekonwertować na typ <code>string</code> każdą wartość.</p><p>Przy typie <code>number</code> możemy wpaść w pułapkę:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;402&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">99</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;991&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jeżeli po której stronie operatora <code>+</code> stoi string, zawsze nastąpi połączenie stringów. Nie wykonamy w ten sposób działania matematycznego. Trzeba uważać na taką pułapkę i mieć świadomość czy pracujemy na typie <code>number</code> czy też na typie <code>string</code>.</p><h2 id="string-na-number" tabindex="-1"><a class="header-anchor" href="#string-na-number" aria-hidden="true">#</a> String na number</h2><p>String na <code>number</code> omawiany był już przy okazji konwersji typu <code>number</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;42.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42.5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;42.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42.5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;42.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42.5</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;42.5xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;42.5xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;42.5xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 42.5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Do dyspozycji mamy znane nam już funkcje <code>Number(), parseInt(), parseFloat()</code>. Zasada jest bardzo prosta, jeżeli używamy funkcji <code>Number()</code> musimy dbać, aby literał typu string reprezentował liczbę.</p><p>Jeżeli używamy <code>parseInt()</code> lub <code>parseFloat()</code> literał nie musi dokładnie przedstawiać liczby, niepotrzebne znaki zostaną wycięte.</p><p>Każda liczba w typie string musi zostać zapisana z kropką nie przecinkiem. Wtedy jest to poprawna reprezentacja liczby w JavaScript.</p><h2 id="string-na-boolean" tabindex="-1"><a class="header-anchor" href="#string-na-boolean" aria-hidden="true">#</a> String na boolean</h2><p>Jeśli chodzi o konwersję wartości w typie <code>string</code> na typ <code>boolean</code> wiemy już, że pusty string to wartość <code>false</code>, a każdy niepusty string to wartość <code>true</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jeżeli będziemy operować takimi wartościami jak <code>&#39;true&#39;</code> oraz <code>&#39;false&#39;</code> zapisane jako string</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>nie będziemy mogli użyć wbudowanej funkcji <code>Boolean()</code> do ich konwersji na typ <code>boolean</code>.</p><p>Przy takiej konwersji zawsze otrzymamy wartość <code>true</code>. Musimy zatem stworzyć własną implementację i porównać wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> someValue <span class="token operator">===</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Wynikiem porównania w JavaScript jest zawsze jakaś wartość <code>boolean</code>. Porównujemy czy zmienna <code>value</code> jest napisem <code>&#39;true&#39;</code> jeżeli tak otrzymamy <code>true</code> jako <code>boolean</code>, jeżeli nie, otrzymamy <code>false</code>. Tak w najprostszy sposób możemy dokonać konwersji literałów <code>&#39;true&#39;</code> oraz <code>&#39;false&#39;</code> na typ <code>boolean</code>.</p><p>Przy tym zapisie, warto jeszcze mieć pewność, że porównywane łańcuchy mają tą samą wielkość liter. Dla bezpieczeństwa warto dołożyć wywołanie metody <code>toUpperCase()</code> i być może obciąć puste znaki przez metodę <code>trim()</code>.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li><p>funkcja <code>String()</code> to doskonały sposób na konwersję do typu <code>string</code></p></li><li><p>innym sposobem jest wywołanie metody <code>toString()</code> która jest zapewniona dla każdego typu</p></li><li><p>dodanie pustego stringa do jakiejś wartości spowoduje konwersję na typ <code>string</code></p></li><li><p>na typ <code>number</code> konwertujemy stringi za pomocą funkcji <code>Number(), parseInt() lub parseFloat()</code></p></li><li><p>stringowy zapis wartości <code>true</code> i <code>false</code> możemy przekonwertować przez stworzenie własnej funkcji</p></li></ul>',34),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){const a=(0,o.up)("Comments");return(0,o.wg)(),(0,o.iD)(o.HY,null,[e,(0,o.Wm)(a)],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,o]of s)n[a]=o;return n}}}]);