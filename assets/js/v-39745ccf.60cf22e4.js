"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[7155],{3641:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-39745ccf",path:"/zmienne-i-typy/typ-string/",title:"Wartość i typ string",lang:"pl-PL",frontmatter:{permalink:"/zmienne-i-typy/typ-string"},excerpt:"",headers:[{level:2,title:"Deklaracja wartości typu string",slug:"deklaracja-wartosci-typu-string",children:[]},{level:2,title:"Template literals",slug:"template-literals",children:[]},{level:2,title:"Obiekt String",slug:"obiekt-string",children:[]},{level:2,title:"Co warto zapamiętać:",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"zmienne-i-typy/07-typ-string.md",git:{}}},4435:(a,n,s)=>{s.r(n),s.d(n,{default:()=>o});const e=(0,s(6252).uE)('<h1 id="wartosc-i-typ-string" tabindex="-1"><a class="header-anchor" href="#wartosc-i-typ-string" aria-hidden="true">#</a> Wartość i typ string</h1><p>Z wartościami tekstowymi w JavaScript pracuje się bardzo często. Wartości tekstowe reprezentowane są jako typ prymitywny <code>string</code>. W JavaScript jest kilka sposobów na zadeklarowanie takiej wartości, dodatkowo mamy też <em>template literals</em>, które pomagają formatować tekst. Pierwsza część o tym jak tworzyć stringi w JavaScript i jak formatować dłuższe teksty.</p><h2 id="deklaracja-wartosci-typu-string" tabindex="-1"><a class="header-anchor" href="#deklaracja-wartosci-typu-string" aria-hidden="true">#</a> Deklaracja wartości typu <code>string</code></h2><p>Zobaczmy jak może wyglądać literał typu <code>string</code> w języku JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> single <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Wartości tekstowe możecie zapisywać w pojedynczych lub podwójnych cudzysłowach, zależy to tylko od waszych upodobań.</p><p>Mamy także znak ucieczki czyli <em>backslash</em>, który pozwala na użycie znaków, które występując więcej razy w literale mogą stanowić problem. Przykładem są właśnie cudzysłowy, które dodatkowo użyte w stringu bez znaku ucieczki mogą stanowić problem dla JavaScript w zrozumieniu gdzie kończy, a gdzie zaczyna się wartość.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string">&quot;I say \\&quot;hello!\\&quot;&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token string">&#39;D\\&#39;Artagnan&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Dodatkowo możemy w wartości string wprowadzać nową linię za pomocą znaku <code>\\n</code>. Tym sposobem tekst zostanie wyświetlony w trzech liniach.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;I \\n am \\n computer&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Znaków ucieczki jest więcej i nie będę ich omawiał wszystkich, można je natomiast odnaleźć w dokumentacji na stronie MDN.</p><p>Jeżeli chcemy zapisać bardzo długiego stringa w edytorze kodu możemy to zrobić w taki sposób:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> longString <span class="token operator">=</span> <span class="token string">&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit, &#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;Ut enim ad minim veniam&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Kolejne zdania zapisujemy w nowej linii i łączymy je za pomocą znaku plus. Czyli tak naprawdę wykonujemy konkatenację stringów. Zauważ, że każdy string zapisany jest we własnym cudzysłowie i połączony znakiem plus. Są to trzy oddzielne wartości, które łączą się w jedną wartość pod zmienną <code>longString.</code></p><p>Inną metodą jest umieszczenie znaku <em>backslash</em> w miejscu, gdzie chcemy złamać linie kodu w edytorze:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> longString2 <span class="token operator">=</span> <span class="token string">&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\\nUt enim ad minim veniam&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku, cały napis znajduje się w jednym cudzysłowie, a znak <em>backslash</em> dodajemy w miejscu gdzie chcemy mieć złamaną linię. W tym zapisie, musimy zwrócić uwagę na to, aby po znaku <em>backslash</em> nie było żadnego odstępu, ani spacji, ani tabulatora.</p><p>Pamiętajmy, że te dwie metody pokazują łamanie linii kodu w edytorze dla lepszej czytelności. W konsoli tekst wyświetla się jako ciągłe zdanie.</p><p>Zahaczyliśmy już o dodawanie stringów za pomocą znaku <code>+</code> . Możemy go oczywiście używać do łączenia stringów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> helloWorld <span class="token operator">=</span> hello <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> world <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Hello world!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Zmienną hello łączymy na początku ze spacją, potem dołączamy kolejną zmienną i na końcu dodajemy wykrzyknik. W ten sposób budujemy całe zdanie. Czasami taki zapis staje się mało czytelny, na szczęście jest lepszy sposób na łączenie wartości.</p><h2 id="template-literals" tabindex="-1"><a class="header-anchor" href="#template-literals" aria-hidden="true">#</a> Template literals</h2><p>Od ECMAScript 6 mamy jeszcze dostęp do template literals, czasami nazywane też template strings, które zapisuje się za pomocą znaku <em>backtick</em> lub po polsku odwróconego apostrofu. Znak ten znajduje się na klawiaturach Windows pod klawiszem Escape.</p><p>Za pomocą znaków <em>backtick</em> możemy tworzyć także zmienne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">James</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> surname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bonds</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jednak najczęściej template literals używa się nie do inicjalizowania zmiennych, a do wykonywania wyrażeń. Zobaczmy taki przykład:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Bond, James Bond!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Używając odwróconego apostrofu możemy budować bardziej złożone wartości string, które składają się ze zmiennych czy nawet funkcji. Oczywiście to samo możemy otrzymać przy konkatenacji stringów za pomocą znaku <code>+</code> jednak w tym przypadku czytelność wygrywa.</p><p>Wszystko co znajduje się pomiędzy znakami <em>backticks</em> zostanie zinterpretowane jako string. Pod zmienne zostaną podstawione wartości, a ewentualne funkcje zostaną wykonane.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">upperCase</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> myName2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">upperCase</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">//  My name is Bond, James BOND!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Widzimy bardziej skomplikowany zapis, gdzie odwołuję się nie tylko do zmiennych, ale także do funkcji, do której przekazuję dodatkowo zmienną, a ona zwraca mi wartość tej zmiennej, zamieniając wszystkie znaki na duże liter. Używając <em>template literals</em> jesteśmy w stanie zapisać to w ładnej i przejrzystej formie.</p><p>Odwrócony apostrof może nam się także przydać do łamania linii w edytorze kodu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> longString3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Nie musieliśmy używać żadnych dodatkowych znaków, aby tak zapisać długą wartość string w czytelny sposób. Należy jednak pamiętać, że napis ten zostanie wyświetlony dokładnie tak jak został zapisany. Jest to spora różnica w porównaniu do poprzednich sposobów.</p><p>W tamtych przypadkach, chcieliśmy jedynie zachować czytelność w edytorze, a tekst był wyświetlany jako ciągły. Tutaj wpływamy nie tylko na czytelność w edytorze, ale także na formatowanie samego tekstu przy jego wyświetlaniu.</p><p>Jeżeli deklarujemy wartości <code>string</code> róbmy to za pomocą pojedynczego lub podwójnych cudzysłowów. Jeżeli natomiast chcemy budować wyrażenie w którym podstawimy zmienne, a może nawet wykonamy kod jakieś funkcji, używajmy <em>template literals</em> czyli zapis z odwróconym apostrofem.</p><h2 id="obiekt-string" tabindex="-1"><a class="header-anchor" href="#obiekt-string" aria-hidden="true">#</a> Obiekt String</h2><p>Również prymitywny typ <code>string</code> posiada reprezentację w postaci obiektu <code>String</code> zapisanego z dużej litery. Podobnie jak przy <code>Boolean</code> czy <code>Number</code> możemy tworzyć obiekty z wartością <code>string</code> przez wywołanie konstruktora tego obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [String: &#39;Lorem ipsum&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lorem ipsum</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jak już wiemy inicjalizacja ze słowem <code>new</code> powoduje powstanie obiektu, który opakowuje wartość tekstową. Jeżeli chcemy dostać się do prymitywnej wartości musimy wywołać na obiekcie metodę <code>valueOf()</code>. Korzystanie więc z tego obiektu nie ma większego sensu i jest zbędne w codziennej pracy programisty JavaScript.</p><p>Dużego obiektu najlepiej używać w formie funkcji <code>String()</code> do konwersji innych typów na <code>string</code>, ale o tym będziemy jeszcze rozmawiać przy okazji konwersji.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać:</h2><ul><li>literały typu <code>string </code> zapisujemy za pomocą pojedynczego lub podwójnego cudzysłowia</li><li>znak odwróconego apostrofu używamy do stworzenia <em>template literals</em></li><li>znakiem plus możemy łączyć wartości do typu <code>string</code></li><li>możemy użyć różnych znaków ucieczki, aby lepiej sformatować nasz tekst np. <code>\\n</code></li><li>template literals pozwalają nam na czytelne łączenie stringów lub nawet wykonanie funkcji. Dzięki temu możemy zbudować skomplikowane ale czytelne wyrażenia.</li><li>prymitywny typ <code>string</code>, także posiada wrapper w postaci obiektu <code>String</code>.</li></ul>',43),t={},o=(0,s(3744).Z)(t,[["render",function(a,n){return e}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);