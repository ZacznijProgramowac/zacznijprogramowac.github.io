"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[4598],{436:(n,a,s)=>{s.r(a),s.d(a,{data:()=>o});const o={key:"v-12fe8c76",path:"/konwersje-i-porownania/konwersja-boolean/",title:"Konwersja boolean",lang:"pl-PL",frontmatter:{permalink:"/konwersje-i-porownania/konwersja-boolean"},excerpt:"",headers:[{level:2,title:"Wartości fałszywe i prawdziwe",slug:"wartosci-fałszywe-i-prawdziwe",children:[]},{level:2,title:"Konwersja przez operator logicznej negacji do boolean",slug:"konwersja-przez-operator-logicznej-negacji-do-boolean",children:[]},{level:2,title:"Konwersja boolean na number",slug:"konwersja-boolean-na-number",children:[]},{level:2,title:"Konwersja boolean na string",slug:"konwersja-boolean-na-string",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"konwersje-i-porownania/02-konwersja-boolean.md",git:{}}},1493:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});var o=s(6252);const e=(0,o.uE)('<h1 id="konwersja-boolean" tabindex="-1"><a class="header-anchor" href="#konwersja-boolean" aria-hidden="true">#</a> Konwersja boolean</h1><p>W tym dziale będziemy omawiać konwersję na typ <code>boolean</code> oraz konwersje wartości <code>boolean</code> na inne typy jak <code>string</code> i <code>number</code>. Przyjrzymy się jawnym metodom konwersji jak na przykład funkcji <code>Boolean()</code>, którą już trochę omawialiśmy.</p><p>Oprócz jawnej konwersji na typ często będziecie mieli do czynienia z niejawną konwersją. Dotyczy ona często instrukcji warunkowych, pętli, operatorach porównania i operatorach logicznych.</p><p>Wszystkie sposoby porównania także logicznego omówimy sobie jeszcze w oddzielnych działach. Teraz skupmy się na tym jak konwertować na typ <code>boolean</code> i jak konwertować wartości tego typu do innych typów.</p><h2 id="wartosci-fałszywe-i-prawdziwe" tabindex="-1"><a class="header-anchor" href="#wartosci-fałszywe-i-prawdziwe" aria-hidden="true">#</a> Wartości fałszywe i prawdziwe</h2><p>Jednym z jawnych sposobów konwersji jest użycie funkcji <code>Boolean()</code>. Do tej funkcji możemy wstawić dosłownie wszystko.</p><p>Niektóre wyniki jawnych konwersji mogą być łatwe do przewidzenia, niektóre jednak mogą wydawać się nam mało logiczne. Wszystko natomiast opiera się na wartościach fałszywych. Wartości fałszywe, są określone w specyfikacji, a także na stronie MDM https://developer.mozilla.org/en-US/docs/Glossary/Falsy.</p><p>Jest to krótka i ściśle określona lista, pokazująca, która wartości po konwersji do typu <code>boolean</code>, staną się wartościami <code>false</code>.</p><p>Lista wartości fałszywych jest czymś, co powinniśmy zapamiętać, pracując w JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Specyfikacja dokładnie określa, jaka wartość jest konwertowana na wartość <code>false</code>. Są to wszystkie wartości puste, nic nie reprezentujące jak <code>null</code> i <code>undefined</code>, wszystkie liczby, które nie mają żadnej wartości jak zera i wartość <code>NaN</code>, pusty string oraz oczywiście sama wartość <code>false</code>.</p><p>Drugą rzeczą do zapamiętania jest to, że wszystko, co nie znajduje się na liście wartości fałszywych, konwertuje się do wartości <code>true</code>. Jak się domyślacie listy z wartościami <code>true</code> nie ma, ponieważ byłaby ona niesamowicie długa, a może nawet nieskończenie długa.</p><p>Podam tylko kilka ciekawych przypadków wartości <code>true</code>, które mogą wydawać się <code>false</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Zero jest tutaj zapisane jako string, a niepusta wartość string konwertuje się do <code>true</code>.</p><p>Liczba <code>-1</code> także konwertuje się do <code>true</code>, ponieważ nie ma jej na liście wartości fałszywych.</p><p>Wątpliwości mogą budzić te dwie wartości wyglądające jak puste znaki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Pierwsza z nich reprezentuje dwa znaki podwójnego cudzysłowu, druga reprezentuje trzy spacje. Nie są to więc puste stringi więc konwertują się na wartość <code>true</code>.</p><p>Tak samo obiekty i listy. Nie jest istotne czy są to elementy puste, czy nie. Zawsze nastąpi konwersja do wartości <code>true</code> .</p><p>Nie dajmy się więc zmylić takimi wartościami. Jak wspominałem, wystarczy zapamiętać, co jest wartościami fałszywymi, jeżeli coś nie istnieje na liście wartości fałszywych, przekonwertuje się do <code>true</code>.</p><h2 id="konwersja-przez-operator-logicznej-negacji-do-boolean" tabindex="-1"><a class="header-anchor" href="#konwersja-przez-operator-logicznej-negacji-do-boolean" aria-hidden="true">#</a> Konwersja przez operator logicznej negacji do <code>boolean</code></h2><p>Oprócz funkcji <code>Boolean()</code>, możecie spotkać się z konwersją do typu <code>boolean</code> przez użycie podwójnego operatora logicznej negacji. Operator logicznej negacji omówmy jeszcze dodatkowo przy operatorach logicznych.</p><p>Teraz bardziej skupimy się na tym, jak konwertować wartości za pomocą tego operatora.</p><p>Na razie przyjrzyjmy się, co robi operator negacji, czyli pojedynczy wykrzyknik <code>!</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Za jego pomocą, jawnie konwertujemy do wartości <code>boolean</code>, ale odwracamy wynik. Dlatego wszystko, co powinno być <code>true</code> staje się <code>false</code>, a wszystko, co powinno być <code>false</code>, staje się <code>true</code>.</p><p>Co prawda przekonwertowaliśmy wartości na typ <code>boolean</code>, ale są one odwrócone. Jeżeli jednak chcemy przekonwertować wartość do typu <code>boolean</code> bez odwracania wartości, należy użyć podwójnego operatora negacji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>To działanie tak naprawdę ma dwa kroki. Pierwszy to konwersja do <code>boolean</code> i odwrócenie wartości. Drugi krok to ponowne odwrócenie wartości <code>boolean</code>. Otrzymujemy tym razem prawidłowe wartości w typie <code>boolean</code>.</p><p>Może się to wydawać za mało wydajne lub zbyt skomplikowane, sposób ten jest jednak dość często spotykany w kodzie. Jest bardzo krótki zapis jawnej konwersji do <code>boolean</code>.</p><h2 id="konwersja-boolean-na-number" tabindex="-1"><a class="header-anchor" href="#konwersja-boolean-na-number" aria-hidden="true">#</a> Konwersja <code>boolean</code> na <code>number</code></h2><p>Gdy chcemy dokonać konwersji <code>boolean</code> na typ <code>number</code> mamy sporo możliwości.</p><p>Pierwszą z nich jest oczywiście użycie funkcji <code>Number()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jest to bardzo czytelny zapis konwersji. Z wartości <code>true</code> otrzymujemy wartość <code>1</code>, natomiast z wartości <code>false</code> otrzymujemy wartość <code>0</code>. To wynika głównie ze specyfikacji ECMAScript.</p><p>Niech was jednak nie zmyli to, że tylko liczba <code>1</code> konwertuje się ponownie na wartość <code>true</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0.000009</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Oczywiście każda liczba różna od <code>0</code> i <code>-0</code> będzie konwertowana na <code>true</code> bo tak wynika ze specyfikacji i tabelki wartości fałszywych. Więc nie wpadnijmy w pułapkę, że tylko liczba <code>1</code> jest wartością <code>true</code>.</p><p>Możemy jeszcze dokonać konwersji za pomocą jednoargumentowego operatora <code>+</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jest to jawna konwersja do typu <code>number</code>. Operator <code>+</code> jest używany do konwersji wszystkich wartości na typ <code>number</code>, nie tylko wartości <code>boolean</code> i oczywiście może nam zastąpić funkcję <code>Number()</code>.</p><p>To samo możemy zrobić za pomocą jednoargumentowego operatora negacji reprezentowanego przez znak <code>-</code>, ale wtedy otrzymujemy wartości ujemne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Niech was nie zdziwi wartość <code>-0</code>, wartość taka istnieje w JavaScript.</p><p>W Internecie znajdziecie jeszcze więcej pomysłów konwersji wartości <code>boolean</code> na typ <code>number</code>. Co będziecie używać, zależy głównie od Waszych preferencji i ustaleń w teamie. Dla mnie najczytelniejszą wersją konwersji jest wersja z funkcją <code>Number()</code>.</p><h2 id="konwersja-boolean-na-string" tabindex="-1"><a class="header-anchor" href="#konwersja-boolean-na-string" aria-hidden="true">#</a> Konwersja <code>boolean</code> na <code>string</code></h2><p>Ostatnią możliwą konwersją typu <code>boolean</code> jest konwersja na typ <code>string</code>. Konwersja na typ <code>string</code> jest bardzo prosta, możemy na wartości <code>boolean</code>, wywołać metodę <code>toString()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Otrzymamy wartości w postaci tekstu. Pamiętajmy, że nie ma już odwrotu i nie możemy z wartości tekstowej <code>&#39;false&#39;</code>, uzyskać wartości <code>false</code> w typie <code>boolean</code>. Z tekstowej wartości <code>&#39;false&#39;</code> otrzymamy wartość <code>true</code> po konwersji za pomocą funkcji <code>Boolean()</code> :</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Oczywiście już wiemy dlaczego tak się dzieje. Tylko puste stringi według tabelki wartości fałszywych mogą konwertować się do wartości <code>fasle</code>. Dlatego powrotu do wartości <code>false</code> już nie ma za pomocą zwykłej konwersji do <code>boolean</code>.</p><p>Ponieważ wywołanie metody <code>toString()</code> może być czasami niebezpieczne, gdy natrafimy na wartość <code>null</code> lub <code>undefined</code> warto też wykorzystać funkcję <code>String()</code> do jawnej konwersji.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Kolejnym sposobem na konwersję, chociaż mniej jawne jest użycie operatora <code>+</code> z dwoma argumentami:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Gdy jedna ze stron reprezentuje typ <code>string</code> nie następuje tutaj działanie matematyczne a konkatenacja stringów. Dlatego w tym przypadku wartości <code>boolean</code> przechodzą przez konwersję do typu <code>string</code> i ostatecznie są łączone z pustym stringiem. Dostajemy więc wartości <code>boolean</code> zapisane jako string.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>każdą wartość w JavaScript da się przekonwertować na typ <code>boolean</code></li><li>jawna konwersja na typ <code>boolean</code> jest przewidywalna, gdy znamy tabelkę wartości fałszywych</li><li>jeżeli czegoś nie ma w wartościach fałszywych to zawsze będzie wartością <code>true</code></li><li>do konwersji jawnej na typ <code>boolean</code> używamy funkcji <code>Boolean()</code></li><li>kolejnym sposobem konwersji jawnej jest użycie operatora logicznej negacji <code>!</code></li><li>przy konwersji na typ <code>number</code> używamy funkcji <code>Number()</code> lub operatora jednoargumentowego <code>+</code> oraz <code>-</code></li><li>przy konwersji na typ <code>string</code> używamy metody <code>toString()</code>, funkcji <code>String()</code> lub korzystamy z konkatenacji znaków przez operator <code>+</code></li></ul>',59),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,o.up)("Comments");return(0,o.wg)(),(0,o.iD)(o.HY,null,[e,(0,o.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,o]of a)n[s]=o;return n}}}]);