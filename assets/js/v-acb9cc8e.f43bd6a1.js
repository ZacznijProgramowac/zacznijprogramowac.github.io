"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[3454],{2818:(a,n,s)=>{s.r(n),s.d(n,{data:()=>o});const o={key:"v-acb9cc8e",path:"/operatory-logiczne/operatory-logiczne/",title:"Operatory logiczne",lang:"pl-PL",frontmatter:{permalink:"/operatory-logiczne/operatory-logiczne"},excerpt:"",headers:[{level:2,title:"Operator logiczny !  oraz  !!",slug:"operator-logiczny-oraz",children:[]},{level:2,title:"Operatory logiczne && oraz ||",slug:"operatory-logiczne-oraz",children:[]},{level:2,title:"Operator logiczny AND",slug:"operator-logiczny-and",children:[]},{level:2,title:"Operator logiczny OR",slug:"operator-logiczny-or",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"operatory-logiczne/02-operatory-logiczne.md",git:{}}},8712:(a,n,s)=>{s.r(n),s.d(n,{default:()=>t});var o=s(6252);const e=(0,o.uE)('<h1 id="operatory-logiczne" tabindex="-1"><a class="header-anchor" href="#operatory-logiczne" aria-hidden="true">#</a> Operatory logiczne</h1><p>W tym dziale omówimy sobie operatory logiczne. Ich zadaniem jest sprawdzenie wartości typu <code>boolean</code> i odpowiednio zwrócenie wartości typu <code>boolean</code>. Jednak gdy do operatorów logicznych wstawimy inne wartości niż <code>boolean</code> zwrócona jest jedna z tych wartości. Być może brzmi to teraz trochę dziwnie, ale zaraz zobaczymy wszystko w działaniu.</p><h2 id="operator-logiczny-oraz" tabindex="-1"><a class="header-anchor" href="#operator-logiczny-oraz" aria-hidden="true">#</a> Operator logiczny <code>!</code> oraz <code>!!</code></h2><p>Na początek omówimy operator logicznej negacji. Reprezentowany jest przez znak wykrzyknika <code>!</code>. Wiemy już, że możemy go użyć do konwersji na typ <code>boolean</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Za jego pomocą, jawnie konwertujemy do wartości <code>boolean</code>, ale odwracamy wynik. Dlatego wszystko co jest <code>true</code> staje się <code>false</code>, a wszystko, co <code>false</code>, staje się <code>true</code>.</p><p>Taka negacja może się przydać przy takiej konstrukcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Falsy value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Falsy value</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Gdy do bloku <code>if</code> wstawimy logiczną negację, możemy to przeczytać jako: Wykonaj kod, gdy zmienna <code>a</code> nie jest <code>true</code>. Wiemy, że <code>null</code> w tym miejscu konwertuje się do <code>false</code>, więc odwrócimy wartość do <code>true</code> i wykonamy blog <code>if</code>.</p><p>W dłuższej wersji i bardziej czytelnej zapisalibyśmy to tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Falsy value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Falsy value</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Wykonalibyśmy jawną konwersję to typu <code>boolan</code> i sprawdzili, czy ma wartość <code>false</code>.</p><p>Możemy także zanegować całe wyrażenie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Falsy value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Is null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W ten sposób sprawdzamy, czy konwersja zmiennej do <code>boolean</code> daje nam wartość <code>true</code>. I negujemy całe wyrażenie. Znowu możemy to tłumaczyć. Wykonaj blok <code>if</code> jeśli warunek nie jest <code>true</code>.</p><p>Możemy więc za pomocą operatora negacji, negować wyrażenia.</p><p>Wiemy też, że używając podwójnego znaku możemy przekonwertować wartość do typu <code>boolean</code> bez odwracania wartości, należy użyć podwójnego operatora negacji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Znamy już to działanie z konwersji do typu <code>boolean</code>.</p><h2 id="operatory-logiczne-oraz" tabindex="-1"><a class="header-anchor" href="#operatory-logiczne-oraz" aria-hidden="true">#</a> Operatory logiczne <code>&amp;&amp;</code> oraz <code>||</code></h2><p>W JavaScript jak w wielu językach programowania mamy jeszcze operatory logiczne AND reprezentowane przez dwa znaki ampersand <code>&amp;&amp;</code> oraz operator <code>OR</code> reprezentowane przez dwa znaki pionowej kreski <code>||</code>.</p><p>Operatory te w JavaScript pracują w dwóch wariantach. Jeżeli podstawimy do operatorów wartości typu <code>boolean</code>, zwrócą nam również wartość <code>boolean</code>. Jednak gdy podstawimy do nich inną wartość niż <code>boolean</code>, zwrócą jedną z tych dwóch wartości. Najlepiej oczywiście zobaczyć to na przykładach.</p><h2 id="operator-logiczny-and" tabindex="-1"><a class="header-anchor" href="#operator-logiczny-and" aria-hidden="true">#</a> Operator logiczny <code>AND</code></h2><p>Na początek sprawdźmy typowe działanie operatora <code>AND</code>, takie, jakie jest znane z innych języków programowania:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tych przypadkach, po każdej stronie operatora logicznego <code>AND</code> stoją porównania. Jak wiemy porównania zwracają jakaś wartość <code>boolean</code>. Operator <code>AND</code> też zwróci wartość <code>boolean</code>.</p><p>W tym przypadku operator <code>AND</code> działa jak w wielu innych językach programowania:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Jeżeli wszystkie wartości są <code>true</code>, zawsze otrzymamy <code>true</code>. Jeżeli jakakolwiek jest <code>false</code>, zawsze otrzymamy <code>false</code>. Oczywiście można użyć wielu operatorów AND w porównaniu.</p><p>Dodatkowo w JavaScript możecie się spotkać z innym zastosowaniem operatora <code>AND</code>. Gdy operator ten, będzie zwracał jedną z wartości użytą przy porównaniu, rozpatrzmy takie dwa przypadki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;boo&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W pierwszym przypadku otrzymujemy wartość <code>foo</code>. Ponieważ pierwsza wartość po konwersji do <code>boolean</code> zwraca <code>true</code>. Więc za każdym razem, gdy na pierwszym miejscu stoi wartość prawdziwa, to zwracana jest wartość druga.</p><p>W drugim przypadku zwrócona jest wartość <code>0</code>, ponieważ jest to wartość fałszywa. Jeżeli więc pierwsza wartość dała wartość <code>false</code> jest ona zwracana jako wynik.</p><p>W skrócie:</p><blockquote><p>Zwróć pierwszą wartość, gdy jest fałszywa, w innym wypadku zwróć drugą wartość.</p></blockquote><p>Zauważ, że nie są zwracane wartości <code>true</code> lub <code>false</code>. No chyba, że stoją one po którejś stronie znaku. Zawsze zwracana jest jedna z wartości podstawionej do operatora <code>AND</code>.</p><p>Polecam przejrzeć więcej przypadków, ponieważ nie jest to na początku takie intuicyjne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;One&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Two&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Tam gdzie pierwsza wartość po konwersji mogła dać wartość <code>false</code> , zwracana jest pierwsza wartość.</p><p>Gdy pierwsza wartość po konwersji daje <code>true</code> zwracana jest druga wartość.</p><p>Tak działa operator <code>AND</code>, pełni dwie funkcje. Zwraca wartości <code>boolean</code> gdy operuje na takich wartościach. Lub zwraca konkretne wartości, gdy operuje na innych wartościach niż <code>boolean</code>.</p><h2 id="operator-logiczny-or" tabindex="-1"><a class="header-anchor" href="#operator-logiczny-or" aria-hidden="true">#</a> Operator logiczny <code>OR</code></h2><p>Operator <code>OR</code> podobnie jak operator <code>AND</code> również ma podwójne działanie, przyjrzyjmy się jego standardowemu działaniu.</p><p>Gdy operatora użyjemy razem z wartościami <code>boolean</code>, również zwróci nam wartość <code>boolean</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W tym kodzie widzimy, że operator zawsze zwraca <code>true</code> gdy przynajmniej jedna wartość jest <code>true</code>. Gdy obie wartości są <code>false</code> dopiero wtedy zwraca wartość <code>false</code>. W naszym kodzie jest to ostatni przypadek, gdzie oba warunki są nieprawidłowe.</p><p>Zobaczmy bardziej przejrzysty kod, do którego wstawiamy już wartości typu <code>boolean</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Jak widzimy, to działanie jest identyczne, jak w wielu innych językach programowania. Wystarczy jedna wartość <code>true</code>, aby otrzymać <code>true</code>. Jeżeli obie wartości są <code>false</code> to otrzymamy wtedy <code>false</code>.</p><p>Zobaczmy jednak jak działa operator logiczny <code>OR</code>, gdy pracujemy na innych wartościach niż <code>boolean</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;boo&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boo&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Gdy pierwsza wartość będzie wartością prawdziwą, zwrócona zostanie ta pierwsza wartość. Gdy natomiast pierwsza wartość jest fałszywa, zwracana jest druga wartość.</p><p>Jeszcze krócej:</p><blockquote><p>Zwróć pierwszą wartość, gdy jest prawdziwa, w innym wypadku zwróć drugą.</p></blockquote><p>Pamiętajcie, że tak jak przy operatorze <code>AND</code> otrzymujemy jedną z dwóch wartości podstawioną do równania. Nie otrzymujemy typu <code>boolean</code> jako wynik, chyba że taka wartość <code>boolean</code> także została użyta przy porównaniu.</p><p>Porównamy to wszystko na większej ilości przykładów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Two&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;One&#39;</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;One&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Two&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Two&#39;</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Two&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Tam, gdzie pierwsza wartość była prawdziwa, tam została zwrócona pierwsza wartość, jeżeli nie, to zwrócona została wartość druga.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li><p>operator logicznej negacji konwertuje wartości na typ <code>boolean</code> ale odwracając wartość</p></li><li><p>podwójnie użyty operator logicznej negacji konwertuje wartości na typ <code>bo olean</code> tak samo jak funkcja <code>Boolean()</code></p></li><li><p>gdy operator <code>AND</code> pracuje na wartościach <code>boolean</code> sam jako wynik zwraca typ <code>boolean</code></p></li><li><p>gdy operatora <code>AND</code> pracuje na innych wartościach niż <code>boolean</code> zwraca jedną z tych wartości:</p><blockquote><p>Zwróć pierwszą wartość, gdy jest fałszywa, w innym wypadku zwróć drugą wartość.</p></blockquote></li><li><p>gdy operator <code>OR</code> pracuje na wartościach <code>boolean</code> sam jako wynik zwraca typ <code>boolean</code></p></li><li><p>gdy operatora <code>OR</code> pracuje na innych wartościach niż <code>boolean</code> zwraca jedną z tych wartości:</p><blockquote><p>Zwróć pierwszą wartość gdy, jest prawdziwa, w innym wypadku zwróć drugą.</p></blockquote></li></ul>',60),p={},t=(0,s(3744).Z)(p,[["render",function(a,n){const s=(0,o.up)("Comments");return(0,o.wg)(),(0,o.iD)(o.HY,null,[e,(0,o.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,o]of n)a[s]=o;return a}}}]);