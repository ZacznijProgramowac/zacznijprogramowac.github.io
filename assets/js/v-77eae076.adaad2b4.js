"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[2870],{4235:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-77eae076",path:"/instrukcje-warunkowe/ternary-operator/",title:"Ternary operator",lang:"pl-PL",frontmatter:{permalink:"/instrukcje-warunkowe/ternary-operator/"},excerpt:"",headers:[{level:2,title:"Łączenie operatorów",slug:"łaczenie-operatorow",children:[]},{level:2,title:"Kilka przypadków użycia",slug:"kilka-przypadkow-uzycia",children:[]},{level:2,title:"Dodatkowy kod",slug:"dodatkowy-kod",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"instrukcje-warunkowe/03-ternary-operator.md",git:{}}},6759:(a,n,s)=>{s.r(n),s.d(n,{default:()=>t});var e=s(6252);const o=(0,e.uE)('<h1 id="ternary-operator" tabindex="-1"><a class="header-anchor" href="#ternary-operator" aria-hidden="true">#</a> Ternary operator</h1><p>W JavaScript do sprawdzania warunków mamy też ternary operator. Operator ten bardzo często zastępuje instrukcję <code>if</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> num <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;one&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;one&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Po porównaniu, operator zwraca jakąś wartość, którą możemy przypisać do zmiennej. Jeżeli porównanie daje <code>true</code> zwracana jest pierwsza wartość po znaku zapytania w innym wypadku zwracana jest druga wartość stojąca na końcu operatora.</p><p>Wbrew pozorom, ternary operator nie musi zwracać wartości, może wykonać jakaś funkcję:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> test <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\ntest <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value is one&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value is two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku w zależności, jaka wartość znajdzie się w zmiennej test zostanie wykonana jedna z funkcji <code>console.log</code>. Możemy więc w prosty sposób kontrolować wykonywanie kodu. Niektórzy jednak uważają, że wykonywanie kodu w taki sposób nie jest zbyt czytelne i lepiej zastosować tutaj blok <code>if</code>.</p><p>Ternary operator przyda się bardzo przy sprawdzaniu, czy obiekt nie jest <code>null</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> value <span class="token operator">=</span> user <span class="token operator">?</span> user<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&#39;User is null&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;User is null&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W ten sposób bardzo prosto możemy sprawdzać obiekty, zanim pobierzemy z nich wartość. Ten zapis na pewno bardzo często znajdziecie w kodzie JavaScript.</p><h2 id="łaczenie-operatorow" tabindex="-1"><a class="header-anchor" href="#łaczenie-operatorow" aria-hidden="true">#</a> Łączenie operatorów</h2><p>Ternary operator możemy też łączyć w łańcuch wywołań:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> number <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;one&#39;</span> <span class="token operator">:</span> number <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;two&#39;</span> <span class="token operator">:</span> number <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">&#39;three&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;fourth&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Niestety nie jest to zbyt czytelna forma. Przy jeszcze bardziej skomplikowanych warunkach można szybko się pogubić. Przy większej ilości warunków jak tutaj zdecydowanie czytelniejsza będzie instrukcja <code>if</code> lub <code>switch</code>.</p><p>Nie życzę, Wam więc spotkania w kodzie takiego zapisu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> k <span class="token operator">=</span> a <span class="token operator">?</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> d <span class="token operator">:</span> e<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>d <span class="token operator">?</span> e <span class="token operator">:</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> f <span class="token operator">?</span> <span class="token punctuation">(</span>g <span class="token operator">?</span> h <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> j<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Niestety może to się zdarzyć, ponieważ ternary operator jest bardzo często używany przez programistów do skracania zapisów.</p><h2 id="kilka-przypadkow-uzycia" tabindex="-1"><a class="header-anchor" href="#kilka-przypadkow-uzycia" aria-hidden="true">#</a> Kilka przypadków użycia</h2><p>Pokażę Wam teraz kilka ciekawych przypadków użycie ternary operatora.</p><p>Zdarzają się przypadki, gdy ternary operator nie będzie potrzebny:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isAdult <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isAdult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku chcemy uzyskać wartość dla zmiennej <code>isAdult</code> w zależności od sprawdzenia zmiennej <code>age</code>. Zmienna <code>isAdult</code> będzie przechowywała wartość <code>true</code> lub <code>false.</code></p><p>Ten zapis można zrobić o wiele krócej:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> isAdult2 <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isAdult2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Wystarczy proste przypisane i sprawdzenie warunku za pomocą operatora porównania.</p><p>Możecie też się zastanawiać, jak użyć ternary operatora do zwrócenia tylko jednej wartości. Ogólnie nie jest to możliwe, ale możemy zrobić taki zapis:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You can enter&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Nie musimy przypisywać wartości z ternary operatora, a jeżeli warunek będzie prawdziwy to wykonujemy jakaś funkcję, która dalej wykonuje program. Jeżeli warunek nie jest prawdziwy, to zwracamy jakaś fałszywą wartość, która nic nie znaczy, bo nie zostaje nigdzie przypisana i nie musimy jej używać.</p><p>Tak naprawdę w takiej sytuacji nie powinniśmy na siłę szukać opcji użycia ternary operatora. A zapis ten możemy jeszcze prościej wykonać za pomocą operatora logicznego <code>AND</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yes, you can enter!&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Jak pamiętamy przy operatorze <code>AND</code> jeżeli pierwsza wartość okaże się prawdziwa, to zwracana lub wykonywana jest ta druga wartość. I w tym wypadku albo wykona się nasza funkcja, albo nie. Unikamy w tym przypadku zwrócenia jakiejkolwiek wartości.</p><h2 id="dodatkowy-kod" tabindex="-1"><a class="header-anchor" href="#dodatkowy-kod" aria-hidden="true">#</a> Dodatkowy kod</h2><p>Kolejnym ciekawym przypadkiem jest możliwość wykonania dodatkowego kodu przed zwróceniem wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> isAdult3 <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yes you are adult&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You can enter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token boolean">true</span>\n\n  <span class="token punctuation">)</span> <span class="token operator">:</span>\n  <span class="token punctuation">(</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nope&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token boolean">false</span>\n\n  <span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isAdult3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Zanim zostanie zwrócona wartość <code>true</code> lub <code>false</code> wykonujemy dodatkowy kod. Zauważcie, że w tym przypadku poszczególne linie kodu oddzielone są przecinkiem. Natomiast instrukcje po stronie lewej i prawe ujęte są dodatkowo w nawiasy okrągłe. Ostatnia wartość z takiego nawiasu jest zwrócona.</p><p>Tak wygląda ternary operator, często też nazywa po polsku skróconym ifem i może to sugeruje najlepsze użycie. Używajmy go, aby skrócić zapis instrukcji warunkowej <code>if else</code>. Niektóre zapisy bowiem mogą powodować dużą nieczytelność.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>ternary operator jest idealny, aby zapisać instrukcję <code>if else</code> w krótszej formie</li><li>ternary operator zwraca jedną z dwóch wartości</li><li>możemy łączyć wywoływanie ternary operatorów</li><li>ternary operator może wykonywać dodatkowy kod, zanim ostatecznie zwróci wartość</li></ul>',38),p={},t=(0,s(3744).Z)(p,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);