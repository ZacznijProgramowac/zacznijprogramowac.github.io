"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[1023],{4576:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-3dd8295d",path:"/obiekty/poruszanie-sie-po-obiektach/",title:"Poruszanie się po obiektach JavaScript",lang:"pl-PL",frontmatter:{permalink:"/obiekty/poruszanie-sie-po-obiektach"},excerpt:"",headers:[{level:2,title:"Pobieranie kluczy obiektu przez Objec.keys",slug:"pobieranie-kluczy-obiektu-przez-objec-keys",children:[]},{level:2,title:"Pobieranie wartości obiektu przez Object.values",slug:"pobieranie-wartosci-obiektu-przez-object-values",children:[]},{level:2,title:"Pobieranie właściwości przez Object.entires",slug:"pobieranie-własciwosci-przez-object-entires",children:[]},{level:2,title:"Pętla for...in",slug:"petla-for-in",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/05-poruszanie-sie-po-obiektach.md",git:{}}},4414:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="poruszanie-sie-po-obiektach-javascript" tabindex="-1"><a class="header-anchor" href="#poruszanie-sie-po-obiektach-javascript" aria-hidden="true">#</a> Poruszanie się po obiektach JavaScript</h1><p>Zazwyczaj do danych w obiektach JavaScript dostajemy się przez kropkę czy też <em>bracket notation</em>. Działa to, gdy potrzebujemy dostać się do jednej konkretnej danej. Czasami jednak potrzebujemy pobrać wszystkie klucze, albo też wszystkie wartości, a czasami potrzebujemy iterować po całym obiekcie. Przed nami kilka sposobów na dostęp do właściwości obiektu w hurtowy sposób.</p><h2 id="pobieranie-kluczy-obiektu-przez-objec-keys" tabindex="-1"><a class="header-anchor" href="#pobieranie-kluczy-obiektu-przez-objec-keys" aria-hidden="true">#</a> Pobieranie kluczy obiektu przez Objec.keys</h2><p>Wiele z tych metod, które będziemy omawiać to metody dostępne przez obiekt <code>Object</code>. Pierwszą metodą jest <code>Object.keys</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  profession<span class="token operator">:</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;name&#39;, &#39;surname&#39;, &#39;profession&#39;, &#39;print ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Do metody <code>Object.keys</code> przekazujemy obiekt, metoda zwraca listę kluczy tego obiektu, które są enumerowane i są właściwością tego konkretnego obiektu. Tworząc aplikacje w JavaScript na pewno wielokrotnie będziecie sięgać po tą metodę. Wbrew pozorom lista kluczy obiektów w logice aplikacji przydaje się stosunkowo często.</p><p>Ponieważ <code>Object.keys</code> zwraca listę, możemy sobie w łatwy sposób iterować po właściwościach obiektu, używając jakiejkolwiek pętli lub metody z obiektu <code>Array</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W ten sposób wypiszemy do konsoli kolejne klucze obiektu.</p><p>Ponieważ <code>Object.keys</code> zwraca nam tablicę wszystkich kluczy obiektu, możemy w prosty sposób sprawdzić jak dużo właściwości ma obiekt:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Wystarczy na zwróconej tablicy przez <code>Object.keys</code> wywołać właściwość <code>length</code>.</p><p>Do tej metody możemy też przekazać zwykła tablicę:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;0&#39;, &#39;1&#39;, &#39;2&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W odpowiedzi dostajemy kolejne indeksy. Ponieważ tablice są tak naprawdę obiektami, to również mają klucze do których przypisane są wartości.</p><h2 id="pobieranie-wartosci-obiektu-przez-object-values" tabindex="-1"><a class="header-anchor" href="#pobieranie-wartosci-obiektu-przez-object-values" aria-hidden="true">#</a> Pobieranie wartości obiektu przez Object.values</h2><p>Metoda <code>Object.values</code> jest bardzo podobna do metody <code>Object.keys</code> z tą różnicą, że zwraca wszystkie wartości obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  profession<span class="token operator">:</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;John&quot;, &quot;Rambo&quot;, &quot;soldier&quot;, ƒ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Tak jak wcześniej była tworzona lista tylko kluczy, tak teraz jest tworzona lista tylko wartości. Gdy w obiekcie, znajduje się metoda, JavaScript wywołuje na takiej metodzie <code>toString()</code> i stara się ją zaprezentować jako wartość tekstową.</p><p>Przy tej metodzie także należy pamiętać, że możemy ją używać tylko dla pól danego obiektu. Czyli nie odczyta ona pól które pochodzą z dziedziczenia. Również metoda ta nie odczyta pól które nie są numerowalne. W naszym przypadku metoda tego obiektu mogła by mieć ustawioną konfigurację <code>enumerable</code> na <code>false</code> i pole to nie byłoby pobierane przez <code>Objec.values</code>.</p><h2 id="pobieranie-własciwosci-przez-object-entires" tabindex="-1"><a class="header-anchor" href="#pobieranie-własciwosci-przez-object-entires" aria-hidden="true">#</a> Pobieranie właściwości przez Object.entires</h2><p>Tym razem do dyspozycji mamy metodę, która pobiera zarówno klucze jak i wartości z pól obiektu. Metoda ta to <code>Object.entries</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n  profession<span class="token operator">:</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Struktura jaką zwraca ta metoda to zagnieżdżona tablica. Każda kolejna zagnieżdżona tablica reprezentuje parę klucz - wartość czyli jedno pole obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span> <span class="token string">&#39;surname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rambo&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span> <span class="token string">&#39;profession&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;soldier&#39;</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Nie jest to zbyt wygodna struktura do pracy, ale możemy wykorzystać <code>forEach</code> i dostać się do każdej zagnieżdżonej struktury:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>W ten sposób dostaniemy się do każdej tablicy i za pomocą indeksów możemy pobrać element <code>0</code>, który jest kluczem i element pierwszy, który jest wartością danego pola:</p><div class="language-jsname ext-jsname line-numbers-mode"><pre class="language-jsname"><code>  name\n  John\n  surname\n  Rambo\n  profession\n  soldier\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Można więc powiedzieć, że jest to połączenie dwóch poprzednich metod <code>Object.keys</code> oraz <code>Object.values</code>. I znowu, metoda ta działa tylko na pola zdefiniowane dokładnie w tym obiekcie i tylko na te pola, które są <code>enumerable</code>.</p><p>Również nie mamy gwarancji w jakiej kolejności będzie ułożona zwrócona tablica. Jeżeli zależy nam na kolejności, po otrzymaniu tablicy musimy ją jeszcze posortować.</p><h2 id="petla-for-in" tabindex="-1"><a class="header-anchor" href="#petla-for-in" aria-hidden="true">#</a> Pętla for...in</h2><p>Idealną pętlą do iterowania po obiektach jest pętla <code>for...in</code>. Pętla ta iteruje tylko po tych polach, które są <code>enumerable</code>, czyli tak samo jak wszystkie inne pętle i metody. Natomiast jej zaletą jest to, że potrafi także odczytać pola, które są dziedziczone po innym obiekcie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj5 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj5<span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">;</span>\nobj5<span class="token punctuation">.</span>profession <span class="token operator">=</span> <span class="token string">&#39;soldier&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj5<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj5<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Mamy tutaj przykład obiektu, który powstaje z za pomocą <code>Object.create</code>. Potem do obiektu tego dodaję jeszcze dwie właściwości. Jest to więc obiekt, który posiada jedno pole dziedziczone i dwa pola jako własne.</p><p>Pętla przy każdym obrocie pobiera kolejny klucz obiektu. Gdy mamy klucz to możemy dostać się do właściwości obiektu i wyświetlić każdą wartość:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  Rambo\n  soldier\n  John\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Widzimy, że metoda ta nie ma problemu z pobraniem wszystkich pól z obiektów. Również wyświetla dziedziczoną wartość z pola <code>name</code>.</p><p>Jeżeli nie chcemy wyświetlać wartości dziedziczonych, możemy zastosować metodę <code>hasOwnProperty</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj5<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj5<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj5<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rambo ; soldier</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Metodę <code>hasOnwProperty()</code> wywołujemy bezpośrednio na obiekcie i za każdym razem przesyłamy do niej kolejny klucz z pętli. Metoda zwraca <code>true</code> jeżeli klucz należy do tego obiektu. Czyli został zdefiniowany w tym obiekcie i nie został odziedziczony. W tym przypadku pętla wyświetla już tylko dwie wartości.</p><p>Pętla <code>for...in</code> jest generalnie używana tylko do obiektów. Ma małą przydatność dla tablic. Nie zaleca się także modyfikować i usuwać elementów innych niż obecnie odwiedzany przez pętle element. Pętla iteruje po właściwościach obiektu w dowolnej kolejności. Dlatego nie możemy zakładać, że zmodyfikujemy pole obiektu, które będzie odwiedzone później i będziemy mogli jeszcze w czasie iteracji skorzystać ze zmodyfikowanego elementu.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>za pomocą <code>Object.keys</code> pobierzemy wszystkie klucze z obiektu</li><li>za pomocą <code>Object.values</code> pobierzemy wszystkie wartości z obiektu</li><li>za pomocą <code>Object.entries</code> pobierzemy zarówno klucze jak i wartości obiektu</li><li>pętla <code>for...in</code> idealnie nadaje się do iterowania po właściwościach obiektu, również tych odziedziczonych</li><li>tablice to też obiekty, wiele metod pochodzących z <code>Object</code> działa też na tablice</li></ul>',44),o={},t=(0,s(3744).Z)(o,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);