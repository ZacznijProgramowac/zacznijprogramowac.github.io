"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[9875],{658:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-0de63815",path:"/tablice/reduce/",title:"Metoda reduce i reduceRight",lang:"pl-PL",frontmatter:{permalink:"/tablice/reduce"},excerpt:"",headers:[{level:2,title:"Używanie reduce",slug:"uzywanie-reduce",children:[]},{level:2,title:"Reduce bez inicjalizacyjnej wartości",slug:"reduce-bez-inicjalizacyjnej-wartosci",children:[]},{level:2,title:"Tworzenie innych wartości",slug:"tworzenie-innych-wartosci",children:[]},{level:2,title:"Metoda reduceRight",slug:"metoda-reduceright",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/06-reduce.md",git:{}}},9254:(a,n,s)=>{s.r(n),s.d(n,{default:()=>c});const e=(0,s(6252).uE)('<h1 id="metoda-reduce-i-reduceright" tabindex="-1"><a class="header-anchor" href="#metoda-reduce-i-reduceright" aria-hidden="true">#</a> Metoda reduce i reduceRight</h1><p>Jedną z metod, która spędza sen z powiek programistów JavaScript jest metoda <code>reduce</code>. Nie jest ona zbyt intuicyjna i sam często poszukuję idealnego rozwiązania w Internecie lub dokumentacji. Często też o tą metodę pada pytanie na rozmowie o pracę.</p><p>Metody <code>forEach</code> jest do iterowania po tablicy, metody <code>map</code> do tworzenia nowych tablic ze zmienionymi wartościami. Metoda <code>reduce</code> pozwala nam zredukować wartości tablicy do jednej wartości. Na przykład wykonać sumowanie wszystkich elementów. Możemy też przekształcić listę obiektów do listy z pojedynczymi obiektami lub podobnie jak metoda <code>flat</code> spłaszczyć zagnieżdżone listy.</p><h2 id="uzywanie-reduce" tabindex="-1"><a class="header-anchor" href="#uzywanie-reduce" aria-hidden="true">#</a> Używanie reduce</h2><p>Aby użyć metody <code>reduce</code> musimy przygotować <code>reducer</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Jest to oczywiście zwykła funkcja callback. Ta funkcja będzie otrzymywała dwa parametry. Pierwszy parametr to zawsze jakiś <code>accumulator</code> . Drugim parametrem będzie zawsze <code>currentValue</code> czyli aktualna wartość w danej iteracji. To co robi ta funkcja to dodaje <code>accumulator</code> do <code>currentValue</code> i zwraca tą wartość. W ten sposób tworzymy sumę wszystkich elementów. I tak w kółko, aż przejdzie przez każdą wartość w tablicy. Zwracana wartość z funkcji jest używana w kolejnej iteracji jako <code>accumulator</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 600</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Użyjmy teraz naszego <code>reducera</code>. Mamy przygotowaną tablicę na której wywołujemy metodę <code>reduce</code>. Jako pierwszy parametr, przekazujemy przygotowaną funkcję <code>callback</code> czyli nasz <code>reducer</code> jako drugi parametr przekazujemy wartość inicjalizacyjną. Ta wartość inicjalizacyjna jest właśnie pierwszą wartością dla <code>accumulatora</code>, a <code>currentValue</code> to kolejne wartości z tablicy.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 0 100</span>\n<span class="token comment">// 100 200</span>\n<span class="token comment">// 300 300</span>\n<span class="token comment">// 600</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Przy pierwszym obrocie w funkcji <code>reducer</code> pojawia się wartość 0 i 100. Po dodaniu wartości funkcja zwraca wartość 100. W następnym obrocie pojawia się wartość 100 i 200. Czyli ostatnia wartość zwrócona i kolejna z tablicy. Funkcja zwraca 300. Funkcja znowu zostaje wywołana ostatni raz i pojawia się w niej wartość 300, czyli ta ostatnio zwrócona i ostatnia wartość z tablicy też 300. Ostatecznie funkcja zwraca wartość 600.</p><p>I tak w najprostszym przykładzie działa metoda <code>reduce</code>. Do <code>accumulatora</code> ciągle dodaje kolejne wartości tablicy. Przy pierwszym wywołaniu <code>accumulatorem</code> jest wartość inicjalizacyjna przekazana jako parametr. A potem <code>accumulatorem</code> jest to co zwraca funkcja <code>callback</code> po każdym wywołaniu.</p><h2 id="reduce-bez-inicjalizacyjnej-wartosci" tabindex="-1"><a class="header-anchor" href="#reduce-bez-inicjalizacyjnej-wartosci" aria-hidden="true">#</a> Reduce bez inicjalizacyjnej wartości</h2><p>Możliwe jest też wywołanie metody <code>reduce</code> bez inicjalizacyjnej wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer1<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 600</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>W tym przypadku, gdy do metody <code>reduce</code>, nie podajemy wartości inicjalizacyjnej, a tylko funkcję <code>callback</code>, pierwszą wartością inicjalizacyjną stanie się pierwsza wartość z tablicy. Dlatego metoda <code>reduce</code> zacznie iterować od drugiego elementu tablicy.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 100 200</span>\n<span class="token comment">// 300 300</span>\n<span class="token comment">// 600</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Z tego powodu w funkcji <code>callback</code> od razu pojawią się dwie pierwsze wartości z tablicy. Ich suma zostanie zwrócona i ponownie przekazana do funkcji <code>callback</code> z ostatnią trzecią wartością. Ostatecznie zwrócona zostanie wartość <code>600</code>.</p><p>Czasami jednak musimy przekazać wartość inicjalizacyjną:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> current<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W tym przypadku mamy tablicę z obiektami. Jeżeli chcemy teraz wykonać sumę z pól obiektów, musimy przekazać wartość inicjalizacyjną. Inaczej funkcja <code>reduce</code> spróbuję użyć pierwszego elementu z tablicy, a nim będzie obiekt. Bez wartości inicjalizacyjnej, próbowała by dodać obiekt do wartości z pola <code>a</code>. Dlatego w tym przypadku wartość inicjalizacyjna jest niezbędna.</p><h2 id="tworzenie-innych-wartosci" tabindex="-1"><a class="header-anchor" href="#tworzenie-innych-wartosci" aria-hidden="true">#</a> Tworzenie innych wartości</h2><p>Metoda <code>reduce</code> zwraca zawsze jedną wartość, ale nie musi być to jedna wartość prymitywna, może być to lista wartości czy też obiekt.</p><p>Kolejny przykład to spłaszczenie listy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> flatted <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flatted<span class="token punctuation">)</span> <span class="token comment">// [ 0, 1, 2, 3 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Mamy tutaj strukturę tablicy z innymi tablicami. Za pomocą metody <code>reduce</code> możemy spłaszczyć tą strukturę. W funkcji <code>callback</code> na <code>accumulatorze</code> wywołujemy metodę <code>concat</code> do łączenia tablic i za każdym wywołaniem łączymy pojawiające się zagnieżdżone tablice. Tym sposobem otrzymujemy płaską tablicę.</p><p>Kolejny przykład to przetworzenie listy obiektów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Max&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> names <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> acc<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;Alice&#39;, &#39;Max&#39;, &#39;Jane&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>W tym przykładzie mamy listę z obiektami. Chcemy stworzyć sobie listę tylko z imionami, które pochodzą z tych obiektów. Zauważcie, że funkcja <code>callback</code> przekazana do metody <code>reduce</code> została rozpisana z instrukcją <code>return</code>. Ponieważ nie mogę zwrócić bezpośrednio wywołania metody <code>push</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Gdybym zastosował taki zapis, <code>arrow function</code> zwróciła by to co zwraca metoda <code>push</code>, a metoda <code>push</code> zwraca nową długość tablicy. My natomiast musimy zawsze zwrócić kolejną wartość dla <code>accumulatora</code>. Czyli w naszym przypadku tablicę, do której w każdej iteracji dodajemy wartości z pola <code>name</code>.</p><p>Metoda <code>reduce</code> rozłożona na czynniki pierwsze nie wydaje się aż tak skomplikowana. Ma jednak sporo niuansów i bez praktyki, ciężko będzie nam opanować jej działani e.</p><p>Metoda <code>reduce</code> może się przydać do redukowania listy do jednej wartości takiej jak suma wartości, średnia wartości, największa albo najmniejsza. Możemy też manipulować strukturami i upraszczać struktury lub nawet tworzyć bardziej skomplikowane.</p><h2 id="metoda-reduceright" tabindex="-1"><a class="header-anchor" href="#metoda-reduceright" aria-hidden="true">#</a> Metoda reduceRight</h2><p>Na koniec szybkie spojrzenie na metodę <code>reduceRight</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">-</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Metoda <code>reduceRight</code> robi dokładnie to samo co metoda <code>reduce</code> jednak zaczyna przetwarzać tablicę od prawej strony, czyli od jej końca. Czasami przy specyficznych sytuacjach, może nam się przydać. Nie jest ona jednak zbyt często używana, a sam nigdy nie miałem okazji. To samo możemy osiągnąć używając metody <code>reverse</code> i zwykłego <code>reduce</code>.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>metoda <code>reduce</code> opiera się na funkcji <code>callback</code>, której parametrem jest jakiś akumulator oraz obecnie przetwarzana wartość z tablicy</li><li>za pomocą <code>reduce</code> możemy przetworzyć tablicę do jednej wartości</li><li><code>reduce</code> można też użyć to przetwarzania struktur danych na inne struktury</li><li>inicjalizacyjna wartość metody <code>reduce</code> w niektórych przypadkach może być pomijana</li><li>metodę <code>reduce</code> warto po praktykować jeżeli mamy z nią styczność pierwszy raz</li></ul>',39),t={},c=(0,s(3744).Z)(t,[["render",function(a,n){return e}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);