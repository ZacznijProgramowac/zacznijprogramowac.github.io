"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[3312],{6978:(a,e,s)=>{s.r(e),s.d(e,{data:()=>n});const n={key:"v-99f9e132",path:"/slowniczek-javascript/co-to-jest-use-strict/",title:"Co to jest use strict / strict mode w JavaScript?",lang:"pl-PL",frontmatter:{permalink:"/slowniczek-javascript/co-to-jest-use-strict/"},excerpt:"",headers:[],filePathRelative:"slowniczek-javascript/09-co-to-jest-use-strict.md",git:{}}},7497:(a,e,s)=>{s.r(e),s.d(e,{default:()=>y});var n=s(6252);const t=(0,n.uE)('<h1 id="co-to-jest-use-strict-strict-mode-w-javascript" tabindex="-1"><a class="header-anchor" href="#co-to-jest-use-strict-strict-mode-w-javascript" aria-hidden="true">#</a> Co to jest use strict / strict mode w JavaScript?</h1><p><em>Strict mode</em> czyli tak zwany tryb ścisły, został wprowadzony do JavaScript w ESCMAScript 5. Tryb ten nie jest domyślny i aby go włączyć, należy użyć polecenia <code>use strict</code>. Ponieważ JavaScript musi zachowywać kompatybilność ze wcześniejszymi wersjami, tryb ten jest opcjonalny. Gdyby zmiany, które wprowadza tryb ścisły, byłyby wprowadzone do języka bezpośrednio, wiele stron internetowych mogłoby przestać działać.</p><p>Zadaniem <em>strict mode</em> jest poprawa wielu problemów i ukrytych błędów JavaScript, które są zaimplementowane w tym języku. Tryb ten pozwala unikać błędów, poprawia bezpieczeństwo kodu, poprawia wydajność i trochę go unowocześnia:</p><ul><li><p>tryb ścisły eliminuje tak zwane ciche błędy poprzez ich widoczną sygnalizację. Na przykład mogliśmy stworzyć zmienną bez użycie deklaracji jak <code>var, let, const</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>myVariable <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>bez trybu ścisłego możemy przypisać wartość do <code>undefined</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>możemy też tworzyć funkcje z takimi samymi nazwami parametrów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Taki kod bez trybu ścisłego w JavaScript jest poprawny. W trybie ścisłym dostaniemy konkretne informacje o błędach i nasz kod będzie musiał być naprawiony. W JavaScript jest bardzo dużo tak dziwnych problemów, które tryb ścisły wyklucza.</p></li><li><p>dzięki trybowi ścisłemu kod może być lepiej optymalizowany przez przeglądarki, poprawia to wydajność</p></li><li><p>tryb ścisły wprowadza także zabronione słowa kluczowe dla przyszłych wersji języka na przykład nie możemy użyć <code>interface, package, private</code> jako nazwy zmiennych.</p></li><li><p>kod w trybie ścisłym jest bezpieczniejszy</p></li><li><p>tryb ścisły poprawia czytelność kodu, sygnalizację błędów, usprawnia podstawowe mechanizmy JavaScript. W skrócie poprawia błędy języka JavaScript, które powstały w czasie jego implementacji.</p></li></ul>',4),i=(0,n.Uk)("Ponieważ lista rzeczy, które poprawia "),o=(0,n._)("em",null,"strict mode",-1),p=(0,n.Uk)(" jest bardzo długa, muszę Was odesłać do "),c={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"},r=(0,n.Uk)("dokumentacji"),l=(0,n.Uk)(" lub mojego kursu JavaScript. Tutaj chciałem tylko omówić, czym jest tryb ścisły."),d=(0,n.uE)('<p>Żeby go włączyć, na początku kodu wystarczy użyć deklaracji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Możliwe jest użycie także tylko dla funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Może się przydać, gdy pracujemy w bardzo starym kodzie i nie chcemy włączać trybu ścisłego dla całego kodu, ale tylko dla tej nowej części, którą musimy dopisać.</p><p>W ES6 pojawiły się klasy i moduły, które domyślnie pracują w trybie ścisłym. Także każdy współczesny framework pracuje w trybie ścisłym. Zazwyczaj więc nie musisz się martwić i dopisywać deklaracji <code>use strict</code> do frameworka jak Angular, React czy Vue.</p><p>Jeżeli jednak będziesz pisał kod bez modułów, klas i frameworka, czyli czysty JavaScript, zadbaj oto, aby pojawiła się deklaracja <code>use strict</code> na początku Twojego skryptu.</p><p>Należy też pamiętać, że bardzo stare wersje przeglądarek jak IE9 mogą nie obsługiwać tego trybu. Współcześnie ten problem nie powinien nas jednak spotkać. Teoretycznie jednak taka sytuacja może się zdarzyć i nasz kod będzie po prostu pracował jak dawniej bez trybu ścisłego.</p>',8),u={},y=(0,s(3744).Z)(u,[["render",function(a,e){const s=(0,n.up)("OutboundLink"),u=(0,n.up)("Comments");return(0,n.wg)(),(0,n.iD)(n.HY,null,[t,(0,n._)("p",null,[i,o,p,(0,n._)("a",c,[r,(0,n.Wm)(s)]),l]),d,(0,n.Wm)(u)],64)}]])},3744:(a,e)=>{e.Z=(a,e)=>{for(const[s,n]of e)a[s]=n;return a}}}]);