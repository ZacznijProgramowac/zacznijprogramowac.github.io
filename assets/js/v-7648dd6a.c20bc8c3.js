"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[9274],{4942:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-7648dd6a",path:"/this/zagubiony-this/",title:"Bindowanie zgubionego this",lang:"pl-PL",frontmatter:{permalink:"/this/zagubiony-this"},excerpt:"",headers:[{level:2,title:"This w eventach obiektów DOM",slug:"this-w-eventach-obiektow-dom",children:[]},{level:2,title:"Przechwycenie this",slug:"przechwycenie-this",children:[]},{level:2,title:"Bindowanie this",slug:"bindowanie-this",children:[]},{level:2,title:"Użycie arrow function",slug:"uzycie-arrow-function",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"this/04-zagubiony-this.md",git:{}}},6445:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(6252);const t=(0,e.uE)('<h1 id="bindowanie-zgubionego-this" tabindex="-1"><a class="header-anchor" href="#bindowanie-zgubionego-this" aria-hidden="true">#</a> Bindowanie zgubionego this</h1><p>Wiemy już trochę o wskaźniku <code>this</code> w JavaScript. Wiemy, że służy on przede wszystkim dla kontekstu funkcji, na którym funkcja będzie pracować. Wiemy też, że w przypadku zwykłych funkcji, <code>this</code> bierze się ze sposobu wywołania, w przypadku arrow function, <code>this</code> zapożyczone jest z kontekstu otaczającego.</p><p>Jednym z problemów <code>this</code> w aplikacjach JavaScript, jest zgubienie <code>this</code>. Przed nami kilka przykładów, jak sobie z tym poradzić.</p><h2 id="this-w-eventach-obiektow-dom" tabindex="-1"><a class="header-anchor" href="#this-w-eventach-obiektow-dom" aria-hidden="true">#</a> This w eventach obiektów DOM</h2><p>Ten przykład, który teraz sobie przeanalizujemy jest jednym z najbardziej znanych przykładów zgubionego <code>this</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clicker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">initClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// button</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nclicker<span class="token punctuation">.</span><span class="token function">initClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>W pliku HTML mam zamieszczony przycisk, który pobieram za pomocą metody <code>getElementById</code>. Zmienna <code>button</code> reprezentująca przycisk jest zwykłym obiektem JavaScript. Mam także stworzony obiekt, który posiada pole <code>text</code> z informacją do wyświetlenia. Jest także metoda <code>initClick</code>, której zadaniem jest na obiekcie <code>button</code> wywołać metodę <code>addEventlistener</code>. Jest to specjalna metoda z obiektu button, która pozwoli nam nadsłuchiwać określonego zdarzenia.</p><p>Do metody <code>addEventListener</code> musimy przekazać nazwę eventu, na jaki chcemy nadsłuchiwać, oraz funkcję <code>callback</code>. W funkcji tej tworzymy kod, który ma się wykonać w chwili kliknięcia. Z naszego kodu wynika, że chcemy wypisać pole <code>text</code> z obiektu, a także wypisać aktualne <code>this</code>.</p><p>Po inicjalizacji naszego <em>clickera</em> możemy klikać w przycisk i zobaczymy, że taki kod nie zadziała. Zamiast tekstu otrzymujemy wartość <code>undefined</code> oraz obiekt <code>button</code>.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>undefined\nbutton<span class="token comment">#btn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Kontekst <code>this</code> do którego próbujemy się odwołać w naszej funkcji <code>callback</code> nie jest naszym obiektem, a obiektem <code>button</code>. W obiekcie <code>button</code> nie ma takiego pola jak <code>text</code>.</p><p>Funkcja <code>callback</code>, którą przekazaliśmy, nie działa na kontekście naszego obiektu, a działa na kontekście elementu <code>button</code>. Następuje tutaj dynamiczne dowiązanie <code>this</code> do naszej funkcji. W takich eventach jak ten, <code>this</code> zawsze nawiązuje do obiektu, który wytworzył ten event. Oczywiście możemy to zmienić i jest na to kilka sposobów.</p><h2 id="przechwycenie-this" tabindex="-1"><a class="header-anchor" href="#przechwycenie-this" aria-hidden="true">#</a> Przechwycenie this</h2><p>Jednym ze sposobów poradzenia sobie ze zgubionym <code>this</code> jest przechwycenie <code>this</code> do zmiennej:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clicker2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">initClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    button2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nclicker2<span class="token punctuation">.</span><span class="token function">initClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Jest to ten sam kod, który przed chwilą analizowaliśmy, ale w wersji drugiej. W tej wersji w metodzie <code>initClick</code> tworzę zmienną <code>self</code>, której zadaniem jest przypisanie <code>this</code>. Metoda <code>initClick</code> będzie wywoływana na obiekcie <code>clicker2</code>. Więc <code>this</code> w tej metodzie będzie tym obiektem.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>Hello\nbutton<span class="token comment">#btn2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W funkcji <code>callback</code>, mogę się teraz odwołać do zmiennej <code>self</code>, a potem do pola <code>text</code>. Nie posługuję się już kontekstem <code>this</code>, który wciąż jest obiektem <code>button2</code>. Korzystamy tutaj z tego, że funkcje zagnieżdżone mają dostęp do zewnętrznych zakresów funkcji, które je otaczają, czyli tak zwanych domknięć. Możemy więc przypisać <code>this</code> do zmiennej i wykorzystać właśnie w taki sposób.</p><p>To rozwiązanie jest o tyle ciekawe, że wewnątrz naszej funkcji <code>callback</code> mamy dostęp do naszego obiektu przez zmienną <code>self</code> jak też dostęp do obiektu <code>button2</code> przez <code>this</code>.</p><h2 id="bindowanie-this" tabindex="-1"><a class="header-anchor" href="#bindowanie-this" aria-hidden="true">#</a> Bindowanie this</h2><p>Bidnowanie do funkcji, to kolejny sposób na zgubiony <code>this</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clicker3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">initClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    button3<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span>\n      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// clicker3</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nclicker3<span class="token punctuation">.</span><span class="token function">initClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>W tej wersji funkcję <code>callback</code> otoczyliśmy dodatkowo nawiasami okrągłymi i wywołaliśmy na tej funkcji metodę <code>bind</code> do której przekazaliśmy <code>this</code>. Ten <code>this</code>, który przekazujemy w taki dziwny sposób pochodzi z funkcji <code>initClick</code>, a że została ona wywołana na obiekcie <code>clicker3</code> to od teraz nasza funkcja <code>callback</code> będzie pracowała na tym właśnie obiekcie.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>Hello\n<span class="token punctuation">{</span>text: <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> initClick: ƒ<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Zamiast <code>bind(this)</code> możemy też wpisać <code>bind(clicker3)</code> i odwołać się przez nazwę obiektu. Odwoływanie się przez nazwę nie jest jednak tak elastyczne. Warto jeszcze zwrócić uwagę, że funkcja <code>callback</code> od teraz pracuje tylko na <code>this</code> naszego obiektu.</p><p>Wcześniej <code>this</code> w tej funkcji wciąż odnosił się do obiektu <code>button</code>. Zmieniliśmy więc zupełnie kontekst tej funkcji, i jeśli przez <code>this</code> chcieliśmy się dodatkowo odnosić do obiektu <code>button</code> to już nie możemy. Ewentualnie możemy po prostu użyć zmiennej <code>button3</code>.</p><p>Metoda <code>bind</code> nie bierze się znikąd. W <code>Function.prototype</code> istnieją takie metody jak <code>bidn</code>, <code>call</code>, <code>applay</code>, do których jeszcze wrócimy. Metodę <code>bind</code> wywołaną na końcu funkcji możecie dość często spotkać w kodzie JavaScript.</p><h2 id="uzycie-arrow-function" tabindex="-1"><a class="header-anchor" href="#uzycie-arrow-function" aria-hidden="true">#</a> Użycie arrow function</h2><p>Ostatni sposób, jaki zobaczymy to dzisiaj najczęściej wykorzystywany sposób na problem zgubionego <code>this</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clicker4 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">initClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    button4<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nclicker4<span class="token punctuation">.</span><span class="token function">initClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>W tej czwartej wersji implementacji, zamiast zwykłej funkcji jako <code>callback</code> przekazujemy funkcję strzałkową i od razu wszystko działa, jak zaplanowaliśmy. Dzięki temu, że <em>arrow function</em> nie ma swojego <code>this</code>, jest on dziedziczony z funkcji nadrzędnej, a tą funkcją jest <code>initClick</code>. Ponieważ <code>initClick</code> jest wywołany na obiekcie <code>clicker4</code> to jest to <code>this</code> tego obiektu. Działanie jest identyczne, jak użycie <code>bind</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Hello\n<span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> initClick\n<span class="token operator">:</span>\n  ƒ\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Tutaj także musimy zwrócić uwagę, że <code>this</code> w funkcji strzałkowej nie jest już obiektem <code>button</code>. Jeżeli więc chcemy odnieść się jakoś do obiektu <code>button</code> wewnątrz tej funkcji, musimy użyć zmiennej <code>button4</code>.</p><p>Przy tego typu implementacjach to właśnie funkcje strzałkowe wydają się najlepszym rozwiązaniem. Ich zapis jest zwięzły i zazwyczaj dziedziczą ten kontekst <code>this</code>, który oczekujemy. Dlatego we współczesnym kodzie JavaScript wszędzie tam gdzie trzeba obsługiwać jakiś event i przekazać funkcję <code>callback</code>, <em>arrow function</em> są najczęściej spotykane.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>w eventach obiektów DOM <code>this</code> jest obiektem, który wytworzył dany event</li><li>jednym ze sposobów na zagubiony <code>this</code> jest przypisanie go do zmiennej</li><li>metoda <code>bind</code> binduje funkcję do konkretnego obiektu, który staje się kontekstem <code>this</code></li><li>dzisiaj <em>arrow function</em> to najnowocześniejsze podejście do opanowania sytuacji ze zgubionym <code>this</code></li></ul>',36),o={},c=(0,s(3744).Z)(o,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);