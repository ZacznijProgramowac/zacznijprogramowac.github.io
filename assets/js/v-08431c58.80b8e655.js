"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8246],{5214:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-08431c58",path:"/operatory-logiczne/operatory-porownania/",title:"Operatory porównania",lang:"pl-PL",frontmatter:{permalink:"/operatory-logiczne/operatory-porownania"},excerpt:"",headers:[{level:2,title:"Operatory równości i nierówności == i !=",slug:"operatory-rownosci-i-nierownosci-i",children:[]},{level:2,title:"Operatory równości i nierówności === i !==",slug:"operatory-rownosci-i-nierownosci-i-1",children:[]},{level:2,title:"Operator większy > i mniejszy <",slug:"operator-wiekszy-i-mniejszy",children:[{level:3,title:"Porównanie stringów",slug:"porownanie-stringow",children:[]}]},{level:2,title:"Operator większy i równy >= oraz mniejszy i równy <=",slug:"operator-wiekszy-i-rowny-oraz-mniejszy-i-rowny",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"operatory-logiczne/01-operatory-porownania.md",git:{}}},6833:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});var e=s(6252);const o=(0,e.uE)('<h1 id="operatory-porownania" tabindex="-1"><a class="header-anchor" href="#operatory-porownania" aria-hidden="true">#</a> Operatory porównania</h1><p>Ten dział poświęcony jest operatorom porównania. Operatory porównania, po porównaniu wartości zawsze zwracają nam wartości <code>boolean</code>. W języku JavaScript mamy w miarę standardowe operatory porównania:</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>== Equality operator\n<span class="token operator">!</span>= Inequality operator\n=== Identity operator\n<span class="token operator">!</span>== Nonidentity operator\n&gt; Greater than operator\n&lt; Less than operator\n&gt;= Greater than or equal operator\n&lt;= Less than or equal operator\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Większość tych operatorów zobaczycie także w innych językach programowania. W większości języków mogą działać podobnie, ale mamy do czynienia z JavaScript i zawsze czają się jakieś niuanse. Na szczególną uwagę na pewno zasługuje podwójny operator porównania i nierówności.</p><p>Przeanalizujemy więc sobie wszystkie operatory oraz te niuanse.</p><h2 id="operatory-rownosci-i-nierownosci-i" tabindex="-1"><a class="header-anchor" href="#operatory-rownosci-i-nierownosci-i" aria-hidden="true">#</a> Operatory równości i nierówności <code>==</code> i <code>!=</code></h2><p>O operatorze równości, który jest reprezentowany przez dwa znaki, mówiliśmy już kilka razy. Porównuje on wartości, dokonując niejawnej konwersji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Wyniki tych porównań nie są dla nas oczywiste ani intuicyjne. Bez wspomagania się specyfikacją czy specjalną tabelką, która została stworzona przez użytkownika <code>Dorey</code> na Githubie ciężko zorientować się, jaki wynik otrzymamy https://dorey.github.io/JavaScript-Equality-Table/</p><p>To samo dotyczy sprawdzenia nierówności za pomocą operatora dwuznakowego <code>!=</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Wyniki ze sprawdzenia nierówności w taki sposób również nie są oczywiste i logiczne. Tu również zachodzą niejawne konwersje do różnych typów i dopiero potem następuje porównanie.</p><p>Dobra rada dla programistów JavaScript to unikanie operatorów dwuznakowych do porównywania i sprawdzania nierówności.</p><h2 id="operatory-rownosci-i-nierownosci-i-1" tabindex="-1"><a class="header-anchor" href="#operatory-rownosci-i-nierownosci-i-1" aria-hidden="true">#</a> Operatory równości i nierówności <code>===</code> i <code>!==</code></h2><p>Operator równości i nierówności z trzema znakami to dzisiaj standard porównania dwóch wartości w JavaScript. Działa on bardzo dokładnie i transparentnie.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Jego zadaniem jest sprawdzenie, czy wartości mają ten sam typ, jeżeli tak to następuje porównanie wartości i zwrócenie <code>true</code> lub <code>false</code>. Jeżeli typy są różne, od razu dostajemy wynik <code>false</code> bez sprawdzania już wartości.</p><p>Również operator nierówności działa tak samo:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Najpierw sprawdza, czy próbujemy porównać te same typy. Jeżeli typy są różne, to zwracane jest <code>true</code> ponieważ już wiadomo, że różne typy mają różne wartości. Jeżeli typy są takie same, porównuje jeszcze wartości.</p><p>Operator równości i nierówności reprezentowane przez trzy znaki to operatory, które na co dzień będziecie używać w JavaScript. Działanie tych operatorów jest proste i intuicyjne, bo nie zachodzą tutaj żadne konwersje.</p><h2 id="operator-wiekszy-i-mniejszy" tabindex="-1"><a class="header-anchor" href="#operator-wiekszy-i-mniejszy" aria-hidden="true">#</a> Operator większy <code>&gt;</code> i mniejszy <code>&lt;</code></h2><p>Operator większości w JavaScript działa tak samo, jak w matematyce:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jeżeli lewa strona jest większa otrzymujemy wartość <code>true</code> w innym wypadku wartość <code>false</code>.</p><p>Operator mniejszości działa w drugą stronę sprawdzając, czy lewa strona jest mniejsza:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Wszystko jest bardzo proste i oczywiste, gdy pracujemy na liczbach. Zobaczmy co się dzieje, gdy używamy różnych typów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jeżeli używamy różnych typów, JavaScript próbuje wartości sprowadzić do typu <code>number</code> . Dlatego udaje nam się porównać liczbę <code>&#39;100&#39;</code> zapisaną jako string z liczbą 1. Nastąpi konwersja <code>string</code> do <code>number</code>, a potem nastąpi porównanie.</p><p>Również udaje nam się porównać wartości <code>true</code> i <code>false</code> ponieważ to są wartości, które konwertują się na typ <code>number</code>.</p><p>Zobaczmy jednak ciekawsze przykłady:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W tym przykładzie próbujemy sprawdzić, czy <code>1</code> jest większe od losowej wartości tekstowej. String, który nie reprezentuje liczby w żaden sposób, zostanie przekonwertowany na wartość <code>NaN</code>.</p><p>Wartość <code>NaN</code> ani nie jest większa od liczby, ani nie jest mniejsza od żadnej liczby:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Nie da się porównać wartości <code>NaN</code> z liczbami, pomimo że jest typu <code>number</code>. Każde porównanie zwróci <code>false</code>.</p><p>Samo <code>undefined</code> konwertowane do liczby także zwraca <code>NaN</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Porównanie <code>undefined</code> z jakąś wartością liczbową zawsze będzie zwracała wartość <code>false</code> w każdym wariancie.</p><p>Inaczej jest z wartością <code>null</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Wartość <code>null</code> konwertowana do <code>number</code> zwraca wartość <code>0</code> dlatego jest możliwe porównanie z liczbą. W przypadku sprawdzenia, czy 1 jest większe od <code>null</code> otrzymamy wartość <code>true</code>.</p><p>Tak więc gdy używamy dwóch różnych typów, następuje próba sprowadzenia ich do typu <code>number</code> i trzeba mieć to na uwadze.</p><h3 id="porownanie-stringow" tabindex="-1"><a class="header-anchor" href="#porownanie-stringow" aria-hidden="true">#</a> Porównanie stringów</h3><p>Inaczej jest, gdy próbujemy porównać dwie wartości o typie <code>string</code>, nie zachodzi tutaj żadna konwersja do typu <code>number</code>, a porównanie ciągów tekstowych:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AB&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Przy takim porównaniu pod uwagę brany jest każdy znak, a nie długość ciągów tekstowy. Porównany jest nie tyle znak co jego wartość w tablicy Unicode.</p><p>W pierwszym przypadku literka <code>a</code> ma numer kodowy <code>97</code> natomiast duża litera <code>A</code> ma numer kodowy <code>65</code>, dlatego wbrew intuicji otrzymujemy wartość <code>true</code>. Czyli mała literka jest większa od dużej.</p><p>W drugim przypadku gdzie porównujemy ciąg z dwóch znaków, do ciągu z jednym znakiem okazuje się, że ciąg znaków <code>AB</code> wcale nie jest większy niż jedna litera <code>a</code>. Duża litera <code>A</code> ma mniejszy numer kodowy niż mała litera <code>a</code> dlatego od razu zwracany jest wynik <code>false</code>, a dalsze porównanie nie następuje.</p><p>Takich porównań na wartościach <code>string</code> raczej nie będziecie używać lub nie powinniście. Przy porównaniach większe i mniejsze najbezpieczniejszą opcją jest praca na wartościach typu <code>number</code>.</p><h2 id="operator-wiekszy-i-rowny-oraz-mniejszy-i-rowny" tabindex="-1"><a class="header-anchor" href="#operator-wiekszy-i-rowny-oraz-mniejszy-i-rowny" aria-hidden="true">#</a> Operator większy i równy <code>&gt;=</code> oraz mniejszy i równy <code>&lt;=</code></h2><p>Operatory większy i równy oraz mniejszy i równy podlegają tym samym zasadom co operator większy i mniejszy.</p><p>Oprócz tego, że dodatkowo sprawdzają możliwą równość.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;blabla&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Jeżeli jakaś strona jest inna niż typ <code>number</code> następuje konwersja.</p><p>Jeżeli są to stringi, następuje porównanie ciągów znakowych według tabeli Unicode i tych samych zasad co omówiliśmy.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AB&#39;</span> <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Pomimo tego, że przy operatorach większy i mniejszy, także następują niejawne konwersje, nie są one tak straszne jak przy podwójnym operatorze sprawdzania równości. Warto jednak te operatory pozostawić do pracy z liczbami, ponieważ praca na typie <code>string</code> nie jest zbyt czytelna i intuicyjna.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>dwuznakowy operator równości dokonuje niejawnych konwersji przed porównaniem i jego wyniki nie są oczywiste</li><li>operator porównania z trzema znakami sprawdza typ i wartość, jest to bezpieczna i najlepsza forma porównania</li><li>operatory większości i mniejszości pracują na typie <code>number</code> jeżeli nie dostarczamy typu <code>number</code> następuje konwersja do takiego typu</li><li>jeżeli do operatorów większości i mniejszości podstawimy stringi nastąpi próba porównywania stringów według kodów Unicode</li></ul>',61),p={},t=(0,s(3744).Z)(p,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);