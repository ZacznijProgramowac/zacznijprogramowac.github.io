"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[1392],{6343:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-0d600273",path:"/tablice/lancuch-prototypow/",title:"Porównanie tablic",lang:"pl-PL",frontmatter:{permalink:"/tablice/lancuch-prototypow"},excerpt:"",headers:[{level:2,title:"Porównanie referencji tablic",slug:"porownanie-referencji-tablic",children:[]},{level:2,title:"Porównanie wartości tablic",slug:"porownanie-wartosci-tablic",children:[{level:3,title:"Porównanie z every",slug:"porownanie-z-every",children:[]},{level:3,title:"Porównywanie list z obiektami",slug:"porownywanie-list-z-obiektami",children:[]}]},{level:2,title:"Porównanie tablic za pomocą Lodash",slug:"porownanie-tablic-za-pomoca-lodash",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/11-porownanie-tablic.md",git:{}}},2654:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});var e=s(6252);const o=(0,e.uE)('<h1 id="porownanie-tablic" tabindex="-1"><a class="header-anchor" href="#porownanie-tablic" aria-hidden="true">#</a> Porównanie tablic</h1><p>Czasami możemy mieć potrzebę porównania dwóch tablic. Tutaj też pada pytanie, co chcemy porównać. Czy tablice mają mieć tę samą długość i te same wartości, czy może te same referencje. Należy bowiem pamiętać, że tablice to obiekty.</p><h2 id="porownanie-referencji-tablic" tabindex="-1"><a class="header-anchor" href="#porownanie-referencji-tablic" aria-hidden="true">#</a> Porównanie referencji tablic</h2><p>Na początek spróbujmy porównać puste tablice za pomocą podwójnego i potrójnego operatora porównania:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Porównujemy puste tablice i otrzymujemy wartość <code>false</code>. Na pierwszy rzut oka wydaje się, że tablice są takie same. JavaScript w tym przypadku porównuje referencje, a nie wartości tablicy. Tutaj każda tablica jest nową tablicą z nową referencją. Są to więc różne tablice.</p><p>Używam także podwójnego operatora do porównania wyników, ale pamiętajmy, że tego operatora lepiej nie używać.</p><p>Nie zawsze zależy nam na porównaniu referencji, w niektórych przypadkach może nam się jednak przydać:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym kodzie widzimy, że przepisanie referencji z jednej zmiennej do drugiej i porównanie obu zmiennych daje wartość <code>true</code>. W niektórych przypadkach, gdy chcemy sprawdzić, czy operujemy na tej samej tablicy, operator potrójnego porównania na pewno się sprawdzi. Pamiętajmy jednak, że działa on tylko i wyłączenie na podstawie referencji, a nie wartości tablicy.</p><h2 id="porownanie-wartosci-tablic" tabindex="-1"><a class="header-anchor" href="#porownanie-wartosci-tablic" aria-hidden="true">#</a> Porównanie wartości tablic</h2><p>Częściej jednak będziemy chcieli sprawdzić, czy tablice mają identyczne wartości. Tutaj rozwiązań może być wiele. Wszystko zależy jakie wartości w tablicy będą porównane i czy tablice są zagnieżdżone.</p><h3 id="porownanie-z-every" tabindex="-1"><a class="header-anchor" href="#porownanie-z-every" aria-hidden="true">#</a> Porównanie z every</h3><p>Jednym ze sposobów jest stworzenie funkcji, która porówna nam wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">arrayEquals</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">===</span> b<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrayEquals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Funkcja <code>arrayEquals</code> na początku sprawdza, czy tablice mają tę samą długość. To daje odpowiedź czy będziemy dalej sprawdzać wartości w tablicy. Jeżeli tablice mają różną długość, nie ma sensu ich sprawdzać.</p><p>Do tego używamy metody <code>every</code>, jej zdaniem jest sprawdzenie, czy wszystkie wartości spełniają warunek określony w tej funkcji. Naszym warunkiem jest porównanie wartości z tablicy <code>a</code> do wartości z tablicy <code>b</code>. Do wartości z tablicy <code>b</code> odwołujemy się przez indeks. Jeżeli natrafimy na różnicę, funkcja <code>every</code> od razu kończy pracę i zwraca <code>false</code>.</p><p>Ta funkcja oczywiście może być rozbudowana o sprawdzenie rekurencyjne, gdy mamy zagnieżdżone listy. To rozwiązanie nie zadziała też przy listach z obiektami. Gdy będziemy mieli listę z obiektami otrzymamy zawsze wartość <code>false</code> ponieważ potrójne porównanie sprawdzi tylko referencję. Przy obiektach warto zadbać o dodatkowy algorytm sprawdzający wartości obiektów.</p><p>Również listy przed porównaniem powinny być posortowane. Ten przykład pokazuje działanie na listach posortowanych.</p><h3 id="porownywanie-list-z-obiektami" tabindex="-1"><a class="header-anchor" href="#porownywanie-list-z-obiektami" aria-hidden="true">#</a> Porównywanie list z obiektami</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Gdy mamy bardziej skomplikowane struktury możemy użyć <code>JSON.stringify</code>. Za pomocą tej metody struktury konwertowane są do obiektów JSON. W tym przypadku udaje nam się porównać listę z obiektami i jesteśmy pewni, że wszystkie obiekty reprezentują te same wartości. To rozwiązanie działa nawet przy zagnieżdżonych strukturach.</p><p>Niestety to rozwiązanie ma kilka problemów, na przykład wartość <code>undefined</code> nie jest reprezentowana w formacie JSON i będzie zamieniona na wartość <code>null</code>. Jest to szczegół, ale jeżeli zależy nam na idealnej dokładności, to możemy mieć problem.</p><p>Tutaj także należy pamiętać o sortowaniu elementów, zazwyczaj jest ono niezbędne do sprawdzenia identyczności.</p><h2 id="porownanie-tablic-za-pomoca-lodash" tabindex="-1"><a class="header-anchor" href="#porownanie-tablic-za-pomoca-lodash" aria-hidden="true">#</a> Porównanie tablic za pomocą Lodash</h2><p>Innym wariantem może być wykorzystanie gotowego rozwiązania. Jak się domyślamy, miliony programistów już miało problem porównania tablic i na pewno powstało gotowe rozwiązanie. Jednym z nich jest metoda <code>isEqual</code> z biblioteki Lodash.</p><p>https://lodash.com/docs/4.17.15#isEqual</p><p>Jak widzicie, są różne podejścia. W Internecie znajdziecie jeszcze mnóstwo innych rozwiązań. Wszystko zależy od potrzeb. To już Waszym zadaniem jest dobranie rozwiązania, które zadziała prawidłowo w Waszym kodzie.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>porównanie tablic za pomocą potrójnego operatora sprawdzi tylko równość referencji</li><li>do porównania musimy stworzyć własną funkcję na przykład z użyciem metody <code>every</code></li><li>do bardziej zagnieżdżonych struktur możemy użyć <code>JSON.stringify</code>, to rozwiązanie też ma swoje problemy</li><li>dobrym pomysłem jest użycie zewnętrznej biblioteki jak Lodash</li></ul>',30),t={},p=(0,s(3744).Z)(t,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);