"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[246],{2991:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-26bb4370",path:"/zmienne-i-typy/typy-danych/",title:"Tworzenie zmiennych z var, const i let",lang:"pl-PL",frontmatter:{permalink:"/zmienne-i-typy/typy-danych"},excerpt:"",headers:[{level:2,title:"Deklaracja zmiennych",slug:"deklaracja-zmiennych",children:[{level:3,title:"Deklaracja bez wartości",slug:"deklaracja-bez-wartosci",children:[]}]},{level:2,title:"Różnice między var, const i let",slug:"roznice-miedzy-var-const-i-let",children:[{level:3,title:"Zmienne var",slug:"zmienne-var",children:[]},{level:3,title:"Zmienne const",slug:"zmienne-const",children:[]},{level:3,title:"Zmienne let",slug:"zmienne-let",children:[]}]},{level:2,title:"Kiedy używać var, const, let.",slug:"kiedy-uzywac-var-const-let",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"zmienne-i-typy/01-var-let-const.md",git:{}}},7882:(a,n,e)=>{e.r(n),e.d(n,{default:()=>i});const s=(0,e(6252).uE)('<h1 id="tworzenie-zmiennych-z-var-const-i-let" tabindex="-1"><a class="header-anchor" href="#tworzenie-zmiennych-z-var-const-i-let" aria-hidden="true">#</a> Tworzenie zmiennych z var, const i let</h1><p>W tej części omówimy sobie deklarację zmiennych w JavaScript. Zapoznamy się z pierwszymi pułapkami i dowiemy się kiedy używać <code>var</code>, <code>let</code>, a kiedy <code>const</code>.</p><h2 id="deklaracja-zmiennych" tabindex="-1"><a class="header-anchor" href="#deklaracja-zmiennych" aria-hidden="true">#</a> Deklaracja zmiennych</h2><p>W JavaScript możemy deklarować zmienne za pomocą trzech słów kluczowych jak</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// var</span>\n<span class="token comment">// const</span>\n<span class="token comment">// let</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Od zawsze był <code>var</code>, natomiast <code>const</code> i <code>let</code> pojawiały się w JavaScript wraz ze standardem ECMAScript 6 czyli ogromnym rozszerzeniem języka, które unowocześniło JavaScript i pozwoliło na jeszcze szybszy rozwój.</p><p>Tak jak w wielu innych językach programowania, nazwy zmiennych mają swoje ograniczenia, nie możemy używać słów kluczowych specyficznych dla języka JavaScript. Najlepiej używać znaków alfanumerycznych ze standardu ASCII, mogą to być małe litery i wielkie litery. Możemy też użyć znaku $ oraz _, a także dodać cyfry.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// a-z, A-Z, $, _ , 0-9, </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Zadeklarujemy teraz trzy zmienne za pomocą <code>var, const i let</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> bird <span class="token operator">=</span> <span class="token string">&#39;a bird&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token string">&#39;a cat&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token string">&#39;my dog&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Po słowach kluczowych podaję nazwy i za pomocą znaku równości przypisuję wartość, w tym przypadku tekst. W JavaScript nie określamy typu zmiennej, ale o typach porozmawiamy później. Możecie też się spotkać z deklaracją wielu zmiennych za pomocą jednej instrukcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> a3 <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>lub z tym samym zapisem ale w wielu liniach:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  b3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Do tworzenia zmiennych najczęściej używa się zapisu <em>camelCase</em> i przykładem jest tutaj nazwa <code>myDog</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token string">&#39;my dog&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Jednak to od Was i waszego teamu zależy jak będą wyglądały zapisywane zmienne. JavaScript nie narzuca tutaj żadnych reguł. Do tego są wszelkiego rodzaju lintery i edytory kodu, które sprawdzają stylistykę kodu według naszych ustaleń.</p><p>Jeżeli teraz chcemy teraz wypisać zadeklarowane zmienne do konsoli, używamy polecenia:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>i wypisujemy wszystkie zmienne do konsoli:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>po uruchomieniu skryptu za pomocą Node.js, przeglądarki czy też edytora online, zobaczycie wartości zmiennych w konsoli. Śmiało można powiedzieć, że <code>console.log</code> to jedno z ważniejszych poleceń w języku JavaScript i będziemy z niego nieustannie korzystać. Przydaje się do logowania zdarzeń, debugowania kodu i oczywiście nauki.</p><h3 id="deklaracja-bez-wartosci" tabindex="-1"><a class="header-anchor" href="#deklaracja-bez-wartosci" aria-hidden="true">#</a> Deklaracja bez wartości</h3><p>Na koniec warto jeszcze się dowiedzieć, co przetrzymuje zmienna bez zadeklarowanej wartości.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// let: not initialized</span>\n<span class="token keyword">let</span> salary<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token comment">//undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Za pomocą <code>let</code> możemy zadeklarować zmienną i nie przypisywać jej wartości. Wtedy taka zmienna przechowuje wartość <code>undefined</code>. W wielu językach programowania można się spodziewać <code>null</code>. Tutaj jednak oznacza to zupełnie coś innego niż <code>null</code>. Zostawmy to jednak teraz, temat o <code>null</code> i <code>undefined</code> jeszcze będziemy omawiać.</p><h2 id="roznice-miedzy-var-const-i-let" tabindex="-1"><a class="header-anchor" href="#roznice-miedzy-var-const-i-let" aria-hidden="true">#</a> Różnice między var, const i let</h2><p>Porozmawiajmy teraz o różnicach między <code>var, let i const</code>.</p><h3 id="zmienne-var" tabindex="-1"><a class="header-anchor" href="#zmienne-var" aria-hidden="true">#</a> Zmienne var</h3><p>Słowo kluczowe VAR od standardu ES6 jest przestarzałe i w ogóle nie powinniśmy go używać. Korzystanie z niego dzisiaj uważa się za błąd. Podam kilka przykładów, jakie są problemy przy używaniu <code>var</code>:</p><h4 id="redeklaracja-zmiennej" tabindex="-1"><a class="header-anchor" href="#redeklaracja-zmiennej" aria-hidden="true">#</a> Redeklaracja zmiennej</h4><p>Pierwszy z nich to możliwość zadeklarowania dwóch zmiennych o tej samej nazwie.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jest to jak najbardziej poprawny kod JavaScript, a gdy uruchomimy kod na ekranie zobaczymy wartość <code>hey</code> czyli tą wartość, która była przypisane do ostatniej zmiennej o tej samej nazwie. W przypadku <code> let</code> i <code>const</code> nie jest to możliwe.</p><h4 id="zakres-var" tabindex="-1"><a class="header-anchor" href="#zakres-var" aria-hidden="true">#</a> Zakres <code>var</code></h4><p><code>Var</code> ma zakres globalny lub funkcyjny. Jeżeli zadeklarujemy zmienną <code>var</code> poza jakąś funkcją będziemy mieli do niej dostęp z każdej części kodu. Zmienna ta dopisuje się do globalnego obiektu <code>window</code> (w przypadku przeglądarek), o czym będziemy jeszcze rozmawiać w innym dziale.</p><p>Jeżeli zadeklarujemy zmienną <code>var</code> w funkcji, dostęp mamy tylko w tej funkcji.</p><p>O ile zakres funkcyjny wydaje się ok, to ten globalny zakres jest zbyt duży. Gdy zadeklarujemy zmienną <code>var</code> w zwykłym bloku kodu między klamrami, lub w pętli for czy w bloku <code>if</code> nadal będziemy mieli do niej dostęp spoza tego bloku. Zobaczmy taki przykład gdzie mamy blok kodu z instrukcją <code>if</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;My name is Neo&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> name2 <span class="token operator">=</span> <span class="token string">&#39;My name is James Bond&#39;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Nadal możemy wypisać zmienną <code>name</code>, pomimo tego, że zadeklarowana jest w oddzielnym bloku kodu. W przypadku zmiennej zadeklarowanej za pomocą <code>const</code> lub <code>let</code> nie mamy do niej dostępu poza blokiem kodu. I zostanie zgłoszony błąd.</p><h4 id="przypisanie-wartosci-przed-deklaracja-zmiennej" tabindex="-1"><a class="header-anchor" href="#przypisanie-wartosci-przed-deklaracja-zmiennej" aria-hidden="true">#</a> Przypisanie wartości przed deklaracją zmiennej</h4><p>Dla wielu osób, które znają inny język programowania ten przykład może być najdziwniejszy. Okazuje się, że można najpierw przypisać wartość do zmiennej, a dopiero potem zmienną zadeklarować za pomocą <code>var</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>day <span class="token operator">=</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> day<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku zobaczymy w konsoli wartość Monday bez żadnego błędu. Dzieje się tak, ponieważ deklaracja zmiennych w JS jest przenoszona zawsze na początek kodu lub początek funkcji. Tak naprawdę w czasie interpretowania kodu, zmienna <code>day</code> zostanie najpierw stworzona za pomocą <code>var</code>, a dopiero potem zainicjalizowania wartością Monday.</p><p>Jest to mechanizm nazywany hoisting. W przypadku zmiennych oznacza to, że deklaracje zawsze robione są zanim zacznie się wykonywanie kodu albo funkcji. Dotyczy to także <code>const</code> i <code>let</code> jednak taki zapis jak w przypadku <code>var</code> nie jest możliwy. Nie chce głębiej wchodzić w hoisting bo jest to temat na zupełnie nowy odcinek. Jednak w hoistingu <code>const</code> i <code>let</code> nie jest od razu deklarowany jak <code>var</code> , tu znowu jest ta różnica. Dlatego taki kod dla <code>const</code> i <code>let</code> będzie niepoprawny i JavaScript zgłosi nam błąd.</p><p>Głównie z tych powodów nie używamy dzisiaj <code>var</code>, mamy jednak świadomość, że istnieje, a w raz z nim istnieją problemy, które rozwiązują <code>const</code> i <code>let</code>.</p><p>W kolejnych działach będę jeszcze powracał do deklaracji zmiennych za pomocą <code>var</code> i dokładnie poznamy specyfikę działania takich zmiennych.</p><h3 id="zmienne-const" tabindex="-1"><a class="header-anchor" href="#zmienne-const" aria-hidden="true">#</a> Zmienne const</h3><p><code>Const</code> używamy do deklaracji zmiennych, które się nie zmienią. Możemy wtedy taką zmienną nazwać stałą lub zmienną o stałej wartości. Dla uproszczenia, ja nadal <code>const</code> będę nazywał zmienną.</p><p>Prosty przykład to przypisanie wartości liczby PI. Możemy do jej przechowania użyć zmiennej <code>const</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// const: can&#39;t change assigned value</span>\n<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jednak jeżeli stwierdzimy potem w naszej aplikacji, że PI ma mieć inną wartość, to nie będziemy mogli do zmiennej <code>const</code> przypisać nowej wartości. Taki zapis jest błędem:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pi <span class="token operator">=</span> <span class="token number">3.17</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Druga ważna rzecz to przy <code>const</code> musimy od razu przypisać wartość, nie możemy tylko zadeklarować zmiennej:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token comment">// const: you have to assigned value with declaration</span>\n <span class="token keyword">const</span> city<span class="token punctuation">;</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Nie możemy po prostu stworzyć nazwy zmiennej z myślą o późniejsze deklaracji. Przy takiej potrzebie powinno używać się <code>let</code>.</p><p>Powiedziałem, że zmienna <code>const</code> nie może zmienić wartości, którą ma przypisaną. Zwrócę jeszcze uwagę na typy obiektowe. Jeżeli do zmiennej zadeklarowanej za pomocą <code>const</code> przypiszemy obiekt to również, nie możemy potem przypisać innego obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> settings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Jednak sama zawartość obiektu możemy zmieniać:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>settings<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To jest to nadal poprawne. Ponieważ zmienna <code>settings</code> zadeklarowana za pomocą <code>const</code> przetrzymuje referencje do obiektu, a ja dodając nową właściwość nie zmieniam referencji do obiektu. W tym przypadku nie mógłbym przypisać do zmiennej <code>settings</code> nowego obiektu, jak próbuję to zrobić teraz:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>settings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Taki zapis jest już błędem, ponieważ próbuję do zmiennej <code>const</code> o nazwie <code>settings</code> przypisać zupełnie nowy obiekt, a to jest już nowa wartość dla <code>const</code>. I znowu otrzymamy błąd.</p><p>Oczywiście o obiektach w JavaScript jeszcze będziemy mówić. Ale tak jak w wielu językach programowania, tak w JavaScript są typy proste jak <code>number</code> czy <code>string</code> oraz typy obiektowe do których odnosimy się przez referencję. W przypadku deklarowania zmiennej <code>const</code> i przypisania typu obiektowego, nie możemy zmienić tej referencji do obiektu, ale możemy zmieniać to co przechowuje obiekt.</p><h3 id="zmienne-let" tabindex="-1"><a class="header-anchor" href="#zmienne-let" aria-hidden="true">#</a> Zmienne let</h3><p>Jeżeli chodzi o deklarację zmiennych za pomocą <code>let</code> to jest to najbardziej intuicyjna forma tworzenia zmiennych. Możemy tworzyć zmienne bez inicjalizacji, nadpisywać wartości, a także podobnie jak <code>const</code>, <code>let</code> działa w swoim bloku kodu.</p><p>Widzimy inicjalizację bez deklaracji wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> color<span class="token punctuation">;</span>\ncolor <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do stworzonej zmiennej mogę później przypisać wartość i jest to poprawne.</p><p>Zmianę wartości zmiennej:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>\nnumber <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Mogę zmieniać wartości przypisane do zmiennych stworzonych za pomocą let.</p><p>Na koniec zmienne <code>let</code> i <code>const</code> nie są dostępne poza blokiem kodu, co wydaje się bardzo logiczne:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// const i let: no access outside the code block</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// console.log(one, two); // error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Jeżeli próbujemy się odwołać do zmiennej <code>one</code> i <code>two</code> poza blokiem kodu, otrzymamy błąd i program przestanie się daje wykonywać.</p><h2 id="kiedy-uzywac-var-const-let" tabindex="-1"><a class="header-anchor" href="#kiedy-uzywac-var-const-let" aria-hidden="true">#</a> Kiedy używać var, const, let.</h2><p>Pozostaje pytanie kiedy używać <code>var, const, let</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// var</span>\n<span class="token comment">// const</span>\n<span class="token comment">// let</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>Var</code>, w ogóle nie używamy w naszych aplikacjach. Jak dla mnie jest to zawsze błąd i nigdy nie powinien być użyty w kodzie produkcyjnym. W wielu tutorialach napisanych dawniej, znajdziecie <code>var</code>, dzisiaj jednak nikt go już nie używa.</p><p><code>Const</code> używamy tak często jak to możliwe. Jeżeli wiemy, że zmienna nie będzie się zmieniać, używamy <code>const</code> lub jeżeli nie chcemy aby się zmieniła. Jeżeli chcemy aby obiekt przypisany do zmiennej nie został nadpisany, także używamy <code>const</code>. Zmienne <code>const</code> dają nam o wiele więcej informacji o tym jak zmienne są używane i czy mogły się zmienić.</p><p>Wszelkie obiekty konfiguracyjne, przechowujące ważne ustawienia i inicjalizujące się na starcie aplikacji, także powinny być zadeklarowane za pomocą <code>const</code>.</p><p>Jeśli chodzi o formę zapisu czy <code>const</code> zapisujemy tylko z DUŻYCH liter czy za pomocą camelCase to już zależy od Waszych preferencji. W JavaScript nie ma jednoznacznie przyjętej zasady.</p><p>Wszędzie tam, gdzie nie można użyć <code>const</code>, używamy <code>let</code>. Czasami musimy zadeklarować zmienną, do której dopiero potem coś przypiszemy, lub na przykład używamy <code>let</code> w pętli for. Dla <code>let</code> również znajdziemy wiele zastosować w czasie pisania kodu.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>do deklaracji zmiennych używamy <code>const</code> i <code>let</code></li><li>deklaracja za pomocą <code>var</code> jest przestarzała i może powodować nieoczekiwane działanie kodu</li><li><code>const</code> używamy tak często jak to możliwe. W innych przypadkach używamy <code>let</code>.</li><li><code>const</code> używamy do deklarowania stałych wartości</li><li>hoisting to mechanizm, który deklaruje zmienne przed wykonywaniem kodu. Można to sobie wyobrazić jako przeniesienie deklaracji zmiennych na sam początek kodu lub funkcji</li><li>niezainicjalizowana zmienna ma wartość <code>undefined</code></li></ul>',85),o={},i=(0,e(3744).Z)(o,[["render",function(a,n){return s}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[e,s]of n)a[e]=s;return a}}}]);