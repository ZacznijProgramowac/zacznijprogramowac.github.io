"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8615],{3951:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-6ff5c2a6",path:"/zmienne-i-typy/metody-string/",title:"Metody String",lang:"pl-PL",frontmatter:{permalink:"/zmienne-i-typy/metody-string"},excerpt:"",headers:[{level:2,title:"String jest iterable",slug:"string-jest-iterable",children:[]},{level:2,title:"Zamiana string na tablicę przez split()",slug:"zamiana-string-na-tablice-przez-split",children:[]},{level:2,title:"Podział stringa przez slice()",slug:"podział-stringa-przez-slice",children:[]},{level:2,title:"Normalizacja i porównanie string",slug:"normalizacja-i-porownanie-string",children:[]},{level:2,title:"Pozostałe metody",slug:"pozostałe-metody",children:[]},{level:2,title:"Co warto zapamiętać:",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"zmienne-i-typy/08-metody-string.md",git:{}}},6285:(a,n,s)=>{s.r(n),s.d(n,{default:()=>o});const e=(0,s(6252).uE)('<h1 id="metody-string" tabindex="-1"><a class="header-anchor" href="#metody-string" aria-hidden="true">#</a> Metody String</h1><p>Na typie <code>string</code> możemy wywołać kilka przydatnych metod. Ponieważ string jest bardzo popularną wartością w JavaScript, warto zwróci uwagę na kilka metod. Nie będę każdej metody omawiał w szczegółach, raczej pokażę wam ogólne użycie. Jednak każda z nich ma wiele możliwości i kombinacji, dlatego warto zaglądać do dokumentacji na stronie MDN.</p><p>Waszym zadaniem nie jest zapamiętanie tych wszystkich metod, a orientacja w temacie jakie metody istnieją i jak je używać.</p><p>Istotne jest także to, że metody wywoływane na wartości string nie modyfikują jej. Wartość string jest immutable, a więc nigdy się nie zmienia. Każda metoda wywołana na wartości string, zwraca nową wartość, starą pozostawiając bez zmian. Przyjrzymy się zatem kilku metodom.</p><h2 id="string-jest-iterable" tabindex="-1"><a class="header-anchor" href="#string-jest-iterable" aria-hidden="true">#</a> String jest iterable</h2><p>Na początek warto zwrócić uwagę, że wartości string są iterowalne. Nie zachowują się dokładnie jak tablice w JavaScript, ale wciąż możemy pobrać pojedynczy znak z wartości string lub sprawdzić długość wartości.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;Lorem ipsum&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;L&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Możemy wykorzystać właściwość <code>length</code> do pobrania długości stringa. Natomiast metodę <code>charAt()</code> do pobrania konkretnego znaku z wartości string za pomocą indeksu. W tym przypadku pobieram znak <code>0</code> czyli pierwszą literę tekstu. Jak w wielu językach tak i w JavaScript iteracje zaczynają się od indeksu <code>0</code>.</p><p>Do stringa możemy odwołać się także jak do tablicy i podać konkretny indeks w klamrach. W tym przypadku pobieram ostatni znak wartości string.</p><p>Dzięki temu, że string jest iterowalny, mogę użyć prostej pętli for i pobrać każdą literę tekstu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Poniekąd więc, możemy wartości string traktować jak zmienne tablicowe. Nadal jednak różnice są spore. Główna to taka, że string jest immutable, więc metody uruchamiane na stringu nie modyfikują wartości, ale zwracają nową zmodyfikowaną wartość.</p><p>Druga różnica to taka, że wiele metod, które są dostępne na tablicach nie możemy uruchamiać na stringach, no chyba, że jawnie przekształcimy string na tablicę. Mamy więc jedynie pewne podobieństwa.</p><h2 id="zamiana-string-na-tablice-przez-split" tabindex="-1"><a class="header-anchor" href="#zamiana-string-na-tablice-przez-split" aria-hidden="true">#</a> Zamiana string na tablicę przez <code>split()</code></h2><p>Przekształcanie stringa na tablicę, będzie dość częstą operacją w Waszym kodzie. Możemy to zrobić za pomocą gotowej metody<code>split()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Jasme Bond&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> names <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;Jasme&#39;, &#39;Bond&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Do metody <code>split()</code> możemy przekazać parametr, który jest separatorem według, którego string będzie dzielony na tablicę. W tym przypadku, podzielimy wartość string w miejscu, gdzie występuje spacja i otrzymamy tablicę z dwoma elementami.</p><p>Separator może być bardziej skomplikowany, zobaczmy taki przykład:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> monthString <span class="token operator">=</span> <span class="token string">&#39;Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec&#39;</span>\n<span class="token keyword">const</span> array <span class="token operator">=</span> monthString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  <span class="token punctuation">[</span>\n    <span class="token string">&#39;Jan&#39;</span>, <span class="token string">&#39;Feb&#39;</span>, <span class="token string">&#39;Mar&#39;</span>,\n    <span class="token string">&#39;Apr&#39;</span>, <span class="token string">&#39;May&#39;</span>, <span class="token string">&#39;Jun&#39;</span>,\n    <span class="token string">&#39;Jul&#39;</span>, <span class="token string">&#39;Aug&#39;</span>, <span class="token string">&#39;Sep&#39;</span>,\n    <span class="token string">&#39;Oct&#39;</span>, <span class="token string">&#39;Nov&#39;</span>, <span class="token string">&#39;Dec&#39;</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W tym przypadku otrzymamy tablicę z 12 elementami, a wzorcem do podziału jest przecinek i spacja. Jak widzimy, sam wzorzec nie jest ujęty w tablicy z wynikami, jest natomiast usuwany.</p><p>Możemy również podać pusty separator:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token string">&#39;1234567890&#39;</span>\n<span class="token keyword">const</span> numbers <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ponieważ naszym separatorem jest pusty <code>string</code>, stworzymy tablicę, w której każdy znak będzie oddzielnym elementem. Tym właśnie sposobem, możemy każdą wartość string przekonwertować na tablicę znaków.</p><p>To samo możemy uzyskać przez destrukturyzację, z którą zapoznamy się przy tablicach i obiektach, ale można ją też wykonać na wartości typu <code>string</code>;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Wstawiając wartość string w klamry i poprzedzając wartość trzema kropkami, możemy ją rozbić na tablicę znaków.</p><h2 id="podział-stringa-przez-slice" tabindex="-1"><a class="header-anchor" href="#podział-stringa-przez-slice" aria-hidden="true">#</a> Podział stringa przez <code>slice()</code></h2><p>Typ <code>string</code> posiada do dyspozycji metodę <code>slice()</code>, która wycina określone części i zwraca jako nową wartość:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Java</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do <code>slice()</code> podajemy zazwyczaj dwa parametry. Pierwszy określa od którego indeksu zaczynamy, a drugi określa przed którym indeksem kończymy. Podając pierwszą wartość jako 0 zaczynamy od pierwszego znaku, wartość 4 mówi o tym, aby zakończyć pobieranie przed 4 znakiem.</p><p>Stosując różne kombinacje w metodzie <code>slice()</code> możemy przez wartości ujemne pobrać ostatnie znaki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Script</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W ten sposób pobieramy tylko wartość <em>Script</em>, a indeksy liczone są tym razem od tyłu. Wartość -6 pobiera dokładnie sześć ostatnich znaków.</p><p>Zobaczmy jeszcze jeden przykład z wartościami ujemnymi:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rip</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Tym razem pobieramy cztery ostatnie znaki co daje nam wartość <code>ript</code> ale ucinamy jeszcze ostatni znak, i dostajemy wartość <code>rip</code>.</p><p>Jest to jedna z metod przy której często powstają wątpliwości jak działa. Dlatego warto ją poćwiczyć i wspierać się dokumentacją. Wystarczy otworzyć konsolę w przeglądarce i można przetestować jej działanie. Również często padają pytania o tą metodę na rozmowach o pracę. Niestety nie jest ona zbyt intuicyjna i uwierzcie mi, że wielu doświadczonych programistów wciąż ma z nią problem.</p><h2 id="normalizacja-i-porownanie-string" tabindex="-1"><a class="header-anchor" href="#normalizacja-i-porownanie-string" aria-hidden="true">#</a> Normalizacja i porównanie <code>string</code></h2><p>Bardzo często staniemy też przed porównaniem dwóch wartości <code>string</code>. Możemy do tego oczywiście zastosować potrójny operator porównania. Przykładem są dwie identyczne wartości string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> agent <span class="token operator">=</span> <span class="token string">&#39;James Bond&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> agent2 <span class="token operator">=</span> <span class="token string">&#39;Jasmes Bond&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>agent <span class="token operator">===</span> agent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku otrzymujemy wartość <code>true</code>. Zgadzają się zarówno wartości jak i typy zmiennych. Nie jesteśmy tu niczym zaskoczeni przez JavaScript i w ten właśnie sposób możemy porównać dwie wartości string.</p><p>Nie zawsze jednak mamy tak proste przypadki. Czasami te same wartości mogą wyglądać różnie jak w tym przypadku:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> mail <span class="token operator">=</span> <span class="token string">&#39;bond@example.com&#39;</span>\n<span class="token keyword">const</span> mail2 <span class="token operator">=</span> <span class="token string">&#39; Bond@example.com   &#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mail <span class="token operator">===</span> mail2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Porównanie tych dwóch wartości nie uda się. Występują różnice w wielkości liter, a także puste znaki. Możemy użyć dodatkowych metod jak <code>trim()</code> do obcinania pustych znaków czy <code>toLowerCase()</code>, która konwertuje wszystkie znaki do małych liter.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> email <span class="token operator">=</span> mail<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> emai2 <span class="token operator">=</span> mail2<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>email <span class="token operator">===</span> emai2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tym sposobem dokonamy normalizacji przed porównaniem dwóch wartości <code>string</code>. Ponieważ często będziemy porównywać wartości wpisywane przez użytkowników, taka normalizacja jest niemalże wymagana.</p><h2 id="pozostałe-metody" tabindex="-1"><a class="header-anchor" href="#pozostałe-metody" aria-hidden="true">#</a> Pozostałe metody</h2><p>String posiada o wiele metod, których już nie będę omawiał, a zwrócę na nie uwagę. Metody, którymi warto się jeszcze zainteresować to na pewno:</p><p><code>startWith()</code> - sprawdza czy wartość zaczyna się od określonych znaków:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;www.example.com&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>endsWith()</code> - sprawdza czy wartość kończy się określonymi znakami:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>replace()</code> - wyszukuje wskazane znaki i zastępuje je podanymi wartościami:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;www.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// example.com</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>includes()</code> - sprawdza czy czy wartość <code>string</code> ma określone znaki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;www.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Zainteresowanych odsyłam do dokumentacji MDN gdzie możemy eksperymentować z gotowymi przykładami. Również same metody często przyjmują dodatkowe parametry, rozszerzając funkcjonalność.</p><p>Jeżeli musimy dokonać manipulacji na wartości string, prawdopodobnie uzyskamy każdy efekt przez kombinację różnych metod. Jest to tylko kwestia połączenia ich możliwości. W Internecie znajdziemy też gotowe biblioteki, które mogą nam pomóc w manipulacjach na wartościach string. Warto korzystać z gotowych rozwiązań.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać:</h2><ul><li>wartości string są iterowalne, możemy pobrać długość stringa lub też wartość z konkretnej pozycji</li><li>string trochę przypomina typ tablicowy</li><li>metodą <code>split()</code> możemy podzielić wartość string na tablicę</li><li>metoda <code>slice()</code> służy do dzielenia wartości string według indeksów</li><li>porównanie możemy wykonać poprzez trzy znaki równości <code>===</code> warto jednak wcześniej znormalizować wartości</li><li>typ <code>string</code> posiada wiele metod, które łącząc ze sobą pozwolą nam dokonać każdej manipulacji</li></ul>',61),t={},o=(0,s(3744).Z)(t,[["render",function(a,n){return e}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);