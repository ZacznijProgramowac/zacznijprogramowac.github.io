"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[1738],{8120:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-0de80fd2",path:"/tablice/obiekt-array/",title:"Konstruktora Array i metoda Array.from",lang:"pl-PL",frontmatter:{permalink:"/tablice/obiekt-array"},excerpt:"",headers:[{level:2,title:"Array - obiekt macierzysty",slug:"array-obiekt-macierzysty",children:[]},{level:2,title:"Puste tablice",slug:"puste-tablice",children:[]},{level:2,title:"Array.from",slug:"array-from",children:[]},{level:2,title:"Sztuczki z Array.from",slug:"sztuczki-z-array-from",children:[{level:3,title:"Zamrożona tablica",slug:"zamrozona-tablica",children:[]},{level:3,title:"Range w JavaScript",slug:"range-w-javascript",children:[]}]},{level:2,title:"Array.from i array-like objects",slug:"array-from-i-array-like-objects",children:[]},{level:2,title:"Sprawdzanie listy z Array.isArray",slug:"sprawdzanie-listy-z-array-isarray",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/09-obiekt-array.md",git:{}}},3658:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});var e=s(6252);const t=(0,e.uE)('<h1 id="konstruktora-array-i-metoda-array-from" tabindex="-1"><a class="header-anchor" href="#konstruktora-array-i-metoda-array-from" aria-hidden="true">#</a> Konstruktora Array i metoda Array.from</h1><p>Tworzone tablica w JavaScript, dziedziczą po obiekcie <code>Array</code>. To właśnie w tym obiekcie mamy dostęp do wielu niezbędnych metod. Przyjrzyjmy się jak można wykorzystać obiekt <code>Array</code> i czego nie należy z nim robić.</p><h2 id="array-obiekt-macierzysty" tabindex="-1"><a class="header-anchor" href="#array-obiekt-macierzysty" aria-hidden="true">#</a> Array - obiekt macierzysty</h2><p>Obiektu <code>Array</code> możemy użyć do wielu zadań, między innymi do stworzenia tablicy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;foo&#39;, &#39;boo&#39;, &#39;bar&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przykładzie używamy słowa <code>new</code> do uruchomienia konstruktora obiektu <code>Array</code> i w ten sposób tworzymy tablicę z przekazanymi wartościami.</p><p>To samo możemy zrobić nie wykorzystując słówka <code>new</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;foo&#39;, &#39;boo&#39;, &#39;bar&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku omijamy <code>new</code> przed <code>Array</code> i otrzymujemy ten sam rezultat. Okazuje się więc, że działanie jest identyczne i nie ma znaczenia czy będziemy używać <code>new</code> czy będziemy wywoływać <code>Array</code> jako funkcję.</p><p>Tworzenie tablic w taki sposób w JavaScript jest jednak rzadko spotykane i podobnie jak przy obiektach prymitywnych nie należy tego robić. Najczęściej używa się postaci z dwoma nawiasami kwadratowymi, którą używaliśmy do tej pory.</p><h2 id="puste-tablice" tabindex="-1"><a class="header-anchor" href="#puste-tablice" aria-hidden="true">#</a> Puste tablice</h2><p>Inną dziwną właściwością obiektu <code>Array</code> jest możliwość stworzenie pustej tablicy o określonej długości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &lt;3 empty items&gt; ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Otrzymujemy tablicę, która ma długość 3, ale jest zupełnie pusta. Pusta oznacza, że nie ma żadnych wartości, nawet indeksów, ale ma określona długość. Jest to dziwny twór, którego należy unikać.</p><p>Jeżeli już chcemy stworzyć tablicę przy pomocy konstruktora <code>Array</code>, chociaż są na to lepsze sposoby to możemy użyć dodatkowo metody <code>fill</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 1, 1 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym sposobie tworzymy tablicę o długości 3 i od razu wypełniamy ją liczbą <code>1</code>. W tej sytuacji wszystkie elementy tablicy mają tę samą wartość.</p><p>Największe niebezpieczeństwo tkwi, gdy spróbujemy taką tablicę uzupełnić obiektami:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr5 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [ { a: 1 }, { a: 1 }, { a: 1 } ]</span>\narr5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { a: 42 }, { a: 42 }, { a: 42 } ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Tworzę tablicę przy pomocy konstruktora <code>Array</code> i do metody <code>fill</code> przekazuję obiekt. Cała tablica wypełniona jest jednym i tym samym obiektem. Oznacza to, że zmiana obiektu na jednej pozycji powoduje zmianę obiektu na wszystkich pozycjach tablicy.</p><p>Jak widzimy, przydatność konstruktora <code>Array</code> jest mała. Czasami taka wypełniona tablica może się przydać. Największe zastosowanie widzę przy pisaniu testów, gdy potrzebujemy tablicy z danymi i nie zależy nam na konkretnych danych. Są jednak jeszcze lepsze formy wypełniania tablic. Jeżeli chodzi o sam konstruktor <code>Array</code> to najlepiej go unikać.</p><h2 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from</h2><p>Jeżeli chcemy stworzyć pustą tablicę o określonej długości najlepszą opcją może być użycie <code>Array.from</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr6 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ undefined, undefined, undefined ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Używamy metody <code>from</code> z obiektu <code>Array</code>. Do metody <code>from</code> przekazujemy obiekt z właściwością <code>length</code> ustawioną na 3. W ten sposób powstaje nowa tablica o długości 3. Wszystkie pozycje tablicy wypełnione są jednak wartością <code>undefined</code>. Taka forma tablicy jest już poprawna, ponieważ ma indeksy i przypisaną do nich wartość.</p><p>Do <code>Array.from</code>, możemy też przekazać funkcję, jako drugi parametr:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr7 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 100, 101, 102 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Funkcja <code>callback</code>, którą przekazujemy, przyjmuje dwa parametry. Pierwszy to wartości ze stworzonej właśnie tablicy. Wcześniej widzieliśmy, że będą to wartości <code>undefined</code>. Drugi parametr to indeks tablicy, czyli liczby zaczynające się od 0. Możemy indeks wykorzystać do stworzenia tablicy z określonymi wartościami.</p><p>Tym sposobem możemy też wypełnić tablice obiektami:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr8 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { a: 0 }, { a: 1 }, { a: 2 } ]</span>\narr8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { a: 42 }, { a: 1 }, { a: 2 } ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Wykorzystując funkcję jako drugi parametr mogę stworzyć obiekt o właściwości <code>a</code>, którego kolejną wartością będzie indeks tablicy. Zwracam uwagę na dodatkowe nawiasy okrągłe, które pozwalają nam zwrócić obiekt bez tworzenia dodatkowej konstrukcji return.</p><p>Jeżeli teraz zmienię obiekt na jakieś pozycji, to zmienię go tylko i wyłącznie na jednej pozycji. Dostaję więc listę różnych obiektów, ponieważ funkcja ta, za każdym razem zwraca zupełnie nowy obiekt.</p><h2 id="sztuczki-z-array-from" tabindex="-1"><a class="header-anchor" href="#sztuczki-z-array-from" aria-hidden="true">#</a> Sztuczki z Array.from</h2><h3 id="zamrozona-tablica" tabindex="-1"><a class="header-anchor" href="#zamrozona-tablica" aria-hidden="true">#</a> Zamrożona tablica</h3><p>W niektórych językach programowania jest możliwość stworzenia tablicy o określonej długości, w JavaScript same tablice nie mają takiej właściwości. Możemy jednak wykorzystać metodę <code>Object.freeze</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr9 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>arr9<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Tworzymy tablicę o określonej długości za pomocą <code>Array.from</code>, wypełniamy ją przez przekazanie dodatkowej funkcji <code>callback</code> i na końcu zamrażamy stworzoną tablicę za pomocą <code>Object.freeze</code>.</p><p>Od tego momentu nie mamy możliwości zmieniania tablicy, dodawania nowych indeksów, zmienienia wartości już istniejących. Jest to obiekt niezmieniany. Tablice takie rzadko spotykane są w JavaScript, jeżeli jednak potrzebujecie takiego rozwiązania, to jest jeden ze sposobów.</p><h3 id="range-w-javascript" tabindex="-1"><a class="header-anchor" href="#range-w-javascript" aria-hidden="true">#</a> Range w JavaScript</h3><p>W niektórych językach programowania są dostępne funkcje typu <code>range</code>, które tworzą nam tablice wypełnione na przykład liczbami. W JavaScript nie ma takiej natywnej funkcji, ale możemy sami stworzyć gotowe rozwiązanie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> end <span class="token operator">-</span> start <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 9, 10, 11, 12, 13 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Mamy funkcję, która przyjmuje dwa parametry. Pierwszy z nich to początek zakresu, a drugi parametr to koniec zakresu. Na podstawie tych dwóch parametrów możemy określić długość tablicy i potem wypełnić ją określonymi wartościami. Taka funkcja do generowania liczb w pewnym zakresie, bardzo może się przydać nie tylko w aplikacji, ale także w czasie testowania.</p><h2 id="array-from-i-array-like-objects" tabindex="-1"><a class="header-anchor" href="#array-from-i-array-like-objects" aria-hidden="true">#</a> Array.from i array-like objects</h2><p><code>Array.from</code> idealnie nadaje się do tworzenia tablic z obiektów <code>array-like objects</code>. Są to wszystkie obiekty które mają właściwość <code>length</code> oraz indeksowane elementy. Znamy już takie elementy w języku JavaScript, są to na przykład wartości <code>string</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr10 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;f&#39;, &#39;o&#39;, &#39;o&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku do <code>Array.from</code> przekazujemy wartość typu <code>string</code> i otrzymujemy tablicę z pojedynczymi elementami.</p><p>Ten sami zapis możemy otrzymać wywołując metodę <code>split</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Dlatego też, rzadko spotyka się zapis z <code>Array.from</code>, raczej częściej używa się metody <code>split()</code>.</p><p><code>Array.from</code> bardziej przydaje się do struktur danych jak Set:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr11 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr11<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [ &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>O strukturze <code>Set</code> jeszcze nie rozmawialiśmy, ale jest to struktura, której zadaniem jest trzymanie tylko unikalnych wartości. Dzięki <code>Array.from</code> możemy te wartości łatwo przetworzyć na tablicę. W tym przypadku stworzony set wstawiamy do <code>Array.from</code> i otrzymujemy tablicę unikalnych wartości.</p><p><code>Array.from</code> również przydaje się przy strukturze <code>Map</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr12 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [ &#39;one&#39;, &#39;two&#39;, &#39;three&#39; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>W strukturze <code>map</code> zawsze mamy elementy, które mają klucz i wartość. Za pomocą <code>Array.from</code> możemy stworzyć listę albo z kluczy, albo z wartości, albo też i z tego i tego. W tym przypadku tworzę listę z wartości, które przetrzymuje struktura <code>map</code>.</p><p>To kilka przykładów gdzie możemy użyć <code>Array.from</code>. Głównie w bardzo prosty sposób możemy stworzyć tablice z obiektów tablico-podobnych. Takich obiektów jest też sporo w drzewie DOM. Jeżeli będziecie pracować z elementami drzewa DOM <code>Array.from</code> może Wam się bardzo przydać.</p><h2 id="sprawdzanie-listy-z-array-isarray" tabindex="-1"><a class="header-anchor" href="#sprawdzanie-listy-z-array-isarray" aria-hidden="true">#</a> Sprawdzanie listy z Array.isArray</h2><p>Na koniec jeszcze bardzo przydatna metoda <code>Array.isArray</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr13 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> sett <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;boo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr13<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>sett<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Służy ona do sprawdzania, czy coś jest tablicą. Wystarczy przekazać do niej wartość, którą chcemy sprawdzić, aby otrzymać <code>true</code> lub <code>false</code>. Warto zwrócić uwagę, że otrzymamy <code>true</code> tylko w przypadku prawdziwej tablicy. Nawet obiekty tablico-podobne będą zwracały wartość <code>false</code>.</p><p>Gdy pracujemy z niepewnymi strukturami danych, metoda ta może nam bardzo pomóc rozpoznać prawidłowy typ obiektu.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>możemy tworzyć tablice przy pomocy konstruktora, jest to jednak technika rzadko spotykana</li><li>możemy tworzyć puste tablice i wypełniać je danymi za pomocą metody <code>fill</code></li><li>metoda <code>Array.from</code> może być przydatna do stworzenia tablicy z wygenerowanymi danymi</li><li>metodę <code>Array.from</code> możemy użyć do konwersji obiektów tablico-podobnych na tablice</li><li>za pomocą <code>Array.isArray</code> łatwo sprawdzimy, czy wartość, na której pracujemy jest tablicą</li></ul>',63),o={},p=(0,s(3744).Z)(o,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);