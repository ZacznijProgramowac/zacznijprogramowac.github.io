"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[3840],{3153:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-0645d3d3",path:"/tablice/metody/",title:"Tablice - podstawowe operacje",lang:"pl-PL",frontmatter:{permalink:"/tablice/metody"},excerpt:"",headers:[{level:2,title:"Dodawanie",slug:"dodawanie",children:[{level:3,title:"Dodawanie na koniec - push",slug:"dodawanie-na-koniec-push",children:[]},{level:3,title:"Dodawanie na początek - unshift",slug:"dodawanie-na-poczatek-unshift",children:[]}]},{level:2,title:"Pobieranie, usuwanie elementów",slug:"pobieranie-usuwanie-elementow",children:[{level:3,title:"Pobieranie i usuwanie ostatniego elementu - pop",slug:"pobieranie-i-usuwanie-ostatniego-elementu-pop",children:[]},{level:3,title:"Pobieranie i usuwanie pierwszego elementu - shift",slug:"pobieranie-i-usuwanie-pierwszego-elementu-shift",children:[]}]},{level:2,title:"Wycinanie tablicy",slug:"wycinanie-tablicy",children:[{level:3,title:"Wycinanie sekcji tablicy - splice",slug:"wycinanie-sekcji-tablicy-splice",children:[]},{level:3,title:"Pobieranie sekcji tablicy  - slice",slug:"pobieranie-sekcji-tablicy-slice",children:[]}]},{level:2,title:"Łączenie tablic i elementów",slug:"łaczenie-tablic-i-elementow",children:[{level:3,title:"Łączenie tablic - concat",slug:"łaczenie-tablic-concat",children:[]},{level:3,title:"Łączenie elementów - join",slug:"łaczenie-elementow-join",children:[]}]},{level:2,title:"Pobieranie indeksów - indexOf i lastIndexOf",slug:"pobieranie-indeksow-indexof-i-lastindexof",children:[]},{level:2,title:"Odwrócenie tablicy - reverse",slug:"odwrocenie-tablicy-reverse",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"tablice/02-metody.md",git:{}}},5900:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="tablice-podstawowe-operacje" tabindex="-1"><a class="header-anchor" href="#tablice-podstawowe-operacje" aria-hidden="true">#</a> Tablice - podstawowe operacje</h1><p>Wcześniej poznaliśmy kilka zasad pracy z tablicami, zupełne podstawy. Tablice w JavaScript tworzone są z obiektu Array i dziedziczą po nim mnóstwo metod. Metody te musimy znać, aby sprawnie posługiwać się tablicami, dlatego rozszerzymy wiedzę podstawową o znajomość metod.</p><h2 id="dodawanie" tabindex="-1"><a class="header-anchor" href="#dodawanie" aria-hidden="true">#</a> Dodawanie</h2><h3 id="dodawanie-na-koniec-push" tabindex="-1"><a class="header-anchor" href="#dodawanie-na-koniec-push" aria-hidden="true">#</a> Dodawanie na koniec - push</h3><p>Jeżeli nie potrzebujemy dodać elementu w konkretnym indeksie tablicy to możemy użyć metody <code>push</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Metoda ta dodaje element na koniec tablicy. Jednocześnie zwraca nową długość tablicy. Najczęściej za pomocą tej metody dodaje się nowe elementy do tablicy.</p><h3 id="dodawanie-na-poczatek-unshift" tabindex="-1"><a class="header-anchor" href="#dodawanie-na-poczatek-unshift" aria-hidden="true">#</a> Dodawanie na początek - unshift</h3><p>Kolejna metoda to <code>unshift</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr2<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 0, 1, 2, 3 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Przy użyciu tej metody, dodajemy element na początek tablicy. W niektórych przypadkach bardzo przydatna metoda. Ona również zwraca długość tablicy po dodaniu nowego elementu.</p><h2 id="pobieranie-usuwanie-elementow" tabindex="-1"><a class="header-anchor" href="#pobieranie-usuwanie-elementow" aria-hidden="true">#</a> Pobieranie, usuwanie elementów</h2><p>Mamy też przydatne metody do pobierania i usuwania elementów.</p><h3 id="pobieranie-i-usuwanie-ostatniego-elementu-pop" tabindex="-1"><a class="header-anchor" href="#pobieranie-i-usuwanie-ostatniego-elementu-pop" aria-hidden="true">#</a> Pobieranie i usuwanie ostatniego elementu - pop</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 1, 2 ] 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Metoda <code>pop</code> wywołana na tablicy usuwa ostatni element i zwraca go. Nie jest to wiec tylko i wyłącznie pobranie ostatniego elementu. Jak pamiętamy z ostatniej lekcji, jeżeli chcemy pobrać ostatni element, musimy użyć kombinacji z właściwością <code>length</code>.</p><h3 id="pobieranie-i-usuwanie-pierwszego-elementu-shift" tabindex="-1"><a class="header-anchor" href="#pobieranie-i-usuwanie-pierwszego-elementu-shift" aria-hidden="true">#</a> Pobieranie i usuwanie pierwszego elementu - shift</h3><p>Jest także możliwość pobrania pierwszego elementu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 2, 3 ] 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Tak samo jak metoda <code>pop</code>, metod <code>shift</code> pobiera pierwszy element i zwraca go. Również należy pamiętać, że ten element jest usuwany z tablicy. Jeżeli nie chcemy usuwać elementu z tablicy, a tylko pobrać pierwszy element należy odwołać się przez indeks 0.</p><h2 id="wycinanie-tablicy" tabindex="-1"><a class="header-anchor" href="#wycinanie-tablicy" aria-hidden="true">#</a> Wycinanie tablicy</h2><h3 id="wycinanie-sekcji-tablicy-splice" tabindex="-1"><a class="header-anchor" href="#wycinanie-sekcji-tablicy-splice" aria-hidden="true">#</a> Wycinanie sekcji tablicy - splice</h3><p>Wspominałem już o metodzie <code>splice</code> dzięki której można usunąć konkretny element:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr5<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> arr5<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Do metody <code>splice</code> zazwyczaj przekazujemy dwa parametry, pierwszy to indeks od którego zaczynamy usuwanie, drugi indeks to ile kolejnych elementów będzie usuniętych. W tym przypadku wycinam tablicę od drugiego indeksu, aż do samego końca. Jeżeli nie podam drugiego parametru, to metoda również obetnie pozostałe elementy w tablicy. Jeżeli chcemy robić wycinanie do końca to parametr ten jest zbędny.</p><h3 id="pobieranie-sekcji-tablicy-slice" tabindex="-1"><a class="header-anchor" href="#pobieranie-sekcji-tablicy-slice" aria-hidden="true">#</a> Pobieranie sekcji tablicy - slice</h3><p>Podobnie jak na wartości <code>string</code>, który jest iterowalny, tak i na tablicach można użyć metody <code>slice</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr7 <span class="token operator">=</span> arr6<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">,</span> arr7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5 ] [ 1, 2, 3 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Metoda <code>slice</code> wycina wskazaną część tablicy, ale nie modyfikuje oryginalnej tablicy. Dostajemy wskazaną część przez przekazanie dwóch parametrów. Pierwszy mówi od którego indeksu zaczynamy wycinanie, a drugi przed którym kończymy. Metoda <code>slice</code> była omawiana w dziale string, ma ona bardzo wiele kombinacji i zastosowań. Warto przetestować tą metodą z różnymi parametrami.</p><h2 id="łaczenie-tablic-i-elementow" tabindex="-1"><a class="header-anchor" href="#łaczenie-tablic-i-elementow" aria-hidden="true">#</a> Łączenie tablic i elementów</h2><h3 id="łaczenie-tablic-concat" tabindex="-1"><a class="header-anchor" href="#łaczenie-tablic-concat" aria-hidden="true">#</a> Łączenie tablic - concat</h3><p>Czasami będziemy potrzebować połączyć ze sobą tablice albo elementy w tablicy. Tutaj też JavaScript przygotował nam konkretne metody:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr9 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> concat <span class="token operator">=</span> arr8<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr9<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Mamy dwie tablice. Wywołując metodę <code>concat</code> na jednej z nich i przekazując jako argument drugą tablicę, łączymy obydwie tablice w jedną nową. Ważne jest to, że nie ma tu żadnych modyfikacji tablic, a dostajemy zupełnie nową tablice.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> concat2 <span class="token operator">=</span> arr8<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr9<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>concat2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 1, 2, 3, 4, 5, 6, 7 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do metody <code>concat</code> możemy przekazywać nie tylko tablice, ale też pojedyncze wartości, które zostaną dołączone do wspólnej tablicy W tym przypadku przekazuję do połączenia tablicę, ale też dwie wartości typu number.</p><h3 id="łaczenie-elementow-join" tabindex="-1"><a class="header-anchor" href="#łaczenie-elementow-join" aria-hidden="true">#</a> Łączenie elementów - join</h3><p>Kolejna metoda służy do łączenia elementów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> joined <span class="token operator">=</span> arr10<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; / &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   1 / 2 / 3 / 4 / 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Na tablicy wywołujemy metodę <code>join</code> i przekazujemy parametr w postaci <code>string</code>. W tym przypadku jest to separator, który będzie użyty do połączenia elementów i rozdzielenia ich. Jeżeli nie przekażemy żadnego separatora, zostanie użyty domyślny przecinek. Jest to bardzo przydatna metoda, która pozwala nam wypisać wartości według określonego sposobu formatowania.</p><h2 id="pobieranie-indeksow-indexof-i-lastindexof" tabindex="-1"><a class="header-anchor" href="#pobieranie-indeksow-indexof-i-lastindexof" aria-hidden="true">#</a> Pobieranie indeksów - indexOf i lastIndexOf</h2><p>Mamy też metody do pobrania indeksów. Czasami potrzebujemy znaleźć indeks konkretnego elementu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> index <span class="token operator">=</span> arr11<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przykładzie za pomocą metody <code>indexOf</code> szukamy wartości <code>3</code> przekazanej jako parametr. Widzimy, że tablica zwiera więcej takich wartości. Ta metoda jednak zwróci indeks pierwszego znalezionego elementu o tej wartości.</p><p>Inaczej trochę działa metoda <code>lastIndexOf</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr12 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastIndex <span class="token operator">=</span> arr12<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku zwrócony zostanie indeks ostatniego elementu o wskazanej wartości.</p><p>Jeżeli nie uda się znaleźć elementu o przekazanej wartości otrzymamy indeks <code>-1</code> co oznacza, że taki element nie istnieje w tablicy.</p><p>Metody te są bardzo przydatne. Posiadając indeks konkretnego elementu, możemy usunąć ten element za pomocą metody <code>splice</code> lub wyciąć tablicę od konkretnego elementu za pomocą <code>slice</code>.</p><h2 id="odwrocenie-tablicy-reverse" tabindex="-1"><a class="header-anchor" href="#odwrocenie-tablicy-reverse" aria-hidden="true">#</a> Odwrócenie tablicy - reverse</h2><p>Na koniec bardzo prosta, ale niezwykle przydatna metoda.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr13 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> reverse <span class="token operator">=</span> arr13<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5, 4, 3, 2, 1 ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jest to metoda <code>reverse</code> do odwrócenia tablicy. Nie musimy więc kombinować z pętlą <code>for</code> aby odwrócić tablicę. Jeżeli więc poproszą Was na rozmowie o pracę o wypisanie wartości tablicy od tyłu, macie gotowe rozwiązanie 😃.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li><p>dodajemy elementy za pomocą <code>push</code> i <code>unshift</code></p></li><li><p>usuwamy elementy za pomocą <code>pop</code> i <code>shift</code></p></li><li><p>wycinamy tablice za pomocą <code>splice</code> i <code>slice</code></p></li><li><p>łączymy tablice za pomocą <code>concat</code> i <code>join</code></p></li><li><p>pobieramy indeksy za pomocą <code>indexOf</code> i <code>lastIndexOf</code></p></li><li><p>odwracamy tablicę za pomocą <code>reverse</code></p></li></ul>',55),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);