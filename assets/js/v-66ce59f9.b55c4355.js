"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[4307],{4831:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-66ce59f9",path:"/funkcje/parametry-funkcji/",title:"Parametry funkcji",lang:"pl-PL",frontmatter:{permalink:"/funkcje/parametry-funkcji/"},excerpt:"",headers:[{level:2,title:"Pomijanie parametrów",slug:"pomijanie-parametrow",children:[]},{level:2,title:"Parametr domyślny dawniej",slug:"parametr-domyslny-dawniej",children:[]},{level:2,title:"Sprawdzanie, czy parametr jest undefined",slug:"sprawdzanie-czy-parametr-jest-undefined",children:[]},{level:2,title:"Parametry domyślne ES6",slug:"parametry-domyslne-es6",children:[]},{level:2,title:"Parametry jako funkcja",slug:"parametry-jako-funkcja",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"funkcje/03-parametry-funkcji.md",git:{}}},1171:(n,a,s)=>{s.r(a),s.d(a,{default:()=>o});var p=s(6252);const e=(0,p.uE)('<h1 id="parametry-funkcji" tabindex="-1"><a class="header-anchor" href="#parametry-funkcji" aria-hidden="true">#</a> Parametry funkcji</h1><h2 id="pomijanie-parametrow" tabindex="-1"><a class="header-anchor" href="#pomijanie-parametrow" aria-hidden="true">#</a> Pomijanie parametrów</h2><p>W JavaScript nie ma obowiązku przesyłania wszystkich parametrów do funkcji.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Możemy wywołać funkcję <code>add</code> tylko z jednym parametrem. Oczywiście w takim przypadku nie należy spodziewać się, że funkcja tak wywoływana będzie działała poprawnie. Gdy ta funkcja zostaje wywołana z jednym parametrem, parametr <code>b</code> przyjmuje wartość <code>undefined</code> tak jakby był niezainicjalizowaną zmienną.</p><p>Ostatecznie więc następuje próba dodania liczby do <code>undefined</code> co kończy się wynikiem <code>NaN</code>.</p><h2 id="parametr-domyslny-dawniej" tabindex="-1"><a class="header-anchor" href="#parametr-domyslny-dawniej" aria-hidden="true">#</a> Parametr domyślny dawniej</h2><p>Zanim pojawiła się możliwość ustawiania parametrów domyślnych dla funkcji, używano prostego wzorca:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">40</span><span class="token punctuation">;</span>\n  b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Za pomocą operatora <code>OR</code> sprawdzano, czy parament istnieje i jeżeli nie, to przypisywano mu domyślną wartość. W tym przykładzie, jeżeli nie zostanie przekazany parametr <code>a</code> zostanie przypisana wartość <code>40</code>. Jeżeli parametr <code>b</code> nie istnieje to zostanie mu przypisana wartość <code>2</code>.</p><p>Taką funkcję można wywołać bez parametru:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Można też wywołać ją z pominięciem pierwszego parametru stosując wartość <code>undefined</code>.</p><p>Ten wzorzec z domyślnymi parametrami ma jednak pewien problem:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Wywołanie funkcji z parametrem 0 i tak powoduje użycie domyślnych wartości dla parametrów funkcji. Dzieje się tak, ponieważ operator <code>OR</code> sprawdza wartości fałszywe, a zero jest wartością fałszywą. W takim wypadku dostajemy nieprawidłowe wyniki.</p><h2 id="sprawdzanie-czy-parametr-jest-undefined" tabindex="-1"><a class="header-anchor" href="#sprawdzanie-czy-parametr-jest-undefined" aria-hidden="true">#</a> Sprawdzanie, czy parametr jest undefined</h2><p>Można sobie poradzić z tym problemem, stosując taki zapis:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">40</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>\n  b <span class="token operator">=</span> b <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> b<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 40</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Możemy dokładnie sprawdzić, czy parametr ma wartość <code>undefined</code> co oznacza, że nie został przekazany. To rozwiązuje nam większość problemów z wartościami fałszywymi.</p><p>Przekazanie parametru <code>null</code> powiedzie się:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 40</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W tym przypadku wywołanie funkcji z <code>null</code> nie spowoduje przypisania parametru domyślnego. Ponieważ w funkcji dokładnie sprawdzamy, czy przesyłane parametry nie są <code>undefined</code>. Dlatego wartość <code>null</code> przechodzi dalej i niejawnie konwertowana jest na liczbę <code>0</code>, dlatego przy dodawaniu mamy prawidłowe wyniki.</p><p>Możemy użyć jeszcze nowszego rozwiązania ES 2020:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add3</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> a <span class="token operator">??</span> <span class="token number">40</span><span class="token punctuation">;</span>\n  b <span class="token operator">=</span> b <span class="token operator">??</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add3</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Z nullish operator możemy dokładnie sprawdzić wartości nullowe, czyli <code>null</code> i <code>undefined</code>. Jak widzicie, jest tutaj kilka rozwiązań tego problemu. W ES6 wprowadzono natomiast natywne parametry domyślne, które także możemy użyć.</p><h2 id="parametry-domyslne-es6" tabindex="-1"><a class="header-anchor" href="#parametry-domyslne-es6" aria-hidden="true">#</a> Parametry domyślne ES6</h2><p>W specyfikacji ES6 wprowadzono parametry domyślne, które możemy definiować zaraz przy parametrach funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add4</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 48</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 40</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Od razu do parametrów funkcji możemy przypisać wartości, tak jak tutaj do parametrów <code>a</code> i <code>b</code>. Wartości te zostaną użyte, gdy parametr nie zostanie przekazany lub przekażemy wartość <code>undefined</code>.</p><p>Podobnie jak przy wcześniejszym rozwiązaniu, parametry funkcji są sprawdzane pod względem <code>undefined</code>, a nie wartości fałszywych. Dlatego możemy tam przekazywać wartości <code>null</code>, które konwertowane są do wartości 0, czy też wartości 0, które nie są tym razem traktowane jako wartości fałszywe. Mamy tutaj zdecydowanie mniej niespodzianek.</p><h2 id="parametry-jako-funkcja" tabindex="-1"><a class="header-anchor" href="#parametry-jako-funkcja" aria-hidden="true">#</a> Parametry jako funkcja</h2><p>Parametrem domyślnym funkcji mogą być też wyrażenia:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello World&#39;</span>\n\n<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello JS&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>W tym przykładzie mamy zdefiniowaną funkcję <code>world</code>, która zwraca wartość string. Mamy też zdefiniowaną funkcję <code>hello</code>, która przyjmuje dwa parametry.</p><p>Jeżeli drugi parametr nie będzie przekazany to zostanie wywołana funkcja <code>world</code>, która zwróci wartość do drugiego parametru.</p><p>Jeżeli przekażemy obydwa parametry to funkcja <code>world</code> nie zostanie wywołana. Nie należy więc martwić się wydajnością tego rozwiązania i ewentualnym niepotrzebnym wywoływaniem funkcji. Funkcja jako parametr domyślny zostanie wywołana tylko w przypadku braku przekazania parametru.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>JavaScript nie wymusza na nas przekazania wszystkich parametrów do funkcji</li><li>możemy stosować własną implementację domyślnych parametrów, należy jednak uważać na przypadki brzegowe</li><li>w ES6 pojawiły się natywne parametry domyślne</li><li>parametrami domyślnymi mogą być też funkcje i wyrażenia</li></ul>',39),t={},o=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,p.up)("Comments");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,p]of a)n[s]=p;return n}}}]);