"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[7221],{6975:(n,a,s)=>{s.r(a),s.d(a,{data:()=>o});const o={key:"v-6b8538a9",path:"/obiekty/tworzenie-obiektow-inaczej/",title:"Inne sposoby na tworzenie obiektów w JavaScript",lang:"pl-PL",frontmatter:{permalink:"/obiekty/tworzenie-obiektow-inaczej"},excerpt:"",headers:[{level:2,title:"Tworzenie za pomocą Object",slug:"tworzenie-za-pomoca-object",children:[]},{level:2,title:"Tworzenie obiektów za pomocą funkcji",slug:"tworzenie-obiektow-za-pomoca-funkcji",children:[]},{level:2,title:"Tworzenie obiektów za pomocą klas",slug:"tworzenie-obiektow-za-pomoca-klas",children:[]},{level:2,title:"Tworzenie obiektów za pomocą Object.create",slug:"tworzenie-obiektow-za-pomoca-object-create",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/03-tworzenie-obiektow-inaczej.md",git:{}}},8596:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});var o=s(6252);const e=(0,o.uE)('<h1 id="inne-sposoby-na-tworzenie-obiektow-w-javascript" tabindex="-1"><a class="header-anchor" href="#inne-sposoby-na-tworzenie-obiektow-w-javascript" aria-hidden="true">#</a> Inne sposoby na tworzenie obiektów w JavaScript</h1><p>Do tej pory poznaliśmy literalną formę tworzenia obiektów w JavaScript. Wystarczyło użyć dwóch nawiasów klamrowych i gotowe. Jest to najpopularniejszy sposób na tworzenie obiektów, ale są też inne sposoby.</p><h2 id="tworzenie-za-pomoca-object" tabindex="-1"><a class="header-anchor" href="#tworzenie-za-pomoca-object" aria-hidden="true">#</a> Tworzenie za pomocą Object</h2><p>Jak większość wartości w JavaScript tak i obiekty mają specjalny obiekt <code>Object</code>. Możemy go użyć ze słówkiem <code>new</code> jako wywołanie konstruktora lub bez tego słowa. Działanie jest to samo:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Przy takim tworzeniu obiektów w obu przypadkach powstają nam puste obiekty. Możemy później do takich obiektów dodawać nowe pola czy metody. Jest to wtedy jedyna forma rozszerzania właściwości obiektu tworzonego w taki sposób.</p><p>Możemy również do obiektu <code>Object</code> przekazywać różne wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1 }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [String: &#39;foo&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Boolean: true]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Number: 42]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Jeżeli będziemy przekazywać tam różne wartości, <code>Object</code> stworzy dla nas odpowiedni obiekt, który reprezentuje przekazany typ. Tak naprawdę przydatność takiego kodu jest mała. Dlatego też rzadko ujrzycie wywołanie <code>Object</code> do tworzenia czy to normalnych obiektów, czy też obiektów dla innych typów. Natomiast sam <code>Object</code> będzie przez nas często używany do wywołania metod, które ma wbudowane.</p><h2 id="tworzenie-obiektow-za-pomoca-funkcji" tabindex="-1"><a class="header-anchor" href="#tworzenie-obiektow-za-pomoca-funkcji" aria-hidden="true">#</a> Tworzenie obiektów za pomocą funkcji</h2><p>Wiemy, że funkcje w JavaScript to tak naprawdę obiekty. Mają swój podtyp <code>function</code>, ale wciąż są to obiekty. Możemy wykorzystać konstruktor funkcji do stworzenia obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> surname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> surname<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Person { name: &#39;John&#39;, surname: &#39;Rambo&#39;, print: [Function] }</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rambo</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John Rambo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>W tym kodzie definiujemy funkcję, którą przypisałem do zmiennej. Specjalnie tworzę zmienną z dużej litery, czasami możecie się spotkać z takim zapisem przy funkcjach, które wywoływane są potem z konstruktorem.</p><p>W ciele funkcji wykorzystuję <code>this</code> i przypisuję do niego pola, które będą przetrzyrmywały wartości z parametrów funkcji. Tworzę także dodatkowe pole, które będzie metodą dla tworzonego obiektu.</p><p>Funkcję <code>Person</code> wywołuję ze słówkiem <code>new</code> czyli wywołuję jej konstruktor i przekazuję dane do parametrów. Wywołanie funkcji w taki sposób zwraca nowy obiekt z gotowymi danymi. Posługujemy się nim tak samo, jak zwykłym obiektem JavaScript i nie ma tutaj żadnej różnicy. Możemy odwołać się do każdego pola czy też do metody.</p><p>Zaletą tego rozwiązania jest to, że możemy stworzyć sobie schemat dla obiektu. Potem takich obiektów możemy tworzyć więcej, korzystając właśnie z gotowego schematu. Ten kod jest namiastką klas w JavaScript, które pojawiły się w ES6 i w dużej mierze zastąpiły funkcje tego typu. Dlatego też częściej spotkacie się z takimi zapisami w starszym kodzie JavaScript.</p><h2 id="tworzenie-obiektow-za-pomoca-klas" tabindex="-1"><a class="header-anchor" href="#tworzenie-obiektow-za-pomoca-klas" aria-hidden="true">#</a> Tworzenie obiektów za pomocą klas</h2><p>W ES6 pojawiały się klasy w JavaScript. Jest to zupełnie nowy twór znany z wielu innych języków programowania. Tak naprawdę klasy to <em>syntactic sugar</em> dla tworzenia obiektów przy pomocy konstruktora funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> surname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> surname<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John&#39;, surname: &#39;Rambo&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rambo</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John Rambo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Ta klasa robi dokładnie to samo, co robiła wcześniejsza funkcja. Ma jednak nowocześniejszą i wygodniejszą konstrukcję. I to właśnie tę składnię spotkacie najczęściej w nowoczesnym JavaScript. Klasy używane są w każdym nowoczesnym frameworku jak React czy Angular. My do klas powrócimy w zupełnie innym dziale.</p><p>Dlatego nie chcę się teraz zagłębiać w ich budowę i sposób wykorzystania, ponieważ wszystko omawiane jest w dalszym dziale.</p><h2 id="tworzenie-obiektow-za-pomoca-object-create" tabindex="-1"><a class="header-anchor" href="#tworzenie-obiektow-za-pomoca-object-create" aria-hidden="true">#</a> Tworzenie obiektów za pomocą Object.create</h2><p>Za każdym razem, gdy tworzymy obiekt w JavaScript, dziedziczą one pewne właściwości z <code>Object.prototype</code> o czym będziemy jeszcze rozmawiać. To dziedziczenie zapewnia każdemu obiektowi zbiór pewnych funkcjonalności w postaci metod, które możemy wywołać. Zapewnia także pewne gotowe właściwości opisujące obiekty.</p><p>Metoda <code>Object.create</code> pozwala nam tworzyć obiekty zarówno z dziedziczeniem prototypu, jak i obiekty bez żadnego prototypu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sound<span class="token operator">:</span> <span class="token string">&#39;Biiip&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dog <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&#39;How how!&#39;</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// How how!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Ten przykład pokazuje często użycie <code>Object.create</code> do tworzenia nowego obiektu na bazie innego obiektu. W tym przypadku rozszerzamy obiekt bazowy <code>animal</code> przekazując go do metody <code>Object.create</code>. Otrzymujemy zupełnie nowy obiekt, który bazuje na obiekcie <code>animal</code> i również na tym, co dziedziczył obiekt <code>animal</code> wcześniej.</p><p>Wykorzystując <code>Object.create</code>, możemy też dodać nowe właściwości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> dog1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;Reksio&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reksio</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Nowe właściwości przekazujemy jako obiekt, gdzie podajemy nazwę nowej właściwości, do której musimy przekazać wartość. Wartość także zapisujemy jako obiekt. W ten sposób na bazie obiektu <code>animal</code>, stworzyliśmy nowy obiekt, który ma dodatkową właściwość <code>name</code>.</p><p>Drugim działaniem <code>Object.create</code> jest tworzenie obiektu bez żadnego prototypu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jest to po prostu pusty obiekt. Nie posiada on żadnych właściwości ani żadnych metod. Nie dziedziczy też po głównym obiekcie <code>Object</code>. Taki obiekt czasami był stosowany jako słownik, czyli struktura <code>Map</code>, ale obecnie mapy mamy dostępne w JavaScript od wersji ES6. Dlatego ciężko dzisiaj znaleźć zastosowanie dla tego rozwiązania.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>najprostszą i najlepszą formą tworzenia obiektów to postać literalna</li><li>w JavaScript mamy także opcję skorzystania z konstruktora <code>Object</code></li><li>jeżeli potrzebujemy stworzyć wiele razy ten sam obiekt, możemy użyć konstruktora funkcji</li><li>w ES6 pojawiały się klasy co wydaje się lepszą wersją konstruktorów funkcji</li><li><code>Object.create</code> tworzy obiekt na bazie innego obiektu</li></ul>',34),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,o.up)("Comments");return(0,o.wg)(),(0,o.iD)(o.HY,null,[e,(0,o.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,o]of a)n[s]=o;return n}}}]);