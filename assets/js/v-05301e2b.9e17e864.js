"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[9326],{4110:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-05301e2b",path:"/obiekty/kopiowanie-laczenie-obiektow/",title:"Kopiowanie i łączenie obiektów",lang:"pl-PL",frontmatter:{permalink:"/obiekty/kopiowanie-laczenie-obiektow"},excerpt:"",headers:[{level:2,title:"Kopiowanie za pomocą spread operatora",slug:"kopiowanie-za-pomoca-spread-operatora",children:[]},{level:2,title:"Kopiowanie z Object.assign()",slug:"kopiowanie-z-object-assign",children:[]},{level:2,title:"Łączenie obiektów z Object.assign",slug:"łaczenie-obiektow-z-object-assign",children:[]},{level:2,title:"Deep copy z JSON.parse i JSON.stringify",slug:"deep-copy-z-json-parse-i-json-stringify",children:[]},{level:2,title:"Użycie zewnętrznych narzędzi",slug:"uzycie-zewnetrznych-narzedzi",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/09-kopiowanie-laczenie-obiektow.md",git:{}}},5310:(n,a,s)=>{s.r(a),s.d(a,{default:()=>y});var e=s(6252);const o=(0,e.uE)('<h1 id="kopiowanie-i-łaczenie-obiektow" tabindex="-1"><a class="header-anchor" href="#kopiowanie-i-łaczenie-obiektow" aria-hidden="true">#</a> Kopiowanie i łączenie obiektów</h1><p>Kopiowanie obiektów w JavaScript może być tak samo problematycznie, jak sprawdzenie, czy obiekty są identyczne. Ponieważ pracujemy na referencji, zazwyczaj kopiujemy referencję obiektu, a nie tworzymy jego duplikat. Przyjrzyjmy się teraz jakie mamy narzędzia w JavaScript do stworzenia duplikatu.</p><h2 id="kopiowanie-za-pomoca-spread-operatora" tabindex="-1"><a class="header-anchor" href="#kopiowanie-za-pomoca-spread-operatora" aria-hidden="true">#</a> Kopiowanie za pomocą spread operatora</h2><p>Operator <code>spread</code> w JavaScript może nam posłużyć do stworzenia kopii obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  address<span class="token operator">:</span> <span class="token punctuation">{</span>\n    country<span class="token operator">:</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>p1 <span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John&#39;, address: { country: &#39;USA&#39; } }</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>address <span class="token operator">===</span> copy<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>W przykładzie mamy przygotowany obiekt, który ma także zagnieżdżony inny obiekt. Za pomocą operatora <code>spread</code> wypakowując wszystkie właściwości do innego obiektu, stworzy jego kopię.</p><p>Gdy porównujemy referencje, widzimy, że obiekty mają różną referencję. Udało nam się wykonać kopie. Inaczej jest w przypadku obiektu zagnieżdżonego <code>address</code>. Porównanie referencji w tych obiektach pokazuje, że wciąż to te same obiekty. Jeżeli dokonalibyśmy zmiany w obiekcie <code>p1.address</code> będzie ona także widoczna w obiekcie <code>copy.address</code>.</p><p><code>Spread</code> operator dokonuje <code>shallow copy</code>. Nie jest stanie stworzyć pełnej kopii, gdy obiekt posiada inne obiekty referencyjne.</p><h2 id="kopiowanie-z-object-assign" tabindex="-1"><a class="header-anchor" href="#kopiowanie-z-object-assign" aria-hidden="true">#</a> Kopiowanie z Object.assign()</h2><p>Kolejną metodą, którą możemy użyć do skopiowania obiektu jest <code>Object.assign</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  address<span class="token operator">:</span> <span class="token punctuation">{</span>\n    country<span class="token operator">:</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> copy2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John&#39;, address: { country: &#39;USA&#39; } }</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2 <span class="token operator">===</span> copy2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>address <span class="token operator">===</span> copy2<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Tym razem wykorzystujemy metodę <code>Object.assing</code>. Jako pierwszy parametr metoda przyjmuje obiekt, do którego będą przekopiowane właściwości z drugiego parametru. Drugim parametrem jest więc obiekt, który chcemy sklonować. Metoda ta zwraca tak naprawdę połączenie tych dwóch obiektów.</p><p>Jeżeli kopiujemy obiekty za pomocą tej metody, pierwszym parametrem powinien być pusty obiekt. Wtedy do pustego obiektu zostaną przepisane właściwości z drugiego obiektu.</p><p>Tak jak w przypadku <code>spread</code> dokonujemy tylko i wyłącznie <code>shallow copy</code>. Również ta metoda nie radzi sobie z kopiowaniem obiektów referencyjnych.</p><h2 id="łaczenie-obiektow-z-object-assign" tabindex="-1"><a class="header-anchor" href="#łaczenie-obiektow-z-object-assign" aria-hidden="true">#</a> Łączenie obiektów z Object.assign</h2><p>Metoda <code>Object.assing</code>, może nam się przydać do łączenia obiektów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token string">&#39;far&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> merged <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: &#39;foo&#39;, b: &#39;boo&#39;, c: &#39;far&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: &#39;foo&#39;, b: &#39;boo&#39;, c: &#39;far&#39; }</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>W tym przykładzie mamy stworzone trzy obiekty, które przekazane do <code>Object.assing</code> tworzą jeden obiekt. W metodzie <code>Object.assing</code> pierwszym parametrem jest obiekt, do którego przepisywane są właściwości z pozostałych obiektów. Metoda zwraca obiekt, ale tak naprawdę jest to referencja do obiektu, który został użyty jako pierwszy parametr.</p><p>Nastąpiło więc skopiowanie właściwości z pozostałych obiektów do pierwszego obiektu. Co więcej, jeżeli jakieś pola obiektu powtarzają się, to będzie zachowana wartość z ostatniego obiektu, który ma to samo pole. Łączenie obiektów również działa na zasadzie <code>shallow copy</code>.</p><p><code>Objec.assign</code> może także kopiować metody obiektu, nie jest jednak w stanie przekopiować akcesorów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> merged2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 1, print: [Function: print], value: 1 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>W tym przykładzie obiekt <code>b</code> posiada zarówno metodę, jak i <code>getter</code>. Gdy łączymy obiekt <code>a</code> i obiekt <code>b</code> w rezultacie otrzymujemy obiekt, który ma dwa pola, metodę i zamiast <code>gettra</code> również pole o nazwie <code>value</code>. Podczas kopiowania, <code>getter</code> traktowany jest jako pole obiektu z przypisaną wartością. Również w podobny sposób działa operator <code>spread</code>. Nie jesteśmy wiec w stanie skopiować akcesorów za pomocą tych technik. Jeżeli nam na tym zależy, musimy sami zaimplementować potrzebny algorytm.</p><h2 id="deep-copy-z-json-parse-i-json-stringify" tabindex="-1"><a class="header-anchor" href="#deep-copy-z-json-parse-i-json-stringify" aria-hidden="true">#</a> Deep copy z JSON.parse i JSON.stringify</h2><p>Jedynym szybkim sposobem na stworzenie <em>deep copy</em> w czystym JavaScript jest wykorzystanie <code>JSON.parse</code> oraz <code>JSON.stringify</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> inner<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> deep <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, inner: { c: &#39;foo&#39; } }</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1 <span class="token operator">===</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>inner <span class="token operator">===</span> deep<span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>W tym przykładzie przygotowany obiekt na początku przetwarzamy za pomocą <code>JSON.stringify</code> do formatu JSON, a potem za pomocą <code>JSON.parse</code> przetwarzamy JSON-a do obiektu JavaScript. Taka serializacja zapewnia nam stworzenie <em>deep copy</em>. Widzimy, że porównanie referencji nawet w przypadku zagnieżdżonego obiektu zwraca <code>false</code>.</p><p>Tym sposobem możemy wykonać pełny duplikat obiektu, ma to jednak pewne ograniczenia. Musimy pamiętać, że format JSON ma swoje restrykcje i zasady, dlatego nie każdy obiekt uda się w taki sposób sklonować.</p><h2 id="uzycie-zewnetrznych-narzedzi" tabindex="-1"><a class="header-anchor" href="#uzycie-zewnetrznych-narzedzi" aria-hidden="true">#</a> Użycie zewnętrznych narzędzi</h2><p>Oprócz pewnych gotowych rozwiązań zawsze możemy spróbować napisać swój algorytm kopiowania obiektów JavaScript lub użyć gotowego rozwiązania, co zawsze sugeruję.</p>',29),p=(0,e.Uk)("Jedną z opcji jest użycie biblioteki "),t=(0,e._)("em",null,"Lodash",-1),c=(0,e.Uk)(". Mamy tam metody zarówno do "),i={href:"https://lodash.com/docs/4.17.15#clone",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("shallow copy"),l=(0,e.Uk)(" jak też metody do "),u={href:"https://lodash.com/docs/4.17.15#cloneDeep",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("deep copy"),d=(0,e.Uk)(". Dostępne są także metody, które możemy konfigurować i zdecydować jak powinien być nasz obiekt kopiowany."),b=(0,e.uE)('<h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>za pomocą operatora <code>spread</code> zrobimy <em>shallow copy</em> obiektu</li><li>metoda <code>Object.assign</code> może posłużyć do zrobienia <em>shallow copy</em> obiektu</li><li>metoda <code>Object.assing</code> łączy obiekty do pierwszego przekazanego obiektu jako argument</li><li><em>deep copy</em> możemy wykonać za pomocą parsowania JSON-a ma to jednak swoje ograniczenia</li><li>najlepszym sposobem na klonowanie obiektów jest użycie gotowej biblioteki</li></ul>',2),m={},y=(0,s(3744).Z)(m,[["render",function(n,a){const s=(0,e.up)("OutboundLink"),m=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e._)("p",null,[p,t,c,(0,e._)("em",null,[(0,e._)("a",i,[r,(0,e.Wm)(s)])]),l,(0,e._)("em",null,[(0,e._)("a",u,[k,(0,e.Wm)(s)])]),d]),b,(0,e.Wm)(m)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);