"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[302],{6977:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-2894c17d",path:"/obiekty/destrukcja-obiektow/",title:"Destrukturyzacja obiektów",lang:"pl-PL",frontmatter:{permalink:"/obiekty/destrukcja-obiektow"},excerpt:"",headers:[{level:2,title:"Podstawowe użycie destrukturyzacji",slug:"podstawowe-uzycie-destrukturyzacji",children:[]},{level:2,title:"Destrukturyzacja do zadeklarowanych zmiennych",slug:"destrukturyzacja-do-zadeklarowanych-zmiennych",children:[]},{level:2,title:"Destrukturyzacja do funkcji",slug:"destrukturyzacja-do-funkcji",children:[]},{level:2,title:"Parametr rest w destrukturyzacji",slug:"parametr-rest-w-destrukturyzacji",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/07-destrukcja-obiektow.md",git:{}}},6522:(n,a,s)=>{s.r(a),s.d(a,{default:()=>o});var e=s(6252);const p=(0,e.uE)('<h1 id="destrukturyzacja-obiektow" tabindex="-1"><a class="header-anchor" href="#destrukturyzacja-obiektow" aria-hidden="true">#</a> Destrukturyzacja obiektów</h1><p>Destrukturyzacja obiektów jest bardzo ciekawym sposobem na wypakowanie z obiektu tylko tych danych, które potrzebujemy. Ma zastosowanie w wielu sytuacjach i często jest używana w kodzie JavaScript.</p><h2 id="podstawowe-uzycie-destrukturyzacji" tabindex="-1"><a class="header-anchor" href="#podstawowe-uzycie-destrukturyzacji" aria-hidden="true">#</a> Podstawowe użycie destrukturyzacji</h2><p>Na początek zobaczmy, jak działa podstawowe użycie destrukturyzacji obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> surname <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rambo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Mamy zdefiniowany obiekt z polami <code>name</code> i <code>surname</code>. Tworzę też dwie zmienne <code>const</code>, które umieszczam w klamerkach. Do tej konstrukcji przypisuję zadeklarowany wcześniej obiekt. Tak właśnie zapisuje się destrukturyzację obiektu. JavaScript na podstawie tego zapisu wyciągnie z pól obiektu wartości i przypisze je do zmiennych o tych samych nazwach.</p><p>Ważne jest tutaj, aby zadeklarowane zmienne dla destrukturyzacji posiadały te same nazwy pól, które posiada obiekt.</p><p>Porównajmy destrukturyzację do normalnego zapisu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token keyword">const</span> surname2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>surname<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Widzimy, że zapis jest dłuższy i przy próbie wyciągnięcia wielu danych naraz musielibyśmy napisać naprawdę wiele kodu.</p><p>Możemy też wyciągać dane z bardziej zagnieżdżonych obiektów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Ramob&#39;</span><span class="token punctuation">,</span>\n  address<span class="token operator">:</span> <span class="token punctuation">{</span>\n    city<span class="token operator">:</span> <span class="token string">&#39;Hope&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> address<span class="token operator">:</span> <span class="token punctuation">{</span> city <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hope</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>W tym obiekcie mamy dodatkowo zagnieżdżony obiekt <code>address</code>. Przy deklaracji instrukcji pod destrukturyzację obiektu, musimy podać nazwę zagnieżdżonego obiektu, a potem podajemy nazwy zmiennych, które chcemy z tego obiektu wyciągnąć.</p><p>Możemy w ten sposób obsłużyć dowolną ilość zagnieżdżeń.</p><h2 id="destrukturyzacja-do-zadeklarowanych-zmiennych" tabindex="-1"><a class="header-anchor" href="#destrukturyzacja-do-zadeklarowanych-zmiennych" aria-hidden="true">#</a> Destrukturyzacja do zadeklarowanych zmiennych</h2><p>Może się zdarzyć, że już mamy zadeklarowane zmienne, do których chcemy teraz wypisać dane z obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>\n  brand<span class="token operator">:</span> <span class="token string">&#39;Opel&#39;</span><span class="token punctuation">,</span>\n  model<span class="token operator">:</span> <span class="token string">&#39;Astra&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> brand <span class="token operator">=</span> <span class="token string">&#39;Ford&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> model <span class="token operator">=</span> <span class="token string">&#39;Mustnag&#39;</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token punctuation">{</span> brand<span class="token punctuation">,</span> model <span class="token punctuation">}</span> <span class="token operator">=</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Opel</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Astra</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>W tym przypadku mamy obiekt i zmienne, które mają przypisaną wartość. Chcemy jednak do tych zmiennych przypisać wartości z obiektu. Jeżeli chcemy użyć gotowych zmiennych, musimy całe wyrażenie destrukturyzacji objąć dodatkowymi okrągłymi nawiasami.</p><p>Może wydarzyć się sytuacja, w której chcemy wypakować dane z obiektu, ale do innych nazw zmiennych niż pola w obiekcie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> brand<span class="token operator">:</span> brandCar<span class="token punctuation">,</span> model<span class="token operator">:</span> modelCar <span class="token punctuation">}</span> <span class="token operator">=</span> car<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brandCar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Opel</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>modelCar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Astra</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Ten przypadek pokazuje deklarację zmiennych do destrukturyzacji, ale z innymi nazwami niż pola w obiekcie. Ponieważ w obiekcie <code>car</code> znajdują się pola <code>brand</code> i <code>model</code>, również nasze zmienne powinny się tak nazywać. W tym przypadku przy inicjalizacji zmiennych po dwukropku wstawiamy inną nazwę dla zmiennej. Tworzymy dla niej alias. Ten zapis na pewno może być przydatny, gdy w naszym zakresie znajdują się już zmienne o podobnych nazwach i nie możemy ich użyć.</p><p>Możemy też stworzyć zmienną do destrukturyzacji z przypisaną wartością:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> engine <span class="token operator">=</span> <span class="token string">&#39;Diesel&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> car<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Diesel</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku obiekt <code>car</code> nie ma pola <code>engine</code>. Tworząc zmienną, przypisujemy jej jakąś wartość domyślną. Jeżeli w obiekcie <code>car</code> nie zostało znalezione pole o nazwie <code>engine</code> zachowamy tę wartość, jeśli takie pole byłoby w obiekcie, to nasza zmienna zostanie nadpisana. Jeżeli natomiast nie przypisalibyśmy domyślnej wartości, miałaby wartość <code>undefined</code>. Bardzo przydatne, gdy nie do końca wiadomo czy takie pole będzie istnieć w obiekcie, dzięki temu nasza zmienna ma jakąś domyślną wartość.</p><h2 id="destrukturyzacja-do-funkcji" tabindex="-1"><a class="header-anchor" href="#destrukturyzacja-do-funkcji" aria-hidden="true">#</a> Destrukturyzacja do funkcji</h2><p>Destrukturyzacja obiektu do funkcji to coś, co spotkasz w kodzie JavaScript wielokrotnie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Hobbit&#39;</span><span class="token punctuation">,</span>\n  author<span class="token operator">:</span> <span class="token string">&#39;Tolkien&#39;</span><span class="token punctuation">,</span>\n  pages<span class="token operator">:</span> <span class="token number">333</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> author <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hobbit Tolkien</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Tworzymy funkcję, która jako parametr przyjmuje zapis destrukturyzacji obiektu. Deklarujemy więc w klamrach dokładne nazwy pól, jakie nas interesują z danego obiektu. Naszym zadaniem jest już tylko przesłanie obiektu, a JavaScript rozpakowuje go w odpowiedni sposób. Taki zapis jest czytelniejszy i bardziej zwięzły niż tradycyjne odwoływanie się do danych po kropce.</p><p>Czasami możecie spotkać destrukturyzację przy przekazywanych funkcjach <code>callback</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token string">&#39;Audi&#39;</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">&#39;A4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token string">&#39;Opel&#39;</span><span class="token punctuation">,</span> moel<span class="token operator">:</span> <span class="token string">&#39;Corsa&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token string">&#39;Ford&#39;</span><span class="token punctuation">,</span> mdoel<span class="token operator">:</span> <span class="token string">&#39;Mustang&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\nbooks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> brand <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>W tym przypadku na tablicy wywołujemy metodę <code>map</code> i chcemy pobrać z każdego procesowanego obiektu tylko pole <code>brand</code>. Możemy użyć destrukturyzacji i zapisać, że parametrem będzie przyjmowane właśnie to jedno pole.</p><p>Normalny zapis wyglądałby tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>books<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">car</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Przy destrukturyzacji do metod, również działają wszystkie wcześniejsze reguły związane ze zmianą nazwy, ustawieniem domyślnej wartości czy zagnieżdżaniem obiektów. Jest to bardzo wygodny zapis i dość często stosowany w JavaScript.</p><h2 id="parametr-rest-w-destrukturyzacji" tabindex="-1"><a class="header-anchor" href="#parametr-rest-w-destrukturyzacji" aria-hidden="true">#</a> Parametr rest w destrukturyzacji</h2><p>Parametr <code>rest</code> wygląda tak samo, jak operator <code>spread</code> i możemy go użyć przy destrukturyzacji obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  d<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  e<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> letters<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 100</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 200</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment">//  { c: 300, d: 400, e: 500 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Przy destrukturyzacji zazwyczaj pobieramy część danych z obiektu do oddzielnych zmiennych. Jeżeli chcemy przechwycić pozostałą część, może nam się do tego przydać <code>rest</code> parametr. W tym przykładzie pobieramy wartości z pól <code>a</code> oraz <code>b</code>. Natomiast pozostałe pola pobieramy do zmiennej <code>rest</code> poprzedzonej trzema kropkami.</p><p>Oczywiście nazwa parametru <code>rest</code> może być zupełnie dowolna, ważne, aby parametr był poprzedzony trzema kropkami. Dodatkowo musi znajdować się na końcu wyrażenia i może wystąpić tylko jeden taki parametr.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>destrukturyzacja obiektu to świetne narzędzie do wyciągania pojedynczych danych z obiektu</li><li>destrukturyzacja działa także dla obiektów zagnieżdżonych</li><li>przez destrukturyzację możemy przekazywać parametry do funkcji</li><li>parametr <code>rest</code> może przechwycić dla nas resztę, która została po destrukturyzacji obiektu</li></ul>',41),t={},o=(0,s(3744).Z)(t,[["render",function(n,a){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(s)],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);