"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[2811],{7498:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-10a05f1a",path:"/instrukcje-warunkowe/instrukcja-switch/",title:"Instrukcja Switch",lang:"pl-PL",frontmatter:{permalink:"/instrukcje-warunkowe/instrukcja-switch/"},excerpt:"",headers:[{level:2,title:"Grupowanie",slug:"grupowanie",children:[]},{level:2,title:"Wyrażenia",slug:"wyrazenia",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"instrukcje-warunkowe/02-instrukcja-switch.md",git:{}}},5118:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});var e=a(6252);const p=(0,e.uE)('<h1 id="instrukcja-switch" tabindex="-1"><a class="header-anchor" href="#instrukcja-switch" aria-hidden="true">#</a> Instrukcja Switch</h1><p>W przypadku sprawdzania wielu warunków warto użyć instrukcji <code>switch</code> zamiast instrukcji <code>if</code> i pojedynczych bloków <code>else if</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> randomize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>randomize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Another number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>W instrukcji <code>switch</code> analizujemy wartość i tworzymy warunki do analizowanej wartości. Jeżeli wylosujemy liczbę <code>1</code> lub <code>2</code> to wydrukujemy odpowiednią informację do konsoli. Jeżeli nie, wykona się instrukcja <code>default</code>, która działa podobnie jak <code>else</code> czyli wykonuje się zawsze, gdy wszystkie inne warunki zawiodły.</p><p>Instrukcja <code>default</code> nie jest obowiązkowa i możemy je nie używać.</p><p>Podobnie jest ze słowem kluczowym <code>break</code>, którego zadaniem jest wyjście z instrukcji <code>switch</code> gdy jeden z warunków będzie spełniony.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>randomize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Another number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>W tym przykładzie usuwam wszystkie słowa <code>break</code>. Jeżeli jakiś warunek zostanie spełniony, to zostanie wykonany. Jednak brak słowa kluczowego <code>break</code> oznacza także wykonanie kolejnych warunków, nawet jeżeli nie spełniają porównania. Czasami takie rozwiązanie może się przydać, ale zazwyczaj należy pamiętać o umieszczeniu <code>break</code>.</p><h2 id="grupowanie" tabindex="-1"><a class="header-anchor" href="#grupowanie" aria-hidden="true">#</a> Grupowanie</h2><p>Możemy też grupować warunki:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>randomize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Value is odd: &#39;</span><span class="token punctuation">,</span> randomize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Value is even: &#39;</span><span class="token punctuation">,</span> randomize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;An unknown value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>W tym przypadku tworzymy warunki dla liczb parzystych i nieparzystych. Warunki są zgrupowane i gdy któryś z nich się sprawdzi to wykonana zostanie dana klauzula <code>case</code>. Taki zapis grupowania może się przydać, gdy chcemy sprawdzić kilka warunków:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token string">&#39;IE 11&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;Chrome&#39;</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;Firefox&#39;</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;Safari&#39;</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;Opera&#39;</span><span class="token operator">:</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;Edge&#39;</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Supported!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;IE 11&#39;</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Change your browser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;An uknown browser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Ten zapis bardzo ładnie grupuje opcje, gdzie jest kilka wartości do wyboru. Możemy sobie wyobrazić, że taki zapis w instrukcji <code>if</code> nie będzie zbyt czytelny i najlepszą opcją jest użycie <code>switch</code>.</p><p>Warto zwrócić uwagę, że warunki w instrukcji <code>switch</code> przez JavaScript porównywane są za pomocą potrójnego znaku porównania. Mamy więc dokładne porównanie zarówno typu, jak i wartości.</p><h2 id="wyrazenia" tabindex="-1"><a class="header-anchor" href="#wyrazenia" aria-hidden="true">#</a> Wyrażenia</h2><p>W instrukcji <code>switch</code> możemy także używać wyrażeń:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> randomize <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Value is odd: &#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Value is even: &#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;An unknown value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>W tym przypadku klauzule <code>case</code> używają bardziej skomplikowanego wyrażenia do sprawdzenia wartości. Również możemy wywołać funkcję, która zostanie wykonana w klauzuli <code>case</code>. Do takiej funkcji oczywiście możemy przesłać analizowaną wartość w instrukcji <code>switch</code>.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>do wielu warunków mamy instrukcję <code>switch</code> zamiast <code>if</code></li><li>za pomocą instrukcji <code>switch</code> możemy sprawdzać pojedyncze warunki lub grupę warunków</li><li>słowo kluczowe <code>break</code> pozwala wyjść z instrukcji po wykonaniu warunku, ale nie jest obowiązkowe</li><li>klauzula <code>default</code> wykonywana jest, gdy żaden inny warunek się nie wykonał, nie jest obowiązkowa</li></ul>',21),o={},t=(0,a(3744).Z)(o,[["render",function(n,s){const a=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e.Wm)(a)],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);