"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8901],{1179:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-3bb39c90",path:"/obiekty/konfiguracja-pol/",title:"Konfiguracja pól obiektu w JavaScript",lang:"pl-PL",frontmatter:{permalink:"/obiekty/konfiguracja-pol"},excerpt:"",headers:[{level:2,title:"Pobieranie konfiguracji pól - deskryptor",slug:"pobieranie-konfiguracji-pol-deskryptor",children:[]},{level:2,title:"Deskryptor przy Object.create",slug:"deskryptor-przy-object-create",children:[]},{level:2,title:"Konfiguracja pola w obiekcie przy Object.create",slug:"konfiguracja-pola-w-obiekcie-przy-object-create",children:[]},{level:2,title:"Konfiguracja pól w obiekcie przez defineProperties",slug:"konfiguracja-pol-w-obiekcie-przez-defineproperties",children:[]},{level:2,title:"Pobieranie dziedziczonych właściwości",slug:"pobieranie-dziedziczonych-własciwosci",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"obiekty/04-konfiguracja-pol.md",git:{}}},2161:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="konfiguracja-pol-obiektu-w-javascript" tabindex="-1"><a class="header-anchor" href="#konfiguracja-pol-obiektu-w-javascript" aria-hidden="true">#</a> Konfiguracja pól obiektu w JavaScript</h1><p>Zdefiniowane pola w obiektach JavaScript mogą być dodatkowo konfigurowane. Możemy im ustawić kilka właściwości. Nie będzie to zbyt częsta praktyka w Waszym kodzie. Jednak wiedza o tym jest niezbędna gdy będziemy chcieli zrozumieć głębsze mechanizmy JavaScript.</p><h2 id="pobieranie-konfiguracji-pol-deskryptor" tabindex="-1"><a class="header-anchor" href="#pobieranie-konfiguracji-pol-deskryptor" aria-hidden="true">#</a> Pobieranie konfiguracji pól - deskryptor</h2><p>Z obiektów JavaScript możemy pobrać specjalny obiekt który nazywa się <em>deskryptor</em>. Obiekt ten przetrzymuje różne informacje o konfiguracji pól w danym obiekcie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> descriptor1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Tworzę sobie obiekt i przekazuję go do metody <code>Objec.getOwnPropertyDescriptors()</code>, która zwraca obiekt opisujący każde pole w przekazanym obiekcie.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>name<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\nsurname<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;Rambo&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Widzimy, że kluczem deskryptora są nazwy pól z naszego obiektu, a wartością konfiguracja tego pola. Gdy tworzymy obiekt z polami lub dodajemy do niego pola, za każdym razem JavaScript tworzy standardową konfiguracje.</p><p>W konfiguracji mamy takie właściwości jak:</p><ul><li><code>value</code> - wartość danego pola</li><li><code>writable</code> - opisuje czy pole może mieć zmienianą wartość</li><li><code>enumerable</code> - opisuje czy pole obiektu będzie widoczne przez pętle i inne metody które mogą iterować po obiektach</li><li><code>configurable</code> - opisuje czy możemy zmieniać bieżącą konfigurację i usuwać pole z obiektu</li></ul><p>Wartości, które teraz widzicie, są standardowo przez JavaScript ustawiane na <code>true</code> i nie musicie się nimi specjalnie przejmować.</p><p>Dodatkowo istnieje jeszcze jedna metoda, która zwraca deskryptor dokładnie jednego pola z obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> descriptor2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Do metody przekazujemy obiekt, oraz w postaci stringa nazwę pola, które chcemy zbadać.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Otrzymujemy jeden obiekt, konfiguracyjny.</p><p>Konfiguracje możemy także pobierać dla getterów, setterów i metod obiektów jeżeli mamy takie właściwości zdefiniowane w obiekcie. My będziemy pracowali tylko na polach obiektu.</p><h2 id="deskryptor-przy-object-create" tabindex="-1"><a class="header-anchor" href="#deskryptor-przy-object-create" aria-hidden="true">#</a> Deskryptor przy Object.create</h2><p>Gdy pracujemy z obiektami tworząc je w formie literalnej, nie musimy się specjalnie przejmować konfiguracją pól w obiekcie. Konfiguracja jaka jest ustawiana przez JavaScript jest w zupełności wystarczająca i dobra do 99% wykonywanych zadań w kodzie.</p><p>Czasami jednak może się zdarzyć, że pola w obiekcie będą miały inną konfigurację niż standardowa:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> descriptor3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>W tym kodzie na bazie gotowego obiektu, za pomocą <code>Object.create</code> tworzymy zupełnie nowy obiekt. Dodatkowo w definiuję dla nowego obiektu pole <code>age</code>. Gdy teraz prześwietlimy nowy obiekt za pomocą <code>Object.getOwnPropertyDescriptors()</code> zobaczymy, że otrzymujemy konfiguracje tylko dla pola, które zdefiniowaliśmy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>age<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Ponadto, konfiguracja ta różni się od konfiguracji pól w obiektach tworzonych literalnie. Okazuje się, że stworzone przez nas pole <code>age</code> nie jest zapisywalne, nie jest obsługiwane przez pętle i nie jest już konfigurowalne. Dzieje się tak, bo nie przekazaliśmy konfiguracji, a JavaScript nie zrobi tego za nas.</p><p>Na początek jednak wyjaśnijmy, dlaczego w deskryptorze obiektu nie ma informacji o polach, które zostały odziedziczone po oryginalnym obiekcie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj3<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Gdy wywołamy metodę <code>Object.getOwnPropertyDescriptors</code> na właściwości <code>__proto__</code> otrzymamy konfigurację wcześniej odziedziczonych pól:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>name<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\nsurname<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;Rambo&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Pola, które zostały odziedziczone nie znajdują się dokładnie w nowo stworzonym obiekcie, ale w odziedziczonym prototypie. Metody, które zaczynają się od <code>getOwn</code> zwracają zawsze właściwości danego obiektu. Dlatego, nie udało nam się pobrać konfiguracji odziedziczonych pól z nowo stworzonego obiektu. Obiekt ten nie jest de facto właścicielem tych pól.</p><p>Jest to dość ważne, aby rozpoznać właściwości danego obiektu. Ponieważ niektóre metody pracują tylko i wyłącznie na tak zwanych <em>own proprety</em> obiektu, czyli na polach obiektu, które należą dokładnie do niego:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Przykładem jest <code>Object.values</code>. Metoda ta ma pobrać i wyświetlić listę wartości, ze wszystkich pól obiektu. Jednak nie wyświetla nic, ponieważ dwa pola nie należą stricte do tego obiektu, a trzecie pole <code>age</code>, które zostało dodane, nie jest <code>enumerable</code>, ponieważ pobrana konfiguracja pokazuje wartość <code>false</code> dla tego pola.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj3<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> element <span class="token operator">=</span> obj3<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">// &#39;John&#39;, &#39;Rambo&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Dla przykładu gdy użyjemy pętli <code>for ... in</code> będziemy mogli pobrać już wszystkie wartości z danego obiektu. Ta pętla rozpoznaje w obiekcie nawet te pola, które do niego nie należą i pochodzą z prototypu innego obiektu. Ale oczywiście dalej nie wyświetli pola <code>age</code> ponieważ jest <code>enumerable</code> w konfiguracji pola jest ustawione na <code>false</code> co oznacza, że pole to nadal nie jest widoczne dla wszelkich mechanizmów itreujących.</p><p>Należy więc uważać, gdy pracujemy z obiektami, które są tworzone na przykład przez <code>Object.create</code>. Niektóre działania metod mogą nas zaskoczyć.</p><h2 id="konfiguracja-pola-w-obiekcie-przy-object-create" tabindex="-1"><a class="header-anchor" href="#konfiguracja-pola-w-obiekcie-przy-object-create" aria-hidden="true">#</a> Konfiguracja pola w obiekcie przy Object.create</h2><p>Pozostał nam do rozwiązania problem złej konfiguracji pola przy nowo stworzonym obiekcie przez <code>Object.create</code>. Przy dodaniu nowego pola przez <code>Object.create</code>, gdy nie przekażemy żadnej konfiguracji przyjmuje ona wartości domyślne, ustawione na <code>false</code>.</p><p>Możemy to jednak zmienić w prosty sposób:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  surname<span class="token operator">:</span> <span class="token string">&#39;Rambo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obj5 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj4<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> descriptor4 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj5<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Gdy używamy <code>Object.create</code> i dodajemy nowe pole do tworzonego obiektu możemy także przekazać konfigurację.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>age<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W ten sposób unikniemy problemów, jakie mogą się przydarzyć przy braku konfiguracji. Jeżeli chcemy mieć taką samą konfigurację jaką tworzy JavaScript przy normalnym dodawaniu pól, należy wszędzie ustawić <code>true</code>.</p><h2 id="konfiguracja-pol-w-obiekcie-przez-defineproperties" tabindex="-1"><a class="header-anchor" href="#konfiguracja-pol-w-obiekcie-przez-defineproperties" aria-hidden="true">#</a> Konfiguracja pól w obiekcie przez defineProperties</h2><p>Konfiguracje możemy zmienić także później, ponieważ JavaScript daje nam dwie metody. Pierwsza z nich to <code>Object.defineProperties</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj6 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  property1<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj6<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  property1<span class="token operator">:</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n    writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  property2<span class="token operator">:</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Metoda ta, może nie tylko zmieniać konfiguracje pól w obiekcie, ale także dodawać nowe pola. Służy głównie do modyfikowania lub dodawania wielu właściwości.</p><p>W tym przykładzie widzimy, że mamy zdefiniowany obiekt, który konfigurujemy dodatkowo przez <code>Object.defineProperties</code>. W tej konfiguracji zmieniamy wartość pola <code>property1</code> i jego konfigurację. Dodajemy także zupełnie nowe pole <code>property2</code>, ale bez żadnej konfiguracji.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>property1<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>\nproperty2<span class="token operator">:</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">&quot;boo&quot;</span><span class="token punctuation">,</span> writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Jeżeli pominiemy konfigurację przy dodawaniu nowego pola, okaże się, że wszystkie wartości konfiguracyjne będą ustawione na <code>false</code>.</p><p>Istnieje też metoda do modyfikowania pojedynczych pól:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj7 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj7<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 42}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Do metody <code>Object.defineProperty()</code> przekazujemy obiekt, który chcemy zmodyfikować oraz nazwę pola do modyfikacji lub do dodania. W tym przypadku nastąpi modyfikacja pola o nazwie <code>a</code>.</p><p>Możemy w ten sposób także dodać <code>getter</code> czy <code>setter</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj7<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    a <span class="token operator">=</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj7<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Od tego momentu obiekt będzie posiadał zdefiniowane metody <code>get</code> i <code>set</code> o nazwie <code>b</code>.</p><h2 id="pobieranie-dziedziczonych-własciwosci" tabindex="-1"><a class="header-anchor" href="#pobieranie-dziedziczonych-własciwosci" aria-hidden="true">#</a> Pobieranie dziedziczonych właściwości</h2><p>W obiekcie <code>Object</code> istnieje jeszcze specjalna metoda, która pomaga pobierać pola dziedziczone z innego obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj8 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Stworzyłem obiekt za pomocą <code>Object.create</code> . Jako pierwszy argument do tej metody podałem inny obiekt z dwoma polami, który będzie prototypem nowego obiektu.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Gdy wyświetlam stworzony obiekt, nie widzę żadnych właściwości obiektu.</p><p>Dopiero użycie metody <code>Object.getPrototypeOf</code> zwraca mi wszystkie pola obiektu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Prosta metoda, ale może być bardzo przydatna gdy musimy pracować z tak skomplikowanymi obiektami.</p><p>Konfiguracja pól obiektów to nie są popularne techniki, które będzie używać na co dzień. Jednak wiedza o tym wydaje się istotna. Wiemy teraz co to znaczy <code>own properties</code> oraz to, że pola w obiekcie mają konfigurację, gdzie ważną konfiguracją jest pole <code>enumerable</code>. Jest to istotna wiedza, ponieważ na tych hasłach często opiera się dokumentacja i działanie wielu metod w obiektach i tablicach JavaScript.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>obiekty posiadają deskryptor, który opisuje konfigurację każdego pola</li><li>przy dodawaniu nowych właściwości do obiektu, konfiguracja tworzona jest automatycznie</li><li>jeżeli dodajemy pola za pomocą specjalnych metod, to warto zadbać o konfigurację, ponieważ domyślnie ustawiana jest na <code>false</code></li><li>właściwości obiektu modyfikujemy przez takie metody jak <code>Object.defineProperty</code> lub <code>Object.defineProperties</code></li><li>niektóre metody współpracują tylko z polami, które należą stricte do danego obiektu, nie biorą pod uwagę właściwości dziedziczonych</li></ul>',67),o={},p=(0,s(3744).Z)(o,[["render",function(a,n){return e}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);