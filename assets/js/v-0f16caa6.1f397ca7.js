"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[8512],{2357:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-0f16caa6",path:"/zmienne-i-typy/typ-nan-infinity/",title:"NaN i Infinity",lang:"pl-PL",frontmatter:{permalink:"/zmienne-i-typy/typ-nan-infinity"},excerpt:"",headers:[{level:2,title:"Inne liczby typu Number",slug:"inne-liczby-typu-number",children:[{level:3,title:"Wartość NaN",slug:"wartosc-nan",children:[]},{level:3,title:"Sprawdzenie wartości NaN",slug:"sprawdzenie-wartosci-nan",children:[]},{level:3,title:"Problemy z isNaN",slug:"problemy-z-isnan",children:[]}]},{level:2,title:"Wartość Infinity",slug:"wartosc-infinity",children:[]},{level:2,title:"Sprawdzanie Infinity",slug:"sprawdzanie-infinity",children:[]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"zmienne-i-typy/06-typ-nan-infinity.md",git:{}}},5018:(n,a,s)=>{s.r(a),s.d(a,{default:()=>o});const e=(0,s(6252).uE)('<h1 id="nan-i-infinity" tabindex="-1"><a class="header-anchor" href="#nan-i-infinity" aria-hidden="true">#</a> NaN i Infinity</h1><p>Żeby nieco skomplikować sytuację jeśli chodzi o typ <code>number</code> powiem wam jeszcze o dodatkowych wartościach jakie może ten typ posiadać. Są to wartości <code>NaN, Infinity, -Infinity</code>. Gdzie <code>NaN</code> tłumaczymy jako <em>Not a Number</em>.</p><h2 id="inne-liczby-typu-number" tabindex="-1"><a class="header-anchor" href="#inne-liczby-typu-number" aria-hidden="true">#</a> Inne liczby typu Number</h2><p>Gdy sprawdzimy typ tych wartości za pomocą operatora <code>typeof</code> okaże się, że wymienione wartości to także typ <code>number</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Niestety wprowadza to trochę zamieszania. Nie chodzi tutaj tylko o nazwę wartości <code>NaN</code>, która jest określona jako <code>Not a Number</code> , a przecież jest typu <code>number</code>. Za chwilę zobaczymy jakie są problemy z wartością <code>NaN</code></p><h3 id="wartosc-nan" tabindex="-1"><a class="header-anchor" href="#wartosc-nan" aria-hidden="true">#</a> Wartość <code>NaN</code></h3><p>Najpierw omówmy sobie typ <code>NaN</code>, jest on bardzo ciekawy i dość problematyczny.</p><p>Przyjrzymy się najpierw sytuacjom kiedy otrzymamy <code>NaN</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">*</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">/</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">-</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">*</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1764</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;8&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 64</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Wykonując jakaś operację matematyczną z innym literałem niż liczba możemy otrzymać wartość <code>NaN</code>. Dzieje się tak zawsze, gdy nie jest możliwe z takiej operacji zwrócenie liczby. W ostatnich przykładzie mamy jednak mnożenie z typem <code>string</code>, gdzie zachodzi niejawna konwersja na typ <code>number</code> i działanie udaje się przeprowadzić.</p><p>Zwróć uwagę, że nie ma tutaj operacji dodawania. Gdy używamy znaku plus w połączeniu z typem <code>string</code> znak ten nie służy wtedy do przeprowadzenia operacji matematycznej, ale do łączenia wartości. Prostym przykładem jest dodanie liczby do tekstu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5test as a &#39;string&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5100 as a &#39;string&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5100 as a &#39;string&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W takim przypadku otrzymujemy wartość typu <code>string</code>. Jest to kolejny niuans, na który warto zwrócić uwagę. Omówimy go jednak bardziej szczegółowo przy typie <code>string</code>.</p><p>Widzimy zatem, że przy próbie wykonania jakieś operacji matematycznej możemy zostać zaskoczeni wynikiem, możemy otrzymać wartość <code>NaN</code>, liczbę, albo po prostu zwykły tekst.</p><h3 id="sprawdzenie-wartosci-nan" tabindex="-1"><a class="header-anchor" href="#sprawdzenie-wartosci-nan" aria-hidden="true">#</a> Sprawdzenie wartości <code>NaN</code></h3><p>Jak już wiemy, możemy wykonać dziwną operacją matematyczną i otrzymać <code>NaN</code> jako wynik. Niestety JavaScript nie zwraca nam w tym przypadku żadnego błędu co było by chyba najbardziej przydatne.</p><p>Może się bowiem okazać, że zmienił się jeden z typów na którym wykonujemy operację matematyczną i nasza aplikacja dalej działa produkując wartość <code>NaN</code>, która z czasem gdzieś tam ujawni się użytkownikowi.</p><p>Przy możliwości wystąpienia takiej sytuacji, warto sprawdzić czy wartość jest <code>NaN</code>, tym bardziej gdy nie do końca jesteśmy pewni na jakich danych pracujemy.</p><p>Znamy już operator porównania i możemy to zrobić:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">/</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Wykonuję proste działanie, które zwróci <code>NaN</code> i próbuję porównać moją wartość <code>NaN</code> z wartością ogólną <code>NaN</code>. Okazuje się jednak, że <code>NaN</code> nie jest równe <code>NaN</code>, wypiszmy to jeszcze raz do konsoli bo trochę trudno uwierzyć:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Otrzymujemy wynik <code>false</code>. Dzieje się tak ponieważ, każda wytworzona wartość <code>NaN</code> jest unikalna na swój sposób. <code>NaN</code> nigdy nie jest równe sobie. Ciekawostką jest to, że jest to jedyna wartość w JavaScript, która nigdy nie jest równa sobie.</p><p>Żeby sobie z tym poradzić użyjemy gotowych metod. W JavaScript mamy zaimplementowane dwie metody do sprawdzania czy mamy do czynienia z wartością <code>NaN</code>.</p><p>Możemy wywołać metodę globalną <code>isNaN</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>lub też metodę z obiektu <code>Number</code> czyli <code>Number.isNaN</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Obie metody w tym przypadku zwracają tą samą wartość <code>true</code>. Wiemy więc, że wynik naszego działania jest <code>NaN</code> i możemy jakoś zareagować w naszej aplikacji.</p><h3 id="problemy-z-isnan" tabindex="-1"><a class="header-anchor" href="#problemy-z-isnan" aria-hidden="true">#</a> Problemy z <code>isNaN</code></h3><p>Niestety sama metoda <code>isNaN</code> nie działa do końca zbyt dokładnie. Jej definicja mówi:</p><blockquote><p>Funkcja isNaN () określa, czy wartość jest NaN, czy nie.</p></blockquote><p>Nie do końca działa to precyzyjnie, gdy przekażemy tam stringa:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>W tym przypadku funkcja <code>isNaN</code> twierdzi, że string jest <code>NaN</code>. Jak wiemy string ma swój typ <code>string</code> nie jest to typ <code>number</code>. Więc nie może być wartością <code>NaN</code>. Niestety zachodzi tam niejawna konwersja do typu <code>number</code> przez co ostatecznie ze stringa powstaje <code>NaN</code>. Jest to jednak błędne działanie bo sama funkcja miała określić czy przekazywana wartość jest <code>NaN</code>.</p><p>Gdy weźmiemy natomiast metodę pochodzącą z obiektu <code>Number</code> zobaczymy inny wynik:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Zadaniem tej metody jest dokładne określenie czy coś jest <code>NaN</code> i ma typ <code>number</code>. Jest to zdecydowanie bardziej precyzyjna metoda, którą warto używać.</p><p>Niestety tutaj znowu objawia się słabość języka JavaScript. Błędne implementacje z przeszłości są przykrywane lepszymi rozwiązaniami w najnowszych wersjach języka. Przez to dzisiaj mamy dwie funkcje, których nazwa mówi, że robią to samo, jednak dają nam różne wyniki.</p><p>Na koniec warto sobie jeszcze porównać różnice działania obydwu funkcji przy przekazywaniu innych wartości niż <code>number</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;blabla&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;blabla&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Widzimy różnicę, że <code>Number.isNaN</code> dokładnie określa czy coś ma typ <code>number</code> i jest <code>NaN</code>. Wszelkie inne wartości, nie są typem <code>number</code> więc nie mogą być <code>NaN</code>.</p><p>Niestety funkcja <code>isNaN</code> nie jest tak precyzyjna i forsuję konwersję do typu <code>number</code> po czym stara się określić czy jest to wartość <code>NaN</code>. Dlatego, gdy przekażemy do niej inne wartości niż <code>number</code> często zwróci nam informację, że wartość ta jest <code>NaN</code>. Przykładem jest choćby <code>string</code>, który jest określony przez funkcję jako <code>NaN</code>, ale nie jest wartością liczbową samą w sobie.</p><p>Jeżeli byśmy chcieli sprawdzić czy mamy do czynienia z prawdziwą liczbą, która nie jest przy okazji <code>NaN</code> nasz zapis może wyglądać tak:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">55</span> <span class="token operator">*</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>W tym przypadku sprawdzamy czy wartość jest typu <code>number</code> (zauważ że typ <code>number</code> zapisany jest jako string!) oraz czy ten <code>number</code> nie jest <code>NaN</code>. Jest to jeden z przykładów, który można użyć do otrzymywania prawdziwych liczb.</p><h2 id="wartosc-infinity" tabindex="-1"><a class="header-anchor" href="#wartosc-infinity" aria-hidden="true">#</a> Wartość <code>Infinity</code></h2><p>Inną wartością specjalną dla <code>number</code> jest wartość <code>Infinity</code> oraz <code>-Infinity</code>. Otrzymujemy ją na przykład gdy podzielimy liczbę przez 0. W wielu językach programowania, takie działanie powoduje wyrzucenie wyjątku i otrzymania błędu. Nawet najprostszy kalkulator odmawia podzielenia przez 0.</p><p>Zobaczmy zatem co się stanie gdy będziemy wykonywać taką operację w JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Gdy podzielimy jakaś wartość przez zero, okaże się, że otrzymamy wartość <code>Infinity</code>. Dodatkowo wartość ta ma typ <code>number</code>.</p><p>Możemy także otrzymać wartość <code>-Infinity</code> dzieląc liczbę przez ujemne 0, które występuje w JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// -Infinity</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Wartość <code>Infinity</code> ma także swoją reprezentację jako stała w obiekcie <code>Number</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token comment">// -Infinity</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Na szczęście możemy porównać <code>Infinity</code> samo ze sobą i otrzymać wartość <code>true</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span> <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Nie jest to więc to tak problematyczna wartość jak <code>NaN</code>.</p><h2 id="sprawdzanie-infinity" tabindex="-1"><a class="header-anchor" href="#sprawdzanie-infinity" aria-hidden="true">#</a> Sprawdzanie <code>Infinity</code></h2><p>Nie będziemy się nad tą wartością zbyt długo rozwodzić. Najprostszym sposobem na uchronienie się przed tą wartością jest zabezpieczenie się przed dzieleniem przez 0. Możemy stworzyć do tego funkcję, która będzie sprawdzała czy dzielnik nie jest zerem.</p><p>Innym sposobem jest sprawdzanie konkretnej wartości za pomocą metody <code>Number.isFinite</code>.</p><p>Zobaczmy przykładowe wartości:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">2e42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>do dyspozycji mamy także globalną funkcję <code>isFinite</code>, która działa podobnie jak globalna funkcja <code>isNaN</code>. Najpierw próbuje konwertować wartość do liczby i potem sprawdzić czy jest to wartość <code>Infinity</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">2e42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Dlatego też powstaje nam różnica gdy próbujemy przekonwertować liczbę w postaci <code>string</code>.</p><p>Jak widzimy i <code>NaN</code> i <code>Infinity</code> mogą być wartościami, na które trafimy pracując z typem <code>number</code>. Wiemy teraz skąd się biorą i jak z nimi pracować.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>wartość <code>NaN</code> i <code>Infinity</code> to typ <code>number</code></li><li>wartość <code>NaN</code> otrzymamy gdy wykonamy nieprawidłową operację matematyczną, najczęściej na złych typach</li><li>wartość <code>NaN</code> nie jest sama sobie równa, powstały specjalne funkcje do sprawdzania tej wartości</li><li>najlepszą opcją dzisiaj jest używanie metody <code>Number.isNaN</code></li><li>wartość <code>Infinity</code> i <code>-Infinity</code> powstaje najczęściej przy dzieleniu przez 0</li><li>wartość tą możemy sprawdzać przez metodę <code>Number.isFinite</code></li></ul>',70),t={},o=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);