"use strict";(self.webpackChunkkurs_javascript=self.webpackChunkkurs_javascript||[]).push([[7899],{9734:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-86a56278",path:"/funkcje/deklaracja-funkcji/",title:"Deklaracje funkcji",lang:"pl-PL",frontmatter:{permalink:"/funkcje/deklaracja-funkcji/"},excerpt:"",headers:[{level:2,title:"Standardowa funkcja",slug:"standardowa-funkcja",children:[{level:3,title:"Funkcja bez parametrów",slug:"funkcja-bez-parametrow",children:[]},{level:3,title:"Wyrażenie funkcyjne",slug:"wyrazenie-funkcyjne",children:[]},{level:3,title:"Wyrażenie funkcyjne z nazwą",slug:"wyrazenie-funkcyjne-z-nazwa",children:[]}]},{level:2,title:"Arrow functions",slug:"arrow-functions",children:[{level:3,title:"Arrow function i return",slug:"arrow-function-i-return",children:[]},{level:3,title:"Arrow function i jeden parametr",slug:"arrow-function-i-jeden-parametr",children:[]},{level:3,title:"Arrow function bez parametrów",slug:"arrow-function-bez-parametrow",children:[]}]},{level:2,title:"Co warto zapamiętać",slug:"co-warto-zapamietac",children:[]}],filePathRelative:"funkcje/01-deklaracja-funkcji.md",git:{}}},7687:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});var e=s(6252);const o=(0,e.uE)('<h1 id="deklaracje-funkcji" tabindex="-1"><a class="header-anchor" href="#deklaracje-funkcji" aria-hidden="true">#</a> Deklaracje funkcji</h1><p>W JavaScript funkcję możemy zadeklarować na kilka sposobów. Dodatkowo sama funkcja może mieć kilka rodzajów. Spotkamy się zatem z definicją funkcji, metody, konstruktora funkcji, funkcją strzałową. W tym dziale zajmiemy się wszystkim, co dotyczy działania funkcji.</p><h2 id="standardowa-funkcja" tabindex="-1"><a class="header-anchor" href="#standardowa-funkcja" aria-hidden="true">#</a> Standardowa funkcja</h2><p>Na początek przyjrzymy się deklaracji funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ten zapis pokazuje standardową funkcję w JavaScript znaną od początku istnienia tego języka. Słowo kluczowe <code>function</code> poprzedza deklarację funkcji, potem mamy nazwę funkcji <code>fun1</code> oraz nawiasy okrągłe z parametrami. Klamra odpowiedzialna jest za ciało funkcji. A słowo kluczowe <code>return</code> za zwracanie z funkcji wyniku dodania dwóch parametrów.</p><p>Wywołanie funkcji wiąże się z użyciem jej nazwy i przekazaniem parametrów:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Zwracany wynik jest przechowywany w zmiennej i wyświetlony za pomocą <code>console.log</code>.</p><h3 id="funkcja-bez-parametrow" tabindex="-1"><a class="header-anchor" href="#funkcja-bez-parametrow" aria-hidden="true">#</a> Funkcja bez parametrów</h3><p>Funkcja oczywiście nie musi przyjmować parametrów i nie musi zwracać jawnie wyniku.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>W tym przypadku mamy funkcję bez parametrów z wykonaniem instrukcji <code>console.log</code>.</p><h3 id="wyrazenie-funkcyjne" tabindex="-1"><a class="header-anchor" href="#wyrazenie-funkcyjne" aria-hidden="true">#</a> Wyrażenie funkcyjne</h3><p>W JavaScript możemy także przypisać funkcję do zmiennej.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">fun3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Nazywamy to wyrażeniem funkcyjnym. Funkcja w tym przypadku jest wartością dopisaną do zmiennej <code>fun3</code>. Zauważcie, że funkcja nie ma nazwy, jest to funkcja anonimowa.</p><p>Funkcje wywołujemy przez nazwę zmiennej, działa to podobnie jak standardowa funkcja. Zauważcie, że na końcu deklaracji takiej funkcji jest średnik, a przy tworzeniu standardowej funkcji nie używamy średnika.</p><p>Standardowa funkcja jest instrukcją jak pętla <code>for</code> czy warunek <code>if</code>, tam też na końcu nie ma średnika. Natomiast wyrażenie funkcyjne jest przypisaniem wartości do zmiennej, gdzie zawsze używa się średnika.</p><h3 id="wyrazenie-funkcyjne-z-nazwa" tabindex="-1"><a class="header-anchor" href="#wyrazenie-funkcyjne-z-nazwa" aria-hidden="true">#</a> Wyrażenie funkcyjne z nazwą</h3><p>Wyrażenie funkcyjne może być też zapisane z nazwą funkcji:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fun4</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fun5</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// fun5(); // error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Ten przypadek pokazuje zapis wyrażenia funkcyjnego z nazwą funkcji. Nie możemy się jednak posługiwać jej nazwą, nadal musimy korzystać z nazwy zmiennej, do której została dopisana funkcja.</p><p>Nazwa funkcji w tym przypadku jest dostępna tylko w środku tej funkcji. Oraz ma znaczenie przy debugowaniu kodu. Gdy używamy wielu anonimowych funkcji bez nazwy, podczas debugowania trudno jest się zorientować, która funkcja jest która. Nadawanie nazw funkcjom anonimowym może nam pomóc w czasie debugowania, gdyż nazwy funkcji w stosie wywołania będą wyświetlane.</p><p>Pomimo tej zalety w kodzie JavaScript raczej nie spotkacie się z nadawaniem nazw funkcjom anonimowym.</p><h2 id="arrow-functions" tabindex="-1"><a class="header-anchor" href="#arrow-functions" aria-hidden="true">#</a> Arrow functions</h2><p>Oprócz standardowych funkcji w JavaScript, od ES6 mamy dostęp do arrow functions:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Funkcje strzałkowe są wyrażeniem, zawsze dopisywanym do zmiennej tak jak wyrażenie funkcyjne. Nie mają nazwy i słowa kluczowego function. Przed strzałką definiujemy parametry funkcji, a po strzałce jest ciało funkcji. W przypadku funkcji jednolinijkowy nie musimy używać dodatkowych nawiasów klamrowych i słowa kluczowego return.</p><h3 id="arrow-function-i-return" tabindex="-1"><a class="header-anchor" href="#arrow-function-i-return" aria-hidden="true">#</a> Arrow function i return</h3><p>Jeżeli chcemy zapisać w ciele funkcji więcej niż jedną linię, to możemy zrobić taki zapis:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Ten przykład pokazuje funkcję strzałkową, gdzie mamy normalne ciało funkcji z nawiasami klamrowymi i słowem kluczowym return.</p><h3 id="arrow-function-i-jeden-parametr" tabindex="-1"><a class="header-anchor" href="#arrow-function-i-jeden-parametr" aria-hidden="true">#</a> Arrow function i jeden parametr</h3><p>Inny zapis funkcji to bez nawiasów okrągłych. Nawiasy na początku funkcji możemy ominąć w przypadku jednego parametru:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To jest przykład funkcji gdzie mamy tylko jeden parametr.</p><h3 id="arrow-function-bez-parametrow" tabindex="-1"><a class="header-anchor" href="#arrow-function-bez-parametrow" aria-hidden="true">#</a> Arrow function bez parametrów</h3><p>Jeżeli nie mamy parametrów, to musimy wstawić puste nawiasy okrągłe:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">arrow5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;boo&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Ta funkcja nie przyjmuje parametrów, ale zwraca wartość string. Jeżeli arrow function nie przyjmuje parametrów, musimy wstawić puste okrągłe nawiasy.</p><p>Do arrow functions będziemy jeszcze wracać, ponieważ posiada ona o wiele więcej ciekawostek niż przedstawione tutaj przykłady.</p><h2 id="co-warto-zapamietac" tabindex="-1"><a class="header-anchor" href="#co-warto-zapamietac" aria-hidden="true">#</a> Co warto zapamiętać</h2><ul><li>standardowe funkcje deklarujemy za pomocą słowa kluczowego <code>function</code></li><li>możemy tworzyć wyrażenie funkcji przypisując ją do zmiennej</li><li>przy wyrażeniu funkcyjnym tworzymy najczęściej funkcje anonimowe</li><li>funkcje anonimowe mogą być nazwane, ale nazwę takiej funkcji możemy użyć tylko wewnątrz funkcji</li><li>od ES6 mamy dostęp do nowoczesnych funkcji strzałkowych</li><li>funkcje strzałkowe mają wiele form zapisu</li></ul>',44),t={},p=(0,s(3744).Z)(t,[["render",function(a,n){const s=(0,e.up)("Comments");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e.Wm)(s)],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);